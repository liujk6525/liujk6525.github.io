{
    "version": "https://jsonfeed.org/version/1",
    "title": "你不是单打独斗 • All posts by \"目标检测\" category",
    "description": "",
    "home_page_url": "https://liujk6525.github.io",
    "items": [
        {
            "id": "https://liujk6525.github.io/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/%E8%B7%91%E9%80%9Assd-pytorch/",
            "url": "https://liujk6525.github.io/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/%E8%B7%91%E9%80%9Assd-pytorch/",
            "title": "跑通ssd.pytorch",
            "date_published": "2023-05-31T02:16:02.000Z",
            "content_html": "<p><strong>补：</strong></p>\r\n<h1 id=\"expected-a-cuda-device-type-for-generator-but-found-cpu\">Expected a ‘cuda‘ device type for generator but found ‘cpu‘</h1>\r\n<p>后来我在服务器训练的时候，发现出bug了。原来是<code>Pytorch</code>版本的原因，我在<code>faster-rcnn-pytorch</code>这个项目跑的，里面有现成的VOC数据集。但是这个环境<code>Pytorch</code>是1.9。</p>\r\n<ol type=\"1\">\r\n<li><p>修改<code>/root/miniconda3/lib/python3.7/site-packages/torch/utils/data/sampler.py</code>中代码，修改结果如下。</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">generator = torch.Generator(device=<span class=\"string\">&#x27;cuda&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">yield</span> <span class=\"keyword\">from</span> torch.randperm(n, generator=generator, device=<span class=\"string\">&#x27;cuda&#x27;</span>).tolist()</span><br></pre></td></tr></table></figure>\r\n<span id=\"more\"></span></li>\r\n<li><p>修改<code>train.py</code>中代码，修改结果如下。</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data_loader = data.DataLoader(dataset, args.batch_size,</span><br><span class=\"line\">                                  num_workers=args.num_workers,</span><br><span class=\"line\">                                  shuffle=<span class=\"literal\">True</span>, collate_fn=detection_collate,</span><br><span class=\"line\">                                  pin_memory=<span class=\"literal\">True</span>, generator=torch.Generator(device=<span class=\"string\">&#x27;cuda&#x27;</span>))</span><br></pre></td></tr></table></figure></li>\r\n</ol>\r\n<h1 id=\"w-pthreadpool-cpp.cc90-warningleaking-caffe2-thread-pool-after-fork.function-pthreadpool\">[W pthreadpool-cpp.cc:90] Warning:Leaking Caffe2 thread-pool after fork.(function pthreadpool)</h1>\r\n<p>线程撕裂，出现了警告，警告数量为设置的线程数量，如果把线程数改小一些，就不会有警告了，但是会影响运行速度。修改<code>train.py</code>中的代码，修改结果如下。</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data_loader = data.DataLoader(dataset, args.batch_size,</span><br><span class=\"line\">                                 num_workers=args.num_workers,</span><br><span class=\"line\">                                 shuffle=<span class=\"literal\">True</span>, collate_fn=detection_collate,</span><br><span class=\"line\">                                 pin_memory=<span class=\"literal\">False</span>,generator=torch.Generator(device=<span class=\"string\">&#x27;cuda&#x27;</span>))</span><br></pre></td></tr></table></figure>\r\n<hr />\r\n<p>然后我想在服务器上用<code>visdom</code>看训练结果图，bug出现了。</p>\r\n<h1 id=\"nameerror-name-viz-is-not-defined\">NameError: name ‘viz’ is not defined</h1>\r\n<p>修改<code>train.py</code>中的代码，修改结果如下。</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> visdom</span><br><span class=\"line\"><span class=\"keyword\">global</span> viz</span><br><span class=\"line\">viz = visdom.Visdom()</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"assertionerror-must-define-a-window-to-update\">AssertionError: Must define a window to update</h1>\r\n<p>修改<code>train.py</code>中的代码，修改结果如下。</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> args.visdom <span class=\"keyword\">and</span> iteration != <span class=\"number\">0</span> <span class=\"keyword\">and</span> (iteration % epoch_size == <span class=\"number\">0</span>):</span><br><span class=\"line\">    epoch += <span class=\"number\">1</span></span><br><span class=\"line\">    update_vis_plot(epoch, loc_loss, conf_loss, epoch_plot, <span class=\"literal\">None</span>,</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"legacy-autograd-function-with-non-static-forward-method-is-deprecated\">Legacy autograd function with non-static forward method is deprecated</h1>\r\n<p>原因是当前版本要求forward过程是静态的，所以需要将原代码进行修改。</p>\r\n<ol type=\"1\">\r\n<li><p>从<a href=\"https://github.com/sayakbanerjee1999/Single-Shot-Object-Detection-Updated/blob/master/detection.py\"><code>Single-Shot-Object-Detection-Updated</code></a>下载<code>detect.py</code>文件，并将其替换掉原来的<code>layers/functions/detection.py</code></p></li>\r\n<li><p>修改<code>ssd.py</code>中的代码，修改结果如下。</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> phase == <span class=\"string\">&#x27;test&#x27;</span>:</span><br><span class=\"line\">        self.softmax = nn.Softmax(dim=-<span class=\"number\">1</span>)</span><br><span class=\"line\">        self.detect = Detect()</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> self.phase == <span class=\"string\">&quot;test&quot;</span>:</span><br><span class=\"line\">        output = self.detect.apply(self.num_classes, <span class=\"number\">0</span>, <span class=\"number\">200</span>, <span class=\"number\">0.01</span>, <span class=\"number\">0.45</span>,</span><br><span class=\"line\">                                   loc.view(loc.size(<span class=\"number\">0</span>), -<span class=\"number\">1</span>, <span class=\"number\">4</span>),  <span class=\"comment\"># loc preds</span></span><br><span class=\"line\">                                   self.softmax(conf.view(-<span class=\"number\">1</span>, self.num_classes)),  <span class=\"comment\"># conf preds</span></span><br><span class=\"line\">                                   self.priors.<span class=\"built_in\">type</span>(<span class=\"built_in\">type</span>(x.data))  <span class=\"comment\"># default boxes</span></span><br><span class=\"line\">                                   )</span><br></pre></td></tr></table></figure></li>\r\n</ol>\r\n<h1 id=\"errno-2-no-such-file-or-directory-test.txt\">[Errno 2] No such file or directory: ‘test.txt’</h1>\r\n<p>修改<code>eval.py</code>中的代码，修改结果如下。</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imgsetpath = os.path.join(args.voc_root, <span class=\"string\">&#x27;VOC2007&#x27;</span>, <span class=\"string\">&#x27;ImageSets&#x27;</span>, <span class=\"string\">&#x27;Main&#x27;</span>, <span class=\"string\">&#x27;&#123;&#125;.txt&#x27;</span>)</span><br></pre></td></tr></table></figure>\r\n<hr />\r\n<p>做实验对比，所以需要跑通ssd，这里部署的pytroch版本，大佬项目<a href=\"https://github.com/amdegroot/ssd.pytorch\"><code>ssd.pytorch</code></a>，中间踩了不少坑，记录如下</p>\r\n<p>目标：ssd.pytorch</p>\r\n<p>环境：cuda 11.3 | pytorch 1.8.1</p>\r\n<h1 id=\"修改xml文件的绝对路径\">修改xml文件的绝对路径</h1>\r\n<p>这是在之前的电脑打的标签，所以VOC数据集里面的标注文件.xml里面的<code>&lt;path&gt;</code>值还是老路径，</p>\r\n<p><img src=\"/imgs/$%7Bfiilename%7D/image-20230531102209091.png\"  style=\"zoom: 67%;\" /></p>\r\n<p>这里我更改成新的路径。</p>\r\n<p><img src=\"/imgs/$%7Bfiilename%7D/image-20230531102832023.png\"  style=\"zoom: 65%;\" /></p>\r\n<h1 id=\"indexerrorinvalid-index-of-a-0-dim-tensor\">IndexError:invalid index of a 0-dim tensor…</h1>\r\n<p>修改<code>train.py</code>中代码，<code>.data[0]</code>写法不适用高版本的Pytorch，修改结果如下。</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loc_loss += loss_l.item()</span><br><span class=\"line\">conf_loss += loss_c.item()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> iteration % <span class=\"number\">10</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;timer: %.4f sec.&#x27;</span> % (t1 - t0))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;iter &#x27;</span> + <span class=\"built_in\">repr</span>(iteration) + <span class=\"string\">&#x27; || Loss: %.4f ||&#x27;</span> % (loss.item()), end=<span class=\"string\">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"stopinteration\">StopInteration…</h1>\r\n<p>修改<code>train.py</code>中代码，修改结果如下。</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    images, targets = <span class=\"built_in\">next</span>(batch_iterator)</span><br><span class=\"line\"><span class=\"keyword\">except</span> StopIteration:</span><br><span class=\"line\">    batch_iterator = <span class=\"built_in\">iter</span>(data_loader)</span><br><span class=\"line\">    images, targets = <span class=\"built_in\">next</span>(batch_iterator)</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"indexerror-the-shape-of-the-mask-14-8732-at-index-0does\">IndexError: The shape of the mask [14, 8732] at index 0does…</h1>\r\n<p>交换<code>layers/modules/multibox_loss.py</code>中代码位置，修改结果如下。</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loss_c = loss_c.view(num, -1)</span><br><span class=\"line\">loss_c[pos] = 0  # filter out pos boxes for now</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"lossnan\">loss：NAN</h1>\r\n<p>如果lr设置过高，可能会导致训练过程中loss出现NAN的情况。它默认的参数是1e-3，我这里将学习率修改为1e-4。</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--lr&#x27;</span>, <span class=\"string\">&#x27;--learning-rate&#x27;</span>, default=<span class=\"number\">1e-4</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">float</span>,</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"警告\">警告</h1>\r\n<p><strong>UserWarning: size_average and reduce args will be deprecated, please use reduction=‘sum’ instead. warnings.warn(warning.format(ret))</strong></p>\r\n<p>在高版本的Pytorch中，<code>size_average</code>和<code>reduce</code>这两个参数都将不再支持，修改<code>multibox_loss.py</code>中代码，修改结果如下。</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loss_l = F.smooth_l1_loss(loc_p, loc_t, reduction=<span class=\"string\">&#x27;sum&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">loss_c = F.cross_entropy(conf_p, targets_weighted, reduction=<span class=\"string\">&#x27;sum&#x27;</span>)</span><br></pre></td></tr></table></figure>\r\n<p><strong>UserWarning: volatile was removed and now has no effect. Use ‘with torch.no_grad():’ instead.</strong></p>\r\n<p>版本问题，修改<code>ssd.py</code>中代码，修改结果如下。</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> torch.no_grad():</span><br><span class=\"line\">\tself.priors = Variable(self.priorbox.forward())</span><br></pre></td></tr></table></figure>\r\n<p><strong>UserWarning: nn.init.xavier_uniform is now deprecated in favor of nn.init.xavier_uniform_ .init.xavier_uniform(param)</strong></p>\r\n<p><code>nn.init.xavier_uniform</code>是以前的版本使用的，在高版本的Pytorch中已经被弃用。修改<code>train.py</code>中代码，修改结果如下。</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">xavier</span>(<span class=\"params\">param</span>):</span><br><span class=\"line\">    init.xavier_uniform_(param)</span><br></pre></td></tr></table></figure>\r\n<p>可以发现很多警告就是版本不匹配的问题，但我是抱着只要能运行的心态，然而<code>UserWarning</code>又很影响观感，那就直接屏蔽它！</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> warnings</span><br><span class=\"line\"></span><br><span class=\"line\">warnings.filterwarnings(<span class=\"string\">&#x27;ignore&#x27;</span>)</span><br></pre></td></tr></table></figure>\r\n<p>或者命令行执行<code>xx.py</code>脚本文件</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -W ignore xx.py</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"运行train.py文件\">运行train.py文件</h1>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -W ignore train.py</span><br></pre></td></tr></table></figure>\r\n<p><img src=\"/imgs/$%7Bfiilename%7D/image-20230531115820400.png\" style=\"zoom: 67%;\" /></p>\r\n<h1 id=\"参考\">参考</h1>\r\n<p><a href=\"amdegroot/ssd.pytorch/issues/421\"><code>amdegroot/ssd.pytorch/issues/421</code></a></p>\r\n<p><a href=\"https://blog.csdn.net/qq_39506912/article/details/116926504?spm=1001.2014.3001.5506\"><code>SSD训练自己的数据集（pytorch版）</code></a></p>\r\n<p><a href=\"https://www.cnblogs.com/shaoxx333/p/16181651.html\"><code>Pytorch搭建SSD模型踩坑集锦</code></a></p>\r\n<p><a href=\"https://www.yii666.com/blog/407628.html\"><code>SSD训练数据集流程（学习记录）</code></a></p>\r\n",
            "tags": [
                "Python",
                "ssd.pytorch"
            ]
        },
        {
            "id": "https://liujk6525.github.io/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/%E8%B7%91%E9%80%9AYolo-v5/",
            "url": "https://liujk6525.github.io/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/%E8%B7%91%E9%80%9AYolo-v5/",
            "title": "wii11系统跑通Yolo-v5",
            "date_published": "2023-05-27T02:06:35.000Z",
            "content_html": "<p>之前跑Yolo-v5是在服务器跑的，现在把权重文件跑完了，正好最近换了新电脑，在本地部署跑跑看，记录如下：</p>\r\n<p>复现<img src=\"/imgs/$%7Bfiilename%7D/b3809ce4a80e96cf09f6d500abed0fbd_129107_720_720.jpg\"  style=\"zoom:5%;\" />大佬们的项目之前一定要看这个项目所需的配置环境，掉大坑！！！</p>\r\n<p>目标：Yolo-v5 v6.1版本</p>\r\n<p>环境：cuda 11.3 | pytorch 1.8.1</p>\r\n<span id=\"more\"></span>\r\n<h1 id=\"安装anaconda3\">安装Anaconda3</h1>\r\n<p><a href=\"https://www.anaconda.com/\"><code>anaconda官网</code></a></p>\r\n<p><img src=\"/imgs/$%7Bfiilename%7D/image-20230527104222716.png\" alt=\"image-20230527104222716\" style=\"zoom:33%;\" /></p>\r\n<p>直接点击<code>Download</code>下载安装包，双击安装</p>\r\n<p>我把<code>Anaconda</code>安装在D盘了</p>\r\n<p><img src=\"/imgs/$%7Bfiilename%7D/image-20230527105216332.png\"  style=\"zoom: 67%;\" /></p>\r\n<h1 id=\"安装cuda\">安装CUDA</h1>\r\n<p>安装之前先看下自己电脑配置条件，在终端输入</p>\r\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvidia-smi</span><br></pre></td></tr></table></figure>\r\n<p><img src=\"/imgs/$%7Bfiilename%7D/image-20230527105741395.png\"  style=\"zoom: 50%;\" /></p>\r\n<p>可以看到<code>Driver Version: 512.98</code></p>\r\n<p>在对照<a href=\"https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html\"><code>nvidia官网显卡驱动</code></a>给出的版本要求选择CUDA版本，这里我选择的是<code>CUDA 11.3</code></p>\r\n<p><img src=\"/imgs/$%7Bfiilename%7D/image-20230527110416589.png\"  style=\"zoom: 33%;\" /></p>\r\n<p>然后来到<a href=\"https://developer.nvidia.com/cuda-toolkit-archive\"><code>CUDA Toolkit Archive</code></a>，</p>\r\n<p><img src=\"/imgs/$%7Bfiilename%7D/image-20230527111819649.png\"  style=\"zoom:50%;\" /></p>\r\n<p>点击<code>CUDA Toolkit 11.3.1</code>即可跳转到<a href=\"https://developer.nvidia.com/cuda-11-3-1-download-archive?target_os=Windows&amp;target_arch=x86_64&amp;target_version=10&amp;target_type=exe_local\"><code>CUDA Toolkit 11.3 Update 1 Downloads</code></a></p>\r\n<p><img src=\"/imgs/$%7Bfiilename%7D/image-20230527112055726.png\"  style=\"zoom: 33%;\" /></p>\r\n<p>直接点击<code>Download(2.7GB)</code>下载安装包，双击安装</p>\r\n<p>这里选择<code>自定义(c)(高级)</code></p>\r\n<p><img src=\"/imgs/$%7Bfiilename%7D/image-20230527113136663.png\"  style=\"zoom:50%;\" /></p>\r\n<p>选择驱动程序组件时，视情况而定；我这里取消勾选<code>Driver components</code>和<code>Other components</code>，因为当前版本已经安装了。</p>\r\n<p><img src=\"/imgs/$%7Bfiilename%7D/image-20230527113247098.png\"  style=\"zoom:50%;\" /></p>\r\n<p>点击<code>下一步</code>，等待安装完成。</p>\r\n<h1 id=\"配置cudnn\">配置cuDNN</h1>\r\n<p>进入Nvidia官网<a href=\"https://developer.nvidia.com/rdp/cudnn-archive\"><code>cuDNN Archive</code></a>，选择<code>for CUDA 11.X</code>的。</p>\r\n<p><img src=\"/imgs/$%7Bfiilename%7D/image-20230527114836975.png\" style=\"zoom:33%;\" /></p>\r\n<p>我这里选择的是<code>v8.8.0</code>版本的，点击<code>Local Install for Windows(Zip)</code>下载</p>\r\n<p><img src=\"/imgs/$%7Bfiilename%7D/image-20230527114635962.png\"  style=\"zoom: 33%;\" /></p>\r\n<p>解压后里面有三个文件<span class=\"math inline\">\\(bin|include|lib\\)</span></p>\r\n<p><img src=\"/imgs/$%7Bfiilename%7D/image-20230527123944344.png\"  style=\"zoom: 43%;\" /></p>\r\n<p>将其复制到CUDA安装目录就好了，我这里把CUDA安装在D盘了。</p>\r\n<p><img src=\"/imgs/$%7Bfiilename%7D/image-20230527124408026.png\"  style=\"zoom:33%;\" /></p>\r\n<h1 id=\"安装pytorch\">安装pytorch</h1>\r\n<p>打开<code>Anaconda Prompt</code>，输入如下命令，创建一个虚拟环境，我这里命名为yolov5；</p>\r\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n yolov5 python=3.8</span><br></pre></td></tr></table></figure>\r\n<p>所用到的各种包都是在yolov5这个虚拟环境下配置的，所以需要激活yolov5环境</p>\r\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda activate yolov5</span><br></pre></td></tr></table></figure>\r\n<p><img src=\"/imgs/$%7Bfiilename%7D/image-20230527131627319.png\"  style=\"zoom:50%;\" /></p>\r\n<p>进入Pytorch官网<a href=\"https://pytorch.org/get-started/previous-versions/#installing-previous-versions-of-pytorch\"><code>Installing Previous Versions Of Pytorch</code></a></p>\r\n<p><strong>conda install 安装</strong></p>\r\n<p><img src=\"/imgs/$%7Bfiilename%7D/image-20230527130150777.png\"  style=\"zoom: 50%;\" /></p>\r\n<p>我这里是安装的CUDA 11.3，输入以下指令</p>\r\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install pytorch==1.8.1 torchvision==0.9.1 torchaudio==0.8.1 cudatoolkit=11.3 -c pytorch -c conda-forge</span><br></pre></td></tr></table></figure>\r\n<p><code>-c pytorch</code> 表示在pytorch的官网下载；<code>-c conda-forge</code> 表示在conda官网下载</p>\r\n<p>但是pytorch官网只有cpu版本的，conda索性找不到了。好在CUDA是向下兼容的，最后选择用pip install的方式下载了。</p>\r\n<p><strong>pip install 安装</strong></p>\r\n<p><img src=\"/imgs/$%7Bfiilename%7D/image-20230527130231273.png\"  style=\"zoom: 50%;\" /></p>\r\n<p>最后选择的CUDA 11.1，输入以下指令；</p>\r\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install torch==1.8.1+cu111 torchvision==0.9.1+cu111 torchaudio==0.8.1 -f https://download.pytorch.org/whl/torch_stable.html</span><br></pre></td></tr></table></figure>\r\n<p>到这里pytorch环境就配置好了！</p>\r\n<p><img src=\"/imgs/$%7Bfiilename%7D/image-20230527133453540.png\"  style=\"zoom: 67%;\" /></p>\r\n<h1 id=\"下载yolo-v5源代码\">下载Yolo-v5源代码</h1>\r\n<p>Yolo-v5更新的很快，但我当时用服务器跑的时候下载的v6.1版本，所以用git bash下载文件。</p>\r\n<p>我是在<code>Pycharm Projects</code>里面创建一个文件夹<code>Yolov5</code>，然后右击选择<code>Git Bash Here</code></p>\r\n<p><img src=\"/imgs/$%7Bfiilename%7D/image-20230527134730082.png\"  style=\"zoom: 50%;\" /></p>\r\n<p> ifconfigbash</p>\r\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> -b v6.1 https://github.com/ultralytics/yolov5.git</span><br></pre></td></tr></table></figure>\r\n<p><img src=\"/imgs/$%7Bfiilename%7D/image-20230527134152555.png\"  style=\"zoom:50%;\" /></p>\r\n<p>这样就把源代码下载完成了，我这里把它重命名了<code>yolov5-6.1</code>，</p>\r\n<p><img src=\"/imgs/$%7Bfiilename%7D/image-20230527135851656.png\"  style=\"zoom: 40%;\" /></p>\r\n<p>接下来从requirements.txt安装所需要的包。打开<code>Anaconda Prompt</code>，cd到yolov5-6.1文件夹</p>\r\n<p>我这里是<code>E:\\Pycharm Projects\\Yolov5\\yolov5-6.1</code></p>\r\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>\r\n<p><img src=\"/imgs/$%7Bfiilename%7D/image-20230527140112538.png\" alt=\"image-20230527140112538\" style=\"zoom:50%;\" /></p>\r\n<p>到这里就全部部署完成好了，接下来就是把自己的权重文件替换成yolov5的预训练权重文件yolov5.pt。</p>\r\n<p>执行detect.py，测试了一下。</p>\r\n<p><img src=\"/imgs/$%7Bfiilename%7D/image-1317.jpg\"  style=\"zoom: 45%;\" /></p>\r\n<p><img src=\"/imgs/$%7Bfiilename%7D/image-1685.jpg\"  style=\"zoom:45%;\" /></p>\r\n<p><img src=\"/imgs/$%7Bfiilename%7D/image-20230527141712871.png\"  style=\"zoom:40%;\" /></p>\r\n<p>还是能较好的把可采摘的苹果和被遮挡的苹果识别出来。</p>\r\n",
            "tags": [
                "Python",
                "Yolov5"
            ]
        }
    ]
}