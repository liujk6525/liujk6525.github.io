{
    "version": "https://jsonfeed.org/version/1",
    "title": "你不是单打独斗 • All posts by \"tsp问题\" category",
    "description": "",
    "home_page_url": "https://liujk6525.github.io",
    "items": [
        {
            "id": "https://liujk6525.github.io/TSP%E9%97%AE%E9%A2%98/%E5%9F%BA%E4%BA%8E%E6%B7%B7%E5%90%88%E7%B2%92%E5%AD%90%E7%BE%A4%E7%AE%97%E6%B3%95%E7%9A%84TSP%E7%AE%97%E6%B3%95/",
            "url": "https://liujk6525.github.io/TSP%E9%97%AE%E9%A2%98/%E5%9F%BA%E4%BA%8E%E6%B7%B7%E5%90%88%E7%B2%92%E5%AD%90%E7%BE%A4%E7%AE%97%E6%B3%95%E7%9A%84TSP%E7%AE%97%E6%B3%95/",
            "title": "基于混合粒子群算法的TSP算法",
            "date_published": "2023-05-10T13:10:59.000Z",
            "content_html": "<h1 id=\"理论基础\">理论基础</h1>\r\n<h2 id=\"基本粒子群算法\">基本粒子群算法</h2>\r\n<p>粒子群算法，也称粒子群优化算法或鸟群觅食算法（Particle Swarm Optimization，PSO），它通过追随当前搜索到的最优值来寻找全局最优。这种算法以其实现容易、精度高、收敛快等优点引起了学术界的重视，并且在解决实际问题中展示了其优越性。</p>\r\n<span id=\"more\"></span>\r\n<h3 id=\"基本原理\">基本原理</h3>\r\n<p>PSO中，每个优化问题的解都是搜索空间中的一只鸟。我们称之为“粒子”。所有的粒子都有一个由被优化的函数决定的适应值(fitness value)，每个粒子还有一个速度决定他们飞翔的方向和距离。然后粒子们就追随当前的最优粒子在解空间中搜索。</p>\r\n<p>粒子位置的更新方式如下所示</p>\r\n<p><img src=\"/imgs/$%7Bfiilename%7D/image-20230511062229130.png\" alt=\"粒子位置额更新方式\" style=\"zoom: 67%;\" /></p>\r\n<p><span class=\"math inline\">\\(PSO\\)</span>初始化为一群随机粒子(随机解)。然后通过迭代找到最优解。在每一次迭代中，粒子通过跟踪两个“极值”来更新自己。第一个就是粒子本身所找到的最优解，这个解叫做个体极值P<sub>best</sub>。另一个极值是整个种群目前找到的最优解，这个极值是全局极值g<sub>best</sub>。另外也可以不用整个种群而只是用其中一部分作为粒子的邻居，那么在所有邻居中的极值就是局部极值。</p>\r\n<p>假设在一个D维的目标搜索空间中，有N个粒子组成一个种群，其中</p>\r\n<p>第i个粒子为一个D维的向量 <span class=\"math display\">\\[\r\nX_i = (x_{i1},x_{i2},x_{i3},...x_{iD}),\\quad i=1,2,3,...,N\r\n\\]</span> 第i个粒子的“飞行”速度也是一个D维的向量 <span class=\"math display\">\\[\r\nV_i = (v_{i1},v_{i2},v_{i3},...v_{iD}),\\quad i=1,2,3,...,N\r\n\\]</span> 第i个粒子迄今为止搜索到的最优位置称为个体极值 <span class=\"math display\">\\[\r\nP_{best}=(p_{i1},p_{i2},p_{i3},...p_{iD}),\\quad i=1,2,3,...,N\r\n\\]</span> 整个粒子群迄今为止搜索到的最优位置称为全局极值 <span class=\"math display\">\\[\r\ng_{best}=(p_{g1},p_{g2},p_{g3},...p_{gD})\r\n\\]</span> 在找到这两个最优值时，粒子根据如下公式更新自己的速度和位置 <span class=\"math display\">\\[\r\nv_{id}=w*v_{id}+c_1r_1(p_{id}-x_{id})+c_2r_2(p_{gd}-x_{id})\\\\\r\nx_{id}=x_{id}+v_{id}\r\n\\]</span></p>\r\n<p>式中，w为惯性权重(inertia weight)，c<sub>1</sub>,c<sub>2</sub>为学习因子，也称为加速常量(acceleration constants)，r<sub>1</sub>r<sub>2</sub>为[0,1]范围内的均匀随机数</p>\r\n<p>w*v<sub>id</sub> 为“惯性”或者”动量“部分，反映了粒子的运动习惯，代表粒子有维持自己先前速度的趋势。</p>\r\n<p>c<sub>1</sub>r<sub>1</sub>(p<sub>id</sub>-x<sub>id</sub>)为“认知”部分，反映了粒子对自身历史经验的记忆或回忆，代表了粒子有向自身历史最佳位置逼近的趋势。</p>\r\n<p>c<sub>2</sub>r<sub>2</sub>(p<sub>gd</sub>-x<sub>id</sub>)为“社会”部分，反映了粒子间协同合作与知识共享的群体历史经验，代表了粒子有向群体或邻域历史最佳位置逼近的趋势。</p>\r\n<h3 id=\"pso算法的流程\">PSO算法的流程</h3>\r\n<ol type=\"1\">\r\n<li>初始化粒子群，包括群体规模N，每个粒子的位置x<sub>i</sub>和速度v<sub>i</sub>；</li>\r\n<li>计算每个粒子的适应度Fitness(i)；</li>\r\n<li>对每个粒子，将其适应值Fitness(i)与其经过的最优值P<sub>best</sub>(i)作比较，如果较好，则将其替换掉原来的P<sub>best</sub>(i)；</li>\r\n<li>对每个粒子，将其适应值Fitness(i)与其经过的全局最优值g<sub>best</sub>(i)作比较，如果较好，则将其替换掉原来的g<sub>best</sub>(i)；</li>\r\n<li>根据公式更新粒子的速度v<sub>i</sub>和位置x<sub>i</sub>；</li>\r\n<li>如果满足结束条件退出，否则返回第2步。</li>\r\n</ol>\r\n<p><img src=\"/imgs/$%7Bfiilename%7D/image-20230511055154081.png\" alt=\"PSO算法流程图\" style=\"zoom:80%;\" /></p>\r\n<h2 id=\"混合粒子群算法\">混合粒子群算法</h2>\r\n<p>标准粒子群算法通过追随个体极值和群体极值完成极值寻优，虽然操作简单，且能够快速收敛，但是随着迭代次数的不断增加，在种群收敛集中的同时，各粒子也越来越相似，可能在局部最优解周边无法跳出。</p>\r\n<p>混合粒子群算法摒弃了传统粒子群算法中的通过跟踪极值来更新粒子位置的方法，而是引入了<code>遗传算法</code>中的交叉和变异操作，通过粒子同个体极值和群体极值的交叉以及粒子自身变异的方式来搜索最优解。</p>\r\n<p><img src=\"/imgs/$%7Bfiilename%7D/image-20230511070402553.png\" alt=\"混合粒子群算法流程图\" style=\"zoom:80%;\" /></p>\r\n<h1 id=\"问题描述\">问题描述</h1>\r\n<p>TSP问题，具体描述参考<a href=\"https://liujk6525.github.io/posts/15650/\"><code>基于遗传算法的TSP算法</code></a>，这边不在赘叙。</p>\r\n<h1 id=\"代码实现\">代码实现</h1>\r\n<h2 id=\"适应值变化\">适应值变化</h2>\r\n<p><img src=\"/imgs/$%7Bfiilename%7D/image-20230511154328042.png\" alt=\"适应值变化图\" style=\"zoom:80%;\" /></p>\r\n<h2 id=\"苹果位置图\">苹果位置图</h2>\r\n<p><img src=\"/imgs/$%7Bfiilename%7D/image-20230511160009530.png\" alt=\"苹果分布图\" style=\"zoom:80%;\" /></p>\r\n<h2 id=\"路径规划图\">路径规划图</h2>\r\n<p>​ <img src=\"/imgs/$%7Bfiilename%7D/image-20230511154532035.png\" alt=\"路径规划图\" style=\"zoom: 80%;\" /></p>\r\n<h2 id=\"最优解\">最优解</h2>\r\n<p><img src=\"/imgs/$%7Bfiilename%7D/image-20230511155618486.png\" alt=\"最优解\" style=\"zoom:80%;\" /></p>\r\n<h1 id=\"参考\">参考</h1>\r\n<p>[1]史峰. MATLAB智能算法30个案例分析[M]. 北京航空航天大学出版社, 2011.</p>\r\n",
            "tags": [
                "Matlab",
                "路径规划"
            ]
        },
        {
            "id": "https://liujk6525.github.io/TSP%E9%97%AE%E9%A2%98/%E5%9F%BA%E4%BA%8E%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E7%9A%84TSP%E7%AE%97%E6%B3%95/",
            "url": "https://liujk6525.github.io/TSP%E9%97%AE%E9%A2%98/%E5%9F%BA%E4%BA%8E%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E7%9A%84TSP%E7%AE%97%E6%B3%95/",
            "title": "基于遗传算法的TSP算法",
            "date_published": "2023-05-07T08:48:51.000Z",
            "content_html": "<h2 id=\"理论基础\">理论基础</h2>\r\n<h3 id=\"遗传算法\">遗传算法</h3>\r\n<p>遗传算法（Genetic Algorithm, GA）起源于对生物系统所进行的计算机模拟研究。它是模仿自然界生物进化机制发展起来的随机全局搜索和优化方法，借鉴了达尔文的进化论和孟德尔的遗传学说。其本质是一种高效、并行、全局搜索的方法。 <span id=\"more\"></span></p>\r\n<h3 id=\"tsp问题\">TSP问题</h3>\r\n<p>TSP (traveling salesman problem,旅行商问题) 是典型的NP完全问题，即其最坏情况下的时间复杂度随着问题规模的增大按指数方式增长，到目前为止还未找到一个多项式时间的有效算法。</p>\r\n<p>​ TSP问题可描述为：已知n个城市相互之间的距离，某一旅行商从某个城市出发访问每个城市一次且仅一次，最后回到出发城市，如何安排才使其所走路线最短。简言之，就是寻找一条最短的遍历n个城市的路径，或者说搜索自然子集X={1,2,….n} ( X的元素表示对n个 城市的编号 ) 的一个排列π(X)={V<sub>1</sub>,V<sub>2</sub>,…,V<sub>n</sub>},使 <span class=\"math display\">\\[\r\nT_d = \\sum_{i=1}^{n-1}{d(V_i,V_(i+1))}+d(V_n,V_1)\r\n\\]</span> 取最小值，其中 <span class=\"math display\">\\[\r\nd(V_i,V_i+1)\r\n\\]</span> 表示城市V<sub>i</sub>到城市V<sub>i+1</sub>的距离。 ## 问题描述</p>\r\n<p>通过搭建的双目视觉检测系统将苹果的三维坐标获取到后，需要对其进行路径规划，即寻找出一条最短的遍历所有目标苹果的路径</p>\r\n<p>表1 14个苹果的位置坐标</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th>目标苹果编号</th>\r\n<th>X坐标</th>\r\n<th>Y坐标</th>\r\n<th>Z坐标</th>\r\n<th>目标苹果编号</th>\r\n<th>X坐标</th>\r\n<th>Y坐标</th>\r\n<th>Z坐标</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td>1</td>\r\n<td>16.47</td>\r\n<td>96.10</td>\r\n<td>45.25</td>\r\n<td>8</td>\r\n<td>17.20</td>\r\n<td>96.29</td>\r\n<td>48.62</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>2</td>\r\n<td>16.47</td>\r\n<td>94.44</td>\r\n<td>44.25</td>\r\n<td>9</td>\r\n<td>16.30</td>\r\n<td>97.38,</td>\r\n<td>42.98</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>3</td>\r\n<td>20.09</td>\r\n<td>92.54</td>\r\n<td>45.63</td>\r\n<td>10</td>\r\n<td>14.05</td>\r\n<td>98.12,</td>\r\n<td>41.86</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>4</td>\r\n<td>22.39</td>\r\n<td>93.37</td>\r\n<td>47.21</td>\r\n<td>11</td>\r\n<td>16.53</td>\r\n<td>97.38</td>\r\n<td>,48.52</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>5</td>\r\n<td>25.23</td>\r\n<td>97.24</td>\r\n<td>44.29</td>\r\n<td>12</td>\r\n<td>21.52</td>\r\n<td>95.59</td>\r\n<td>46.25</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>6</td>\r\n<td>22.00</td>\r\n<td>96.05</td>\r\n<td>48.45</td>\r\n<td>13</td>\r\n<td>19.41</td>\r\n<td>97.13</td>\r\n<td>45.71</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>7</td>\r\n<td>20.47</td>\r\n<td>97.02</td>\r\n<td>47.56</td>\r\n<td>14</td>\r\n<td>20.09</td>\r\n<td>92.55</td>\r\n<td>44.44</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h2 id=\"解决思路及步骤\">解决思路及步骤</h2>\r\n<p>遗传算法TSP问题的流程图</p>\r\n<p><img src=\"/imgs/$%7Bfiilename%7D/image-20230510164303229.png\"  style=\"zoom:80%;\" /></p>\r\n<ol type=\"1\">\r\n<li>编码</li>\r\n</ol>\r\n<p>​ 对于n个苹果的TSP问题，染色体分为n段，例如检测到10个苹果{1,2,3,4,5,6,7,8,9,10}，则|1|0|2|4|5|6|8|7|9|3就是一个合法的染色体。</p>\r\n<ol start=\"2\" type=\"1\">\r\n<li>种群初始化</li>\r\n</ol>\r\n<p>​ 编码后，需要初始化一个种群作为起始解，初始化种群的数目一般根据经验得到，种群的数量按苹果的规模确定，参考的取值为50~200。</p>\r\n<ol start=\"3\" type=\"1\">\r\n<li>适应度函数</li>\r\n</ol>\r\n<p>​ 设k<sub>1</sub>|k<sub>2</sub>|k<sub>i</sub>|…|k<sub>n</sub>|为一个采用整数编码的染色体，d(k<sub>i</sub>,k<sub>j</sub>)为苹果k<sub>i</sub>到苹果k<sub>j</sub>的欧式距离，则该个体的适应度为 <span class=\"math display\">\\[\r\nfitness = \\frac{1}{\\sum_{i=1}^{n-1}{d(K_i,K_(i+1))}+d(K_n,K_1)}\r\n\\]</span> 即适应度函数恰好遍历了n个苹果，再回到第一个苹果的距离的倒数。优化的目标就是选择适应度函数值尽可能大的染色体。</p>\r\n<ol start=\"4\" type=\"1\">\r\n<li>选择操作</li>\r\n</ol>\r\n<p>​ 从旧群体中以一定概率选择个体到新群体中，个体被选中的概率跟适应度值有关，个体适应度值越大，被选中的概率越大。</p>\r\n<ol start=\"5\" type=\"1\">\r\n<li>交又操作 部分映射杂交，确定交叉操作的父代，将父代样本两两分组，每组重复以下过程。</li>\r\n</ol>\r\n<p>​ 假定城市数为10)，产生两个[1,10]区间内的随机整数和r<sub>1</sub>和r<sub>2</sub>，确定两个位置，对两位置的中间数据进行交叉，如r<sub>1</sub>=4,r<sub>2</sub>=7 (其实就是把四和七中间的位置给互换，包括四七位置本身)</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">1</th>\r\n<th style=\"text-align: center;\">2</th>\r\n<th style=\"text-align: center;\">3</th>\r\n<th style=\"text-align: center;\">4</th>\r\n<th style=\"text-align: center;\">5</th>\r\n<th style=\"text-align: center;\">6</th>\r\n<th style=\"text-align: center;\">7</th>\r\n<th style=\"text-align: center;\">8</th>\r\n<th style=\"text-align: center;\">9</th>\r\n<th style=\"text-align: center;\">10</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">9</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">7</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">10</td>\r\n<td style=\"text-align: center;\">8</td>\r\n<td style=\"text-align: center;\">6</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">10</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\">6</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">8</td>\r\n<td style=\"text-align: center;\">7</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">9</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>交叉后为</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">1</th>\r\n<th style=\"text-align: center;\">2</th>\r\n<th style=\"text-align: center;\">3</th>\r\n<th style=\"text-align: center;\">4</th>\r\n<th style=\"text-align: center;\">5</th>\r\n<th style=\"text-align: center;\">6</th>\r\n<th style=\"text-align: center;\">7</th>\r\n<th style=\"text-align: center;\">8</th>\r\n<th style=\"text-align: center;\">9</th>\r\n<th style=\"text-align: center;\">10</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">9</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\"><em>1</em></td>\r\n<td style=\"text-align: center;\"><em>6</em></td>\r\n<td style=\"text-align: center;\"><em>3</em></td>\r\n<td style=\"text-align: center;\"><em>8</em></td>\r\n<td style=\"text-align: center;\">7</td>\r\n<td style=\"text-align: center;\">10</td>\r\n<td style=\"text-align: center;\">*</td>\r\n<td style=\"text-align: center;\">*</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">10</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">*</td>\r\n<td style=\"text-align: center;\"><em>3</em></td>\r\n<td style=\"text-align: center;\"><em>7</em></td>\r\n<td style=\"text-align: center;\"><em>4</em></td>\r\n<td style=\"text-align: center;\"><em>2</em></td>\r\n<td style=\"text-align: center;\">*</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">9</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>从表格中可以看到：同一个个体中有重复的编号，处理办法就是把不重复的数据保留，有重复的数据采用部分映射的方法消除冲突。就是利用四七段的映射关系来确定，比如第一个个体的九位置，它本来的数据是8的，现在这个数据8跑到六位置了，而原来的六位置的数据是4，所以现在的九位置变成4，最后在看这个个体缺少哪个数据，给补上就是了。</p>\r\n<ol start=\"6\" type=\"1\">\r\n<li>变异操作</li>\r\n</ol>\r\n<p>​ 随机选取两个点，将其对换位置。</p>\r\n<p>​ 产生两个[1,10]范围内的随机整数r<sub>1</sub>和r<sub>2</sub>，确定两个位置，将其对换位置，如r<sub>1</sub>=4,r<sub>2</sub>=7</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">1</th>\r\n<th style=\"text-align: center;\">2</th>\r\n<th style=\"text-align: center;\">3</th>\r\n<th style=\"text-align: center;\">4</th>\r\n<th style=\"text-align: center;\">5</th>\r\n<th style=\"text-align: center;\">6</th>\r\n<th style=\"text-align: center;\">7</th>\r\n<th style=\"text-align: center;\">8</th>\r\n<th style=\"text-align: center;\">9</th>\r\n<th style=\"text-align: center;\">10</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">9</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">7</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">10</td>\r\n<td style=\"text-align: center;\">8</td>\r\n<td style=\"text-align: center;\">6</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>变异后为</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th>1</th>\r\n<th>2</th>\r\n<th>3</th>\r\n<th>4</th>\r\n<th>5</th>\r\n<th>6</th>\r\n<th>7</th>\r\n<th>8</th>\r\n<th>9</th>\r\n<th>10</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td>9</td>\r\n<td>5</td>\r\n<td>1</td>\r\n<td><em>2</em></td>\r\n<td>7</td>\r\n<td>4</td>\r\n<td><em>3</em></td>\r\n<td>10</td>\r\n<td>8</td>\r\n<td>6</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<ol start=\"7\" type=\"1\">\r\n<li>逆转操作</li>\r\n</ol>\r\n<p>​ 为改善遗传算法的局部搜索能力。这里的“进化”是指逆转算子的单方向性，即只有经逆转后，适应度值有提高的才接受下来，否则逆转无效。</p>\r\n<p>​ 产生两个[1,10]区间内的随机整数片r<sub>1</sub>和r<sub>2</sub>，确定两个位置，将其对换位置，如r<sub>1</sub>=4，r<sub>2</sub>=7</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">1</th>\r\n<th style=\"text-align: center;\">2</th>\r\n<th style=\"text-align: center;\">3</th>\r\n<th style=\"text-align: center;\">4</th>\r\n<th style=\"text-align: center;\">5</th>\r\n<th style=\"text-align: center;\">6</th>\r\n<th style=\"text-align: center;\">7</th>\r\n<th style=\"text-align: center;\">8</th>\r\n<th style=\"text-align: center;\">9</th>\r\n<th style=\"text-align: center;\">10</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">9</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">7</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">10</td>\r\n<td style=\"text-align: center;\">8</td>\r\n<td style=\"text-align: center;\">6</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>逆转后</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th>1</th>\r\n<th>2</th>\r\n<th>3</th>\r\n<th>4</th>\r\n<th>5</th>\r\n<th>6</th>\r\n<th>7</th>\r\n<th>8</th>\r\n<th>9</th>\r\n<th>10</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td>9</td>\r\n<td>5</td>\r\n<td>1</td>\r\n<td><em>4</em></td>\r\n<td><em>7</em></td>\r\n<td><em>3</em></td>\r\n<td>2</td>\r\n<td>10</td>\r\n<td>8</td>\r\n<td>6</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>​ 对每个个体进行交叉变异，然后代人适应度函数进行评估，选择出适应值大的个体进行下一代的交叉和变异以及逆转操作。</p>\r\n<p>循环操作：判断是否满足设定的最大遗传代数,不满足则跳入适应度值的计算；否则，结束遗传操作。</p>\r\n<h2 id=\"代码实现\">代码实现</h2>\r\n<h3 id=\"适应值变化\">适应值变化</h3>\r\n<p><img src=\"/imgs/$%7Bfiilename%7D/image-20230510183559745.png\"  style=\"zoom:80%;\" /></p>\r\n<h3 id=\"苹果位置图\">苹果位置图</h3>\r\n<p><img src=\"/imgs/$%7Bfiilename%7D/image-20230510185112226.png\"  style=\"zoom:80%;\" /></p>\r\n<h3 id=\"路径规划图\">路径规划图</h3>\r\n<p><img src=\"/imgs/$%7Bfiilename%7D/image-20230511155819983.png\"  style=\"zoom:80%;\" /></p>\r\n<h2 id=\"最优解\">最优解</h2>\r\n<p><img src=\"/imgs/$%7Bfiilename%7D/image-20230511155901209.png\"  style=\"zoom:80%;\" /></p>\r\n<hr />\r\n<h2 id=\"参考文献\">参考文献</h2>\r\n<p>[1]史峰. MATLAB智能算法30个案例分析[M]. 北京航空航天大学出版社, 2011.</p>\r\n",
            "tags": [
                "Matlab",
                "路径规划"
            ]
        }
    ]
}