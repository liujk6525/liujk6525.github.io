<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>你不是单打独斗 • Posts by &#34;python&#34; tag</title>
        <link>https://liujk6525.github.io</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Wed, 07 Jun 2023 09:32:09 +0800</pubDate>
        <lastBuildDate>Wed, 07 Jun 2023 09:32:09 +0800</lastBuildDate>
        <category>Anaconda</category>
        <category>Hexo</category>
        <category>Jetson Nano</category>
        <category>Yolo-v5</category>
        <category>JupyterLab</category>
        <category>Python</category>
        <category>Jupyter Notebook</category>
        <category>Git</category>
        <category>Typora</category>
        <category>Matlab</category>
        <category>路径规划</category>
        <category>python</category>
        <category>ssd.pytorch</category>
        <category>Yolov5</category>
        <item>
            <guid isPermalink="true">https://liujk6525.github.io/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E9%9B%86%E6%88%90%E5%AD%A6%E4%B9%A0/</guid>
            <title>集成学习</title>
            <link>https://liujk6525.github.io/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E9%9B%86%E6%88%90%E5%AD%A6%E4%B9%A0/</link>
            <category>Python</category>
            <category>Jupyter Notebook</category>
            <pubDate>Wed, 07 Jun 2023 09:32:09 +0800</pubDate>
            <description><![CDATA[ 
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://liujk6525.github.io/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%86%B3%E7%AD%96%E6%A0%91/</guid>
            <title>决策树</title>
            <link>https://liujk6525.github.io/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%86%B3%E7%AD%96%E6%A0%91/</link>
            <category>Python</category>
            <category>Jupyter Notebook</category>
            <pubDate>Tue, 06 Jun 2023 20:25:49 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;决策树-decision-tree&#34;&gt;&lt;a href=&#34;https://baike.baidu.com/item/%E5%86%B3%E7%AD%96%E6%A0%91/10377049?fr=aladdin&#34;&gt;决策树 （Decision Tree）&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;比较适合分析离散数据。 如果是连续数据要先转成离散数据再做分析&lt;/p&gt;
&lt;h2 id=&#34;熵entropy&#34;&gt;熵（entropy）&lt;/h2&gt;
&lt;p&gt;1948年，香浓提出了“&lt;a href=&#34;https://baike.baidu.com/item/%E4%BF%A1%E6%81%AF%E7%86%B5/7302318?fr=aladdin&#34;&gt;信息熵&lt;/a&gt;”的概念，&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一条信息的信息量大小和它的不确定性有直接的关系， 要搞清楚一件非常非常不确定的事情，或者是一无所知的事情，需要了解大量信息。—&amp;gt;信息量的度量就等于不确定性的多少。&lt;/strong&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;信息熵公式： &lt;span class=&#34;math display&#34;&gt;\[
H[x]=-\sum_{x}p(x)logp(x)
\]&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;id3算法&#34;&gt;&lt;a href=&#34;https://baike.baidu.com/item/ID3%E7%AE%97%E6%B3%95/5522381?fr=aladdin&#34;&gt;ID3算法&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;决策树会选择最大化信息增益来对结点进行划分。&lt;/p&gt;
&lt;p&gt;信息增益（Information Gain）计算： &lt;span class=&#34;math display&#34;&gt;\[
Info(D)=-\sum_{i=1}^{m}p_ilog(p_i)
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
Info_A(D)=-\sum_{j=1}^{v}\frac{|D_j|}{|D|}\times Info(D_j)
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
Gain(A)=Info(D)-Info_A(D)
\]&lt;/span&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;RID&lt;/th&gt;
&lt;th&gt;age&lt;/th&gt;
&lt;th&gt;income&lt;/th&gt;
&lt;th&gt;student&lt;/th&gt;
&lt;th&gt;credit_rating&lt;/th&gt;
&lt;th&gt;class_buys_computer&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;youth&lt;/td&gt;
&lt;td&gt;high&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;fair&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;youth&lt;/td&gt;
&lt;td&gt;high&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;excellent&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;middle_aged&lt;/td&gt;
&lt;td&gt;high&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;fair&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;senior&lt;/td&gt;
&lt;td&gt;medium&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;fair&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;senior&lt;/td&gt;
&lt;td&gt;low&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;fair&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;senior&lt;/td&gt;
&lt;td&gt;low&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;excellent&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;middle_aged&lt;/td&gt;
&lt;td&gt;low&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;excellent&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;youth&lt;/td&gt;
&lt;td&gt;medium&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;fair&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;youth&lt;/td&gt;
&lt;td&gt;low&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;fair&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;senior&lt;/td&gt;
&lt;td&gt;medium&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;fair&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;youth&lt;/td&gt;
&lt;td&gt;medium&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;excellent&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;middle_aged&lt;/td&gt;
&lt;td&gt;medium&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;excellent&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;middle_aged&lt;/td&gt;
&lt;td&gt;high&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;fair&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;senior&lt;/td&gt;
&lt;td&gt;medium&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;excellent&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;计算&lt;strong&gt;age&lt;/strong&gt;的信息增益: &lt;span class=&#34;math display&#34;&gt;\[
Info(D)=-\frac{9}{14}log_2(\frac{9}{14})-\frac{5}{14}log_2(\frac{5}{14})=0.94
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
Info_{age}(D)=\frac{5}{14}(-\frac{2}{5}log_2\frac{2}{5}-\frac{3}{5}log_2\frac{3}{5})+
\frac{4}{14}(-\frac{4}{4}log_2\frac{4}{4}-\frac{0}{4}log_2\frac{0}{4})+
\frac{5}{14}(-\frac{3}{5}log_2\frac{3}{5}-\frac{2}{5}log_2\frac{2}{5})
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
Gain(age)=Info(D)-Info_A(D)=0.94-0.694=0.246
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;其他的也是类似计算。&lt;/p&gt;
&lt;h2 id=&#34;c4.5算法&#34;&gt;&lt;a href=&#34;https://baike.baidu.com/item/C4.5%E7%AE%97%E6%B3%95/20814636&#34;&gt;C4.5算法&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;信息增益的方法倾向于首先选择因子数较多的变量 。&lt;/p&gt;
&lt;p&gt;信息增益的改进：增益率 &lt;span class=&#34;math display&#34;&gt;\[
SplitInfo_A(D)=-\sum_{j=1}^{v}\frac{|D_j|}{|D|}\times log_2(\frac{|D_j|}{|D|})
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
GainRatio(A)=\frac{Gain(A)}{SpliInfo_A(D)}
\]&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;cart算法&#34;&gt;&lt;a href=&#34;https://baike.baidu.com/item/CART/17679070&#34;&gt;CART算法&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;CART决策树的生成就是递归地构建二叉决策树的过程。&lt;/p&gt;
&lt;p&gt;CART用基尼（Gini）系数最小化准则来进行特征选择，生成二叉树。&lt;/p&gt;
&lt;p&gt;Gini系数计算： &lt;span class=&#34;math display&#34;&gt;\[
Gini(D)=1-\sum_{i=1}^{m}p_i^2
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
Gini_A(D)=\frac{|D_1|}{|D|}Gini(D_1)+\frac{|D_2|}{|D|}Gini(D_2)
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\Delta Gini(A)=Gini(D)-Gini_A(D)
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;优点：小规模数据集有效&lt;/p&gt;
&lt;p&gt;缺点： 处理连续变量不好 类别较多时，错误增加的比较快 不能处理大量数据&lt;/p&gt;
&lt;h2 id=&#34;线性二分类示例代码&#34;&gt;线性二分类示例代码&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.metrics &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; classification_report&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; tree &lt;span class=&#34;comment&#34;&gt;# 决策树模块&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 载入数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data = np.genfromtxt(&lt;span class=&#34;string&#34;&gt;&amp;quot;LR-testSet.csv&amp;quot;&lt;/span&gt;, delimiter=&lt;span class=&#34;string&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_data = data[:,:-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y_data = data[:,-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.scatter(x_data[:,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;],x_data[:,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;],c=y_data) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 创建决策树模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model = tree.DecisionTreeClassifier()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 输入数据建立模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model.fit(x_data, y_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 获取数据值所在的范围&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_min, x_max = x_data[:, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].&lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt;() - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, x_data[:, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].&lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;() + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y_min, y_max = x_data[:, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].&lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt;() - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, x_data[:, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].&lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;() + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 生成网格矩阵&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;xx, yy = np.meshgrid(np.arange(x_min, x_max, &lt;span class=&#34;number&#34;&gt;0.02&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                     np.arange(y_min, y_max, &lt;span class=&#34;number&#34;&gt;0.02&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;z = model.predict(np.c_[xx.ravel(), yy.ravel()])&lt;span class=&#34;comment&#34;&gt;# ravel与flatten类似，多维数据转一维。flatten不会改变原始数据，ravel会改变原始数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;z = z.reshape(xx.shape)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 等高线图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cs = plt.contourf(xx, yy, z)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 样本散点图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.scatter(x_data[:, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], x_data[:, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;], c=y_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 测试与评估&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;predictions = model.predict(x_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(classification_report(predictions,y_data))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230607084609741.png&#34;  style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230606214438933.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;非线性二分类示例代码&#34;&gt;非线性二分类示例代码&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.metrics &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; classification_report&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; tree&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.model_selection &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; train_test_split&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 载入数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data = np.genfromtxt(&lt;span class=&#34;string&#34;&gt;&amp;quot;LR-testSet2.txt&amp;quot;&lt;/span&gt;, delimiter=&lt;span class=&#34;string&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_data = data[:,:-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y_data = data[:,-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.scatter(x_data[:,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;],x_data[:,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;],c=y_data) &lt;span class=&#34;comment&#34;&gt;# s散点图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#分割数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_train,x_test,y_train,y_test = train_test_split(x_data, y_data) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 创建决策树模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# max_depth，树的深度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# min_samples_split 内部节点再划分所需最小样本数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model = tree.DecisionTreeClassifier(max_depth=&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;,min_samples_split=&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 拟合模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model.fit(x_train, y_train)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 获取数据值所在的范围&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_min, x_max = x_data[:, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].&lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt;() - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, x_data[:, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].&lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;() + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y_min, y_max = x_data[:, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].&lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt;() - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, x_data[:, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].&lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;() + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 生成网格矩阵&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;xx, yy = np.meshgrid(np.arange(x_min, x_max, &lt;span class=&#34;number&#34;&gt;0.02&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                     np.arange(y_min, y_max, &lt;span class=&#34;number&#34;&gt;0.02&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;z = model.predict(np.c_[xx.ravel(), yy.ravel()])&lt;span class=&#34;comment&#34;&gt;# ravel与flatten类似，多维数据转一维。flatten不会改变原始数据，ravel会改变原始数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;z = z.reshape(xx.shape)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 等高线图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cs = plt.contourf(xx, yy, z)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 样本散点图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.scatter(x_data[:, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], x_data[:, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;], c=y_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 测试并评估&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;predictions = model.predict(x_test)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(classification_report(predictions,y_test))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230607084429752.png&#34;  style=&#34;zoom: 50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230607084526669.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;回归树示例代码&#34;&gt;回归树示例代码&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; tree&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 载入数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data = np.genfromtxt(&lt;span class=&#34;string&#34;&gt;&amp;quot;data.csv&amp;quot;&lt;/span&gt;, delimiter=&lt;span class=&#34;string&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_data = data[:,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,np.newaxis]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y_data = data[:,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,np.newaxis]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.scatter(x_data,y_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model = tree.DecisionTreeRegressor(max_depth=&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model.fit(x_data, y_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_test = np.linspace(&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;80&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_test = x_test[:,np.newaxis]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 画图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.plot(x_data, y_data, &lt;span class=&#34;string&#34;&gt;&amp;#x27;b&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.plot(x_test, model.predict(x_test), &lt;span class=&#34;string&#34;&gt;&amp;#x27;r&amp;#x27;&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230607090010220.png&#34;  style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1Rt411q7WJ?p=50&amp;amp;vd_source=fe8e916be2bd597efffd8dfd95249141&#34;&gt;决策树&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://liujk6525.github.io/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/KNN%E7%AE%97%E6%B3%95/</guid>
            <title>KNN算法</title>
            <link>https://liujk6525.github.io/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/KNN%E7%AE%97%E6%B3%95/</link>
            <category>Python</category>
            <category>Jupyter Notebook</category>
            <pubDate>Tue, 06 Jun 2023 20:05:23 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;k最近邻k-nearest-neighborknn分类算法&#34;&gt;&lt;a href=&#34;https://baike.baidu.com/item/k%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95/9512781?fr=aladdin&#34;&gt;K最近邻（K-Nearest Neighbor，KNN）&lt;/a&gt;分类算法&lt;/h1&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;为了判断未知实例的类别，以所有已知类别的实例作为 参照选择参数K&lt;/li&gt;
&lt;li&gt;计算未知实例与所有已知实例的距离&lt;/li&gt;
&lt;li&gt;选择最近K个已知实例&lt;/li&gt;
&lt;li&gt;根据少数服从多数的投票法则(majority-voting)，让 未知实例归类为K个最邻近样本中最多数的类别&lt;/li&gt;
&lt;/ol&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;欧氏距离 &lt;span class=&#34;math display&#34;&gt;\[
E(x,y)=\sqrt{\sum_{i=0}^{n}(x_i-y_i)^2}
\]&lt;/span&gt; &lt;a href=&#34;https://www.cnblogs.com/belfuture/p/5871452.html&#34;&gt;其他的距离衡量&lt;/a&gt;：余弦值距离（cos），相关度（correlation），曼哈顿距离（Manhattan distance）&lt;/p&gt;
&lt;p&gt;算法缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;算法复杂度较高（需要比较所有已知实例与要分类的实例）&lt;/li&gt;
&lt;li&gt;当其样本分布不平衡时，比如其中一类样本过大（实例数量过多）占主导的时候，新的未知实例容易被归类为这个主导样本，因为这类样本实例的数量过大，但这个新的未知实例实际并没有接近目标样本&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;示例代码&#34;&gt;示例代码&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 导入算法包以及数据集&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; neighbors&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; datasets&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.model_selection &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; train_test_split&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.metrics &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; classification_report&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; random&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 载入数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;iris = datasets.load_iris()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(iris)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 打乱数据切分数据集&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# x_train,x_test,y_train,y_test = train_test_split(iris.data, iris.target, test_size=0.2) #分割数据0.2为测试数据，0.8为训练数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#打乱数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data_size = iris.data.shape[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;index = [i &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(data_size)] &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;random.shuffle(index)  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;iris.data = iris.data[index]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;iris.target = iris.target[index]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#切分数据集&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;test_size = &lt;span class=&#34;number&#34;&gt;40&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_train = iris.data[test_size:]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_test =  iris.data[:test_size]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y_train = iris.target[test_size:]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y_test = iris.target[:test_size]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 构建模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model = neighbors.KNeighborsClassifier(n_neighbors=&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model.fit(x_train, y_train)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 测试和评估&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;prediction = model.predict(x_test)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(classification_report(y_test, prediction))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230606202144425.png&#34;  style=&#34;zoom: 67%;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1Rt411q7WJ?p=41&amp;amp;vd_source=fe8e916be2bd597efffd8dfd95249141&#34;&gt;KNN算法&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://liujk6525.github.io/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/</guid>
            <title>逻辑回归</title>
            <link>https://liujk6525.github.io/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/</link>
            <category>Python</category>
            <category>Jupyter Notebook</category>
            <pubDate>Mon, 05 Jun 2023 21:32:23 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;逻辑回归logistic-regression&#34;&gt;&lt;a href=&#34;https://baike.baidu.com/item/logistic%E5%9B%9E%E5%BD%92/2981575?fromtitle=%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92&amp;amp;fromid=17202449&amp;amp;fr=aladdin&#34;&gt;逻辑回归（Logistic Regression）&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;是一种广义的线性回归分析模型，与多重线性回归有很多相同之处。它们的模型形式基本上相同，都具有$ w’x+b$，其区别在于他们的因变量不同，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多重线性回归直接将&lt;span class=&#34;math inline&#34;&gt;\(w&amp;#39;x+b\)&lt;/span&gt;作为因变量，&lt;/li&gt;
&lt;li&gt;Logistic回归则通过函数L将&lt;span class=&#34;math inline&#34;&gt;\(w&amp;#39;x+b\)&lt;/span&gt;对应一个隐状态&lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(p =L(w&amp;#39;x+b)\)&lt;/span&gt;，然后根据&lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt;与&lt;span class=&#34;math inline&#34;&gt;\(1-p\)&lt;/span&gt;的大小决定因变量的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果L是Logistic函数，就是Logistic回归，&lt;/p&gt;
&lt;p&gt;如果L是多项式函数就是多项式回归。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h2 id=&#34;logistic-function&#34;&gt;Logistic Function&lt;/h2&gt;
&lt;p&gt;定义逻辑回归的预测函数为&lt;span class=&#34;math inline&#34;&gt;\(ℎ_\theta(x) = 𝑔(\theta^𝑇𝑥)\)&lt;/span&gt; ，其中g(x)函数是sigmoid函数。 &lt;span class=&#34;math display&#34;&gt;\[
g(x)=\frac{1}{1+e^{-x}}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
h_\theta(x)=\frac{1}{1+e^{-\theta^Tx}}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230606093600860.png&#34;  style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;当&lt;span class=&#34;math inline&#34;&gt;\(\theta^Tx≥0\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(g(\theta^Tx)≥0.5\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;当&lt;span class=&#34;math inline&#34;&gt;\(\theta^Tx≤0\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(g(\theta^Tx)≤0.5\)&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;逻辑回归的代价函数cost-function&#34;&gt;逻辑回归的代价函数（Cost Function）&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
Cost(h_\theta(x),y)= 
\begin{cases}
-log(h_\theta(x))\quad\quad\quad if\quad y=1\\
-log(1-h_\theta(x))\quad if\quad y=0
\end{cases}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
=-ylog(h_\theta(x))-(1-y)log(1-h_\theta(x))
\]&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;梯度下降法gradient-descent&#34;&gt;梯度下降法（Gradient Descent）&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
J(\theta)=-\frac{1}{m}[\sum_{i=1}^{m}y^{(i)}logh_\theta(x^{(i)})+(1-y^{(i)})log(1-h_\theta(x^{(i)}))]
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;求解 &lt;span class=&#34;math inline&#34;&gt;\(min_\theta J(\theta)\)&lt;/span&gt; &lt;span class=&#34;math display&#34;&gt;\[
\theta_j:=\theta_j-\alpha\sum_{i=1}^{m}(h_\theta(x^{(i)})-y^{(i)})x_j^{(i)}
\]&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;准确率精准率召回率f1分数&#34;&gt;准确率|精准率|召回率|F&lt;sub&gt;1&lt;/sub&gt;分数&lt;/h2&gt;
&lt;p&gt;混淆矩阵&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;实际&lt;/th&gt;
&lt;th&gt;实际&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;预测&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;TP&lt;/td&gt;
&lt;td&gt;FP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;预测&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;FN&lt;/td&gt;
&lt;td&gt;TN&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;P（Positive）：代表1&lt;/li&gt;
&lt;li&gt;N（Negative）：代表0&lt;/li&gt;
&lt;li&gt;T（True）：代表预测正确&lt;/li&gt;
&lt;li&gt;F（False）：代表预测错误&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;准确率：&lt;/strong&gt;即预测正确的结果占总样本的百分比 &lt;span class=&#34;math display&#34;&gt;\[
准确率=\frac{TP+TN}{TP+TN+FP+FN}
\]&lt;/span&gt; &lt;strong&gt;精准率（Precision）：&lt;/strong&gt;是指在所有被预测为正的样本中实际为正的样本的概率。 &lt;span class=&#34;math display&#34;&gt;\[
精准率=\frac{TP}{TP+FP}
\]&lt;/span&gt; &lt;strong&gt;精准率就是你认为找的是对的实际上多少是对的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;召回率（Recall）：&lt;/strong&gt;是指在实际为正的样本中被预测为正样本的概率。 &lt;span class=&#34;math display&#34;&gt;\[
召回率=\frac{TP}{TP+FN}
\]&lt;/span&gt; &lt;strong&gt;F&lt;sub&gt;1&lt;/sub&gt;分数：&lt;/strong&gt;精准率和召回率之间的一个平衡点。 &lt;span class=&#34;math display&#34;&gt;\[
F_1=\frac{2\times Precision\times Recall}{Precision+Recall}
\]&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;逻辑回归示例代码&#34;&gt;逻辑回归示例代码&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.metrics &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; classification_report&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; preprocessing&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; linear_model&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 数据是否需要标准化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;scale = &lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 载入数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data = np.genfromtxt(&lt;span class=&#34;string&#34;&gt;&amp;quot;LR-testSet.csv&amp;quot;&lt;/span&gt;, delimiter=&lt;span class=&#34;string&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_data = data[:,:-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y_data = data[:,-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;plot&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x0 = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x1 = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    y0 = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    y1 = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 切分不同类别的数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(x_data)):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; y_data[i]==&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            x0.append(x_data[i,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            y0.append(x_data[i,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            x1.append(x_data[i,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            y1.append(x_data[i,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 画图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   scatter0 = plt.scatter(x0, y0, c=&lt;span class=&#34;string&#34;&gt;&amp;#x27;c&amp;#x27;&lt;/span&gt;, marker=&lt;span class=&#34;string&#34;&gt;&amp;#x27;+&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    scatter1 = plt.scatter(x1, y1, c=&lt;span class=&#34;string&#34;&gt;&amp;#x27;y&amp;#x27;&lt;/span&gt;, marker=&lt;span class=&#34;string&#34;&gt;&amp;#x27;*&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;#画图例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    plt.legend(handles=[scatter0,scatter1],labels=[&lt;span class=&#34;string&#34;&gt;&amp;#x27;label0&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;label1&amp;#x27;&lt;/span&gt;],loc=&lt;span class=&#34;string&#34;&gt;&amp;#x27;best&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plot()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 创建并拟合模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;logistic = linear_model.LogisticRegression()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;logistic.fit(x_data, y_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; scale == &lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 画图决策边界&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    plot()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x_test = np.array([[-&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;],[&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;]])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    y_test = (-logistic.intercept_ - x_test*logistic.coef_[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;])/logistic.coef_[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;][&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    plt.plot(x_test, y_test, &lt;span class=&#34;string&#34;&gt;&amp;#x27;k&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    plt.show()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 测试与评估    &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;predictions = logistic.predict(x_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(classification_report(y_data, predictions))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230606164354040.png&#34;  style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230606164557574.png&#34;  style=&#34;zoom: 67%;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;非线性逻辑回归示例代码&#34;&gt;非线性逻辑回归示例代码&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; linear_model&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.datasets &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; make_gaussian_quantiles&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.preprocessing &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; PolynomialFeatures&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 生成2维正态分布，生成的数据按分位数分为两类，500个样本,2个样本特征&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 可以生成两类或多类数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_data, y_data = make_gaussian_quantiles(n_samples=&lt;span class=&#34;number&#34;&gt;500&lt;/span&gt;, n_features=&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,n_classes=&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.scatter(x_data[:, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], x_data[:, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;], c=y_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 创建并拟合模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;logistic = linear_model.LogisticRegression()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;logistic.fit(x_data, y_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 定义多项式回归,degree的值可以调节多项式的特征&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;poly_reg  = PolynomialFeatures(degree=&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 特征处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_poly = poly_reg.fit_transform(x_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 定义逻辑回归模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;logistic = linear_model.LogisticRegression()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 训练模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;logistic.fit(x_poly, y_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 获取数据值所在的范围&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_min, x_max = x_data[:, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].&lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt;() - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, x_data[:, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].&lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;() + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y_min, y_max = x_data[:, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].&lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt;() - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, x_data[:, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].&lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;() + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 生成网格矩阵&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;xx, yy = np.meshgrid(np.arange(x_min, x_max, &lt;span class=&#34;number&#34;&gt;0.02&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                     np.arange(y_min, y_max, &lt;span class=&#34;number&#34;&gt;0.02&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;z = logistic.predict(poly_reg.fit_transform(np.c_[xx.ravel(), yy.ravel()]))&lt;span class=&#34;comment&#34;&gt;# ravel与flatten类似，多维数据转一维。flatten不会改变原始数据，ravel会改变原始数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;z = z.reshape(xx.shape)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 等高线图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cs = plt.contourf(xx, yy, z)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 样本散点图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.scatter(x_data[:, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], x_data[:, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;], c=y_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;score:&amp;#x27;&lt;/span&gt;,logistic.score(x_poly,y_data))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230606165631817.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1Rt411q7WJ?p=29&#34;&gt;逻辑回归&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://liujk6525.github.io/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%8F%8A%E9%9D%9E%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</guid>
            <title>线性回归及非线性回归</title>
            <link>https://liujk6525.github.io/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%8F%8A%E9%9D%9E%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</link>
            <category>Python</category>
            <category>Jupyter Notebook</category>
            <pubDate>Mon, 05 Jun 2023 09:37:27 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;基本概念&#34;&gt;基本概念：&lt;/h1&gt;
&lt;p&gt;将数据划分为三部分：&lt;span class=&#34;math inline&#34;&gt;\(\begin{cases} 训练集(Train):用来训练，构建模型\\ 验证集(Validate):在模型训练阶段，测试模型的好坏\\ 测试集(Test):等模型训练好后，评估模型的好坏 \end{cases}\)&lt;/span&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;学习方式：&lt;span class=&#34;math inline&#34;&gt;\(\begin{cases} 监督学习\\ 无监督学习\\ 半监督学习 \end{cases}\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;常见应用：&lt;span class=&#34;math inline&#34;&gt;\(\begin{cases} 回归：预测数据为连续型数值。\\ 分类：预测数据为类别型数据，并且类别已知。\\ 聚类：预测数据为类别型数据，但是类别未知。 \end{cases}\)&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;回归分析regression&#34;&gt;&lt;a href=&#34;https://baike.baidu.com/item/%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90/2625498?fr=aladdin&#34;&gt;回归分析（Regression）&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;回归分析用来建立方程，模拟两个或者多个变量之间如何关联，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;被预测的变量叫做：因变量/输出&lt;/li&gt;
&lt;li&gt;被用来进行预测的变量叫做： 自变量,/输入&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一元线性回归包含一个自变量和一个因变量，两个变量的关系用一条直线来模拟，如果包含两个以上的自变量，则称作多元回归分析（multiple regression）&lt;/p&gt;
&lt;h1 id=&#34;一元线性回归&#34;&gt;&lt;a href=&#34;https://baike.baidu.com/item/%E4%B8%80%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/22770888?fr=aladdin&#34;&gt;一元线性回归&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;一元线性回归：&lt;span class=&#34;math inline&#34;&gt;\(h_\theta(x)=\theta_0+\theta_1x\)&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;代价函数cost-function&#34;&gt;&lt;a href=&#34;https://baike.baidu.com/item/%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0/1783236?fromtitle=%E4%BB%A3%E4%BB%B7%E5%87%BD%E6%95%B0&amp;amp;fromid=7048599&amp;amp;fr=aladdin&#34;&gt;代价函数（Cost Function）&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;最小二乘法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;假设真实值为&lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;，预测值&lt;span class=&#34;math inline&#34;&gt;\(h_\theta(x)\)&lt;/span&gt; ，则误差平方为&lt;span class=&#34;math inline&#34;&gt;\((h_\theta(x)-y)^2\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;找到合适的参数，使得误差平方和&lt;span class=&#34;math inline&#34;&gt;\(J(\theta_0,\theta_1)\)&lt;/span&gt;最小。 &lt;span class=&#34;math display&#34;&gt;\[
J(\theta_0,\theta_1)=\frac{1}{2m}\sum_{i=1}^{m}{(h_\theta(x^{(i)})-y^{(i)})^{2}}
\]&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;梯度下降法gradient-descent&#34;&gt;&lt;a href=&#34;https://baike.baidu.com/item/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95/8641233?fr=aladdin&#34;&gt;梯度下降法（Gradient Descent）&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;最小化目标函数&lt;/strong&gt; &lt;span class=&#34;math inline&#34;&gt;\(\underset{\theta_0,\theta_1}{min}\quad J(\theta_0,\theta_1)\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;初始化参数&lt;span class=&#34;math inline&#34;&gt;\(\theta_0,\theta_1\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;不断改变&lt;span class=&#34;math inline&#34;&gt;\(\theta_0,\theta_1\)&lt;/span&gt; ，直到&lt;span class=&#34;math inline&#34;&gt;\(J(\theta_0,\theta_1)\)&lt;/span&gt;到达一个全局最小值，或局部极小值。 &lt;span class=&#34;math display&#34;&gt;\[
\theta_j:=\theta_j-\alpha\frac{\partial}{\partial\theta_j}J(\theta_0,\theta_1)\quad (j=0,1,2\cdots)
\]&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;用梯度下降法求解线性回归&#34;&gt;用梯度下降法求解线性回归&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\frac{\partial}{\partial\theta_0}J(\theta_0,\theta_1)=
\frac{1}{m}\sum_{i=1}^{m}{(h_\theta(x^{(i)})-y^{(i)})}
\\
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\frac{\partial}{\partial\theta_1}J(\theta_0,\theta_1)=
\frac{1}{m}\sum_{i=1}^{m}{(h_\theta(x^{(i)})-y^{(i)})}\times x^{(i)}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;不断迭代，直到收敛： &lt;span class=&#34;math display&#34;&gt;\[
\theta_0:=\theta_0-\alpha\frac{1}{m}{\sum_{i=1}^{m}{(h_\theta(x^{(i)})-y^{(i)})}}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\theta_1:=\theta_1-\alpha\frac{1}{m}{\sum_{i=1}^{m}{(h_\theta(x^{(i)})-y^{(i)})}}\times x^{(i)}
\]&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;示例代码&#34;&gt;示例代码：&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.linear_model &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; LinearRegression &lt;span class=&#34;comment&#34;&gt;# 线性回归模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 载入数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data = np.genfromtxt(&lt;span class=&#34;string&#34;&gt;&amp;quot;data.csv&amp;quot;&lt;/span&gt;, delimiter=&lt;span class=&#34;string&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_data = data[:,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y_data = data[:,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.scatter(x_data,y_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_data = data[:,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,np.newaxis]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y_data = data[:,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,np.newaxis]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 创建并拟合模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model = LinearRegression() &lt;span class=&#34;comment&#34;&gt;# 线性回归&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model.fit(x_data, y_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 测试&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_test = [[&lt;span class=&#34;number&#34;&gt;44.5&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;predict = model.predict(x_test)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;predict&amp;#x27;&lt;/span&gt;,predict)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 画图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.plot(x_data, y_data, &lt;span class=&#34;string&#34;&gt;&amp;#x27;b.&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.plot(x_data, model.predict(x_data), &lt;span class=&#34;string&#34;&gt;&amp;#x27;r&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230605203607162.png&#34;  style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;多元线性回归multiple-linear-regression&#34;&gt;&lt;a href=&#34;https://baike.baidu.com/item/%E5%A4%9A%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/10702248?fr=aladdin&#34;&gt;多元线性回归（Multiple Linear Regression）&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;多特征时，假设：&lt;span class=&#34;math inline&#34;&gt;\(h_\theta(x)=\theta_0+\theta_1x_1+\theta_2x_2+\cdots+\theta_nx_n\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;当真实值&lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;的影响因素不是唯一时，需采用多元线性回归模型。&lt;/p&gt;
&lt;p&gt;代价函数： &lt;span class=&#34;math display&#34;&gt;\[
J(\theta_0,\theta_1,\cdots,\theta_n)=\frac{1}{2m}\sum_{i=1}^{m}(h_\theta(x^{(i)})-y^{(i)})^{2}
\]&lt;/span&gt; 梯度下降法： &lt;span class=&#34;math display&#34;&gt;\[
\theta_j:=\theta_j-\alpha\frac{1}{m}\sum_{i=1}^{m}{(h_\theta(x^{(i)})-y^{(i)})}\times x_j^{(i)}\quad (j=0,1,2\cdots,n)
\]&lt;/span&gt; 注意这里的&lt;span class=&#34;math inline&#34;&gt;\(j=0\)&lt;/span&gt;时，&lt;span class=&#34;math inline&#34;&gt;\(x_0=1\)&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;示例代码-1&#34;&gt;示例代码：&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; genfromtxt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; linear_model &lt;span class=&#34;comment&#34;&gt;# 线性回归模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; mpl_toolkits.mplot3d &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; Axes3D  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 读入数据 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data = genfromtxt(&lt;span class=&#34;string&#34;&gt;r&amp;quot;Delivery.csv&amp;quot;&lt;/span&gt;,delimiter=&lt;span class=&#34;string&#34;&gt;&amp;#x27;,&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 切分数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_data = data[:,:-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y_data = data[:,-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(x_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(y_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 创建模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model = linear_model.LinearRegression()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model.fit(x_data, y_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 测试&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_test = [[&lt;span class=&#34;number&#34;&gt;102&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;predict = model.predict(x_test)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;predict:&amp;quot;&lt;/span&gt;,predict)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ax = plt.figure().add_subplot(&lt;span class=&#34;number&#34;&gt;111&lt;/span&gt;, projection = &lt;span class=&#34;string&#34;&gt;&amp;#x27;3d&amp;#x27;&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ax.scatter(x_data[:,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], x_data[:,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;], y_data, c = &lt;span class=&#34;string&#34;&gt;&amp;#x27;r&amp;#x27;&lt;/span&gt;, marker = &lt;span class=&#34;string&#34;&gt;&amp;#x27;o&amp;#x27;&lt;/span&gt;, s = &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;#点为红色三角形  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x0 = x_data[:,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x1 = x_data[:,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 生成网格矩阵&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x0, x1 = np.meshgrid(x0, x1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;z = model.intercept_ + x0*model.coef_[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] + x1*model.coef_[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 画3D图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ax.plot_surface(x0, x1, z)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#设置坐标轴  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ax.set_xlabel(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Miles&amp;#x27;&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ax.set_ylabel(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Num of Deliveries&amp;#x27;&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ax.set_zlabel(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Time&amp;#x27;&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#显示图像  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()  &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230605204147960.png&#34;  style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;多项式回归&#34;&gt;多项式回归&lt;/h1&gt;
&lt;p&gt;假如我们不是要找直线（或者超平面），而是需要找到一 个用多项式所表示的曲线（或者超曲面）&lt;/p&gt;
&lt;p&gt;多项式回归：&lt;span class=&#34;math inline&#34;&gt;\(h_\theta(x)=\theta_0+\theta_1x+\theta_2x^2+\cdots+\theta_nx^n\)&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;示例代码-2&#34;&gt;示例代码：&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.preprocessing &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; PolynomialFeatures &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.linear_model &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; LinearRegression&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 载入数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data = np.genfromtxt(&lt;span class=&#34;string&#34;&gt;&amp;quot;job.csv&amp;quot;&lt;/span&gt;, delimiter=&lt;span class=&#34;string&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_data = data[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y_data = data[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.scatter(x_data,y_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_data = x_data[:,np.newaxis]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y_data = y_data[:,np.newaxis]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 定义多项式回归,degree的值可以调节多项式的特征&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;poly_reg  = PolynomialFeatures(degree=&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 特征处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_poly = poly_reg.fit_transform(x_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 定义回归模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;lin_reg = LinearRegression()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 训练模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;lin_reg.fit(x_poly, y_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 画图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 画图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.plot(x_data, y_data, &lt;span class=&#34;string&#34;&gt;&amp;#x27;b.&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_test = np.linspace(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_test = x_test[:,np.newaxis]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.plot(x_test, lin_reg.predict(poly_reg.fit_transform(x_test)), c=&lt;span class=&#34;string&#34;&gt;&amp;#x27;r&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.title(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Truth or Bluff (Polynomial Regression)&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.xlabel(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Position level&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.ylabel(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Salary&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230605205328029.png&#34;  style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;标准方程法normal-equation&#34;&gt;标准方程法（Normal Equation）&lt;/h1&gt;
&lt;p&gt;注意这里的符号：&lt;span class=&#34;math inline&#34;&gt;\(w\)&lt;/span&gt;其实就是上面公式里的&lt;span class=&#34;math inline&#34;&gt;\(\theta\)&lt;/span&gt;，就是要求解的那个参数。&lt;/p&gt;
&lt;p&gt;假设： &lt;span class=&#34;math display&#34;&gt;\[
h_w(x)=w_0+w_1x_1+w_2x_2+\cdots+w_nx_n
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
h_w(x)=xw\
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;目标函数: &lt;span class=&#34;math display&#34;&gt;\[
J(w_0,w_1,\cdots,w_n)=\frac{1}{2m}\sum_{i=1}^{m}(h_w(x^{(i)})-y^{(i)})^{2}
\]&lt;/span&gt; 又因为 &lt;span class=&#34;math display&#34;&gt;\[
\sum_{i=1}^{m}(h_w(x^{(i)})-y^{(i)})^{2}=(y-Xw)^T(y-Xw)
\]&lt;/span&gt; 所以 &lt;span class=&#34;math display&#34;&gt;\[
\frac{\partial J(w)}{\partial w}=\frac{\partial(y-Xw)^T(y-Xw)}{\partial w}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
=\frac{\partial(y^Ty-y^TXw-w^TX^Ty+w^TX^TXw)}{\partial w}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
=\frac{\partial(y^Ty)}{\partial w}-\frac{\partial(y^TXw)}{\partial w}-\frac{\partial(w^TX^Ty)}{\partial w}+\frac{\partial(w^TX^TXw)}{\partial w}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
=0-X^Ty-X^Ty+2X^TXw
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math display&#34;&gt;\[
\frac{\partial J(w)}{\partial w}=0
\]&lt;/span&gt; 求解： &lt;span class=&#34;math display&#34;&gt;\[
-2X^Ty+2X^TXw=0
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
X^TXw=X^Ty
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
w=(X^TX)^{-1}X^Ty
\]&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;特征缩放&#34;&gt;&lt;a href=&#34;https://baike.baidu.com/item/%E7%89%B9%E5%BE%81%E7%BC%A9%E6%94%BE/17415222?fr=aladdin&#34;&gt;特征缩放&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id=&#34;数据归一化&#34;&gt;数据归一化&lt;/h2&gt;
&lt;p&gt;数据归一化就是把数据的取值范围处理为&lt;span class=&#34;math inline&#34;&gt;\(0-1\)&lt;/span&gt;，或者&lt;span class=&#34;math inline&#34;&gt;\(-1-1\)&lt;/span&gt;之间。&lt;/p&gt;
&lt;p&gt;任意数据转化为0-1之间： &lt;span class=&#34;math display&#34;&gt;\[
NewValue = \frac{OldValue-min}{max-min}
\]&lt;/span&gt; 任意数据转化为-1-1之间： &lt;span class=&#34;math display&#34;&gt;\[
NewValue=2\times(\frac{OldVaule-min}{max-min}-0.5)
\]&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;均值标准化&#34;&gt;均值标准化&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;为特征数据，&lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt;为数据的平均值，&lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt;为数据的方差。 &lt;span class=&#34;math display&#34;&gt;\[
NewValue=\frac{OldValue-u}{s}
\]&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;过拟合overfitting&#34;&gt;过拟合（Overfitting）&lt;/h1&gt;
&lt;p&gt;回归问题拟合有以下三种情况：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230605154335888.png&#34;  style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;分类问题有以下三种情况：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230605154600447.png&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;防止过拟合：减少特征；增加数据量；正则化（Regularized）&lt;/p&gt;
&lt;h2 id=&#34;正则化&#34;&gt;正则化&lt;/h2&gt;
&lt;p&gt;L2正则化： &lt;span class=&#34;math display&#34;&gt;\[
J(\theta)=\frac{1}{2m}[\sum_{i=1}^{m}{h_\theta(x^{(i)}-y^{(i)})^2+\lambda\sum_{j=1}^{n}{\theta_j^2}}]
\]&lt;/span&gt; L1正则化： &lt;span class=&#34;math display&#34;&gt;\[
J(\theta)=\frac{1}{2m}[\sum_{i=1}^{m}{h_\theta(x^{(i)}-y^{(i)})^2+\lambda\sum_{j=1}^{n}{|\theta_j|}}]
\]&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;岭回归ridge-regression&#34;&gt;&lt;a href=&#34;https://baike.baidu.com/link?url=J428YjCOAduEv-hDj1BM53FvjQEMC1iR9icG161YvlKwmXXmtsgGoFBvkL_VK2T40KfCjPMUpQQ8ePln0cjp50QpceYEGvvCC4iewQhwY0fGCqcS9kwQCLnbARBjd0mT&#34;&gt;岭回归（Ridge Regression）&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;由标准方程法得出， &lt;span class=&#34;math display&#34;&gt;\[
w = (𝑋^𝑇𝑋)^{-1}𝑋^𝑇y
\]&lt;/span&gt; 如果数据的特征比样本点还多，（数据特征&lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;，样本个数&lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt;），如果&lt;span class=&#34;math inline&#34;&gt;\(n&amp;gt;m\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(𝑋^𝑇𝑋\)&lt;/span&gt;不是满秩矩阵，不可逆，计算&lt;span class=&#34;math inline&#34;&gt;\(𝑋^𝑇𝑋^{-1}\)&lt;/span&gt;时会出错。&lt;/p&gt;
&lt;p&gt;为了解决这个问题，引入了岭回归的概念。&lt;span class=&#34;math inline&#34;&gt;\(\lambda\)&lt;/span&gt;为岭系数，&lt;span class=&#34;math inline&#34;&gt;\(I\)&lt;/span&gt;为单位矩阵。 &lt;span class=&#34;math display&#34;&gt;\[
w = (𝑋^𝑇𝑋 + \lambda I)^{-1}𝑋^𝑇y
\]&lt;/span&gt; 推导： &lt;span class=&#34;math display&#34;&gt;\[
J(\theta)=\frac{1}{2}[\sum_{i=1}^{m}{h_\theta(x^{(i)}-y^{(i)})^2+\lambda\sum_{j=1}^{n}{\theta_j^2}}]
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
=\frac{1}{2}(Xw-y)^T(Xw-y)+\lambda w^Tw
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
=\frac{1}{2}(w^TX^TXw-w^TX^Ty-y^TXw+y^Ty)+\lambda w^Tw
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\frac{\partial J(w)}{\partial w}=X^TXw-X^Ty+\lambda w
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math display&#34;&gt;\[
\frac{\partial J(w)}{\partial w}=0
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
w = (𝑋^𝑇𝑋 + \lambda I)^{-1}𝑋^𝑇y
\]&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;示例代码-3&#34;&gt;示例代码：&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; genfromtxt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; linear_model&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 读入数据 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data = genfromtxt(&lt;span class=&#34;string&#34;&gt;r&amp;quot;longley.csv&amp;quot;&lt;/span&gt;,delimiter=&lt;span class=&#34;string&#34;&gt;&amp;#x27;,&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 切分数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_data = data[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;:]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y_data = data[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(x_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(y_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 创建模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 生成50个值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alphas_to_test = np.linspace(&lt;span class=&#34;number&#34;&gt;0.001&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 创建模型，保存误差值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model = linear_model.RidgeCV(alphas=alphas_to_test, store_cv_values=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model.fit(x_data, y_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 画图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 岭系数跟loss值的关系&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.plot(alphas_to_test, model.cv_values_.mean(axis=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 选取的岭系数值的位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.plot(model.alpha_, &lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt;(model.cv_values_.mean(axis=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)),&lt;span class=&#34;string&#34;&gt;&amp;#x27;ro&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.xlabel(&lt;span class=&#34;string&#34;&gt;&amp;#x27;alphas&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.ylabel(&lt;span class=&#34;string&#34;&gt;&amp;#x27;loss&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 测试&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model.predict(x_data[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,np.newaxis])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230605210828441.png&#34;  style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;lassoleast-absolute-shrinkage-and&#34;&gt;[LASSO（Least Absolute Shrinkage and&lt;/h1&gt;
&lt;p&gt;Selectionator operator）](https://baike.baidu.com/item/Lasso%E7%AE%97%E6%B3%95/22685468?fromtitle=LASSO&amp;amp;fromid=20366865&amp;amp;fr=aladdin)&lt;/p&gt;
&lt;p&gt;LASSO的代价函数： &lt;span class=&#34;math display&#34;&gt;\[
J(\theta)=\frac{1}{2m}[\sum_{i=1}^{m}{h_\theta(x^{(i)}-y^{(i)})^2+\lambda\sum_{j=1}^{n}{|\theta_j|}}]
\]&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;示例代码-4&#34;&gt;示例代码：&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; genfromtxt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; linear_model&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 读入数据 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data = genfromtxt(&lt;span class=&#34;string&#34;&gt;r&amp;quot;longley.csv&amp;quot;&lt;/span&gt;,delimiter=&lt;span class=&#34;string&#34;&gt;&amp;#x27;,&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 切分数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_data = data[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;:]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y_data = data[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(x_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(y_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 创建并拟合模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model = linear_model.LassoCV()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model.fit(x_data, y_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# lasso系数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(model.alpha_)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 相关系数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(model.coef_)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 预测&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model.predict(x_data[-&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,np.newaxis])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;弹性网elastic-net&#34;&gt;弹性网（Elastic Net）&lt;/h1&gt;
&lt;p&gt;在&lt;span class=&#34;math inline&#34;&gt;\(q\)&lt;/span&gt;取不同值情况下的代价函数 &lt;span class=&#34;math display&#34;&gt;\[
J(\theta)=\frac{1}{2m}[\sum_{i=1}^{m}{h_\theta(x^{(i)}-y^{(i)})^2+\lambda\sum_{j=1}^{n}{|\theta_j|^q}}]
\]&lt;/span&gt; &lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230605164458909.png&#34;  style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Elastic Net的代价函数： &lt;span class=&#34;math display&#34;&gt;\[
J(\theta)=\frac{1}{2m}[\sum_{i=1}^{m}{h_\theta(x^{(i)}-y^{(i)})^2+\lambda\sum_{j=1}^{n}{\alpha\theta_j^2+(1-\alpha)|\theta_j|}}]
\]&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;示例代码-5&#34;&gt;示例代码：&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; genfromtxt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; linear_model&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 读入数据 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data = genfromtxt(&lt;span class=&#34;string&#34;&gt;r&amp;quot;longley.csv&amp;quot;&lt;/span&gt;,delimiter=&lt;span class=&#34;string&#34;&gt;&amp;#x27;,&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 切分数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_data = data[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;:]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y_data = data[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(x_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(y_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 创建并拟合模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model = linear_model.ElasticNetCV()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model.fit(x_data, y_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 弹性网系数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(model.alpha_)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 相关系数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(model.coef_)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 预测&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model.predict(x_data[-&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,np.newaxis])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1Rt411q7WJ?p=23&amp;amp;vd_source=fe8e916be2bd597efffd8dfd95249141&#34;&gt;线性回归及其非线性回归&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://liujk6525.github.io/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/%E8%B7%91%E9%80%9Assd-pytorch/</guid>
            <title>跑通ssd.pytorch</title>
            <link>https://liujk6525.github.io/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/%E8%B7%91%E9%80%9Assd-pytorch/</link>
            <category>Python</category>
            <category>ssd.pytorch</category>
            <pubDate>Wed, 31 May 2023 10:16:02 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;strong&gt;补：&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;expected-a-cuda-device-type-for-generator-but-found-cpu&#34;&gt;Expected a ‘cuda‘ device type for generator but found ‘cpu‘&lt;/h1&gt;
&lt;p&gt;后来我在服务器训练的时候，发现出bug了。原来是&lt;code&gt;Pytorch&lt;/code&gt;版本的原因，我在&lt;code&gt;faster-rcnn-pytorch&lt;/code&gt;这个项目跑的，里面有现成的VOC数据集。但是这个环境&lt;code&gt;Pytorch&lt;/code&gt;是1.9。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;修改&lt;code&gt;/root/miniconda3/lib/python3.7/site-packages/torch/utils/data/sampler.py&lt;/code&gt;中代码，修改结果如下。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;generator = torch.Generator(device=&lt;span class=&#34;string&#34;&gt;&amp;#x27;cuda&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; torch.randperm(n, generator=generator, device=&lt;span class=&#34;string&#34;&gt;&amp;#x27;cuda&amp;#x27;&lt;/span&gt;).tolist()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改&lt;code&gt;train.py&lt;/code&gt;中代码，修改结果如下。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;data_loader = data.DataLoader(dataset, args.batch_size,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                  num_workers=args.num_workers,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                  shuffle=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;, collate_fn=detection_collate,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                  pin_memory=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;, generator=torch.Generator(device=&lt;span class=&#34;string&#34;&gt;&amp;#x27;cuda&amp;#x27;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;w-pthreadpool-cpp.cc90-warningleaking-caffe2-thread-pool-after-fork.function-pthreadpool&#34;&gt;[W pthreadpool-cpp.cc:90] Warning:Leaking Caffe2 thread-pool after fork.(function pthreadpool)&lt;/h1&gt;
&lt;p&gt;线程撕裂，出现了警告，警告数量为设置的线程数量，如果把线程数改小一些，就不会有警告了，但是会影响运行速度。修改&lt;code&gt;train.py&lt;/code&gt;中的代码，修改结果如下。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;data_loader = data.DataLoader(dataset, args.batch_size,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                 num_workers=args.num_workers,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                 shuffle=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;, collate_fn=detection_collate,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                 pin_memory=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;,generator=torch.Generator(device=&lt;span class=&#34;string&#34;&gt;&amp;#x27;cuda&amp;#x27;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr /&gt;
&lt;p&gt;然后我想在服务器上用&lt;code&gt;visdom&lt;/code&gt;看训练结果图，bug出现了。&lt;/p&gt;
&lt;h1 id=&#34;nameerror-name-viz-is-not-defined&#34;&gt;NameError: name ‘viz’ is not defined&lt;/h1&gt;
&lt;p&gt;修改&lt;code&gt;train.py&lt;/code&gt;中的代码，修改结果如下。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; visdom&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;global&lt;/span&gt; viz&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;viz = visdom.Visdom()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;assertionerror-must-define-a-window-to-update&#34;&gt;AssertionError: Must define a window to update&lt;/h1&gt;
&lt;p&gt;修改&lt;code&gt;train.py&lt;/code&gt;中的代码，修改结果如下。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; args.visdom &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; iteration != &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; (iteration % epoch_size == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    epoch += &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    update_vis_plot(epoch, loc_loss, conf_loss, epoch_plot, &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;legacy-autograd-function-with-non-static-forward-method-is-deprecated&#34;&gt;Legacy autograd function with non-static forward method is deprecated&lt;/h1&gt;
&lt;p&gt;原因是当前版本要求forward过程是静态的，所以需要将原代码进行修改。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;从&lt;a href=&#34;https://github.com/sayakbanerjee1999/Single-Shot-Object-Detection-Updated/blob/master/detection.py&#34;&gt;&lt;code&gt;Single-Shot-Object-Detection-Updated&lt;/code&gt;&lt;/a&gt;下载&lt;code&gt;detect.py&lt;/code&gt;文件，并将其替换掉原来的&lt;code&gt;layers/functions/detection.py&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改&lt;code&gt;ssd.py&lt;/code&gt;中的代码，修改结果如下。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; phase == &lt;span class=&#34;string&#34;&gt;&amp;#x27;test&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.softmax = nn.Softmax(dim=-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.detect = Detect()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; self.phase == &lt;span class=&#34;string&#34;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        output = self.detect.apply(self.num_classes, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;200&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.01&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.45&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                   loc.view(loc.size(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;), -&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;),  &lt;span class=&#34;comment&#34;&gt;# loc preds&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                   self.softmax(conf.view(-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, self.num_classes)),  &lt;span class=&#34;comment&#34;&gt;# conf preds&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                   self.priors.&lt;span class=&#34;built_in&#34;&gt;type&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;type&lt;/span&gt;(x.data))  &lt;span class=&#34;comment&#34;&gt;# default boxes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                   )&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;errno-2-no-such-file-or-directory-test.txt&#34;&gt;[Errno 2] No such file or directory: ‘test.txt’&lt;/h1&gt;
&lt;p&gt;修改&lt;code&gt;eval.py&lt;/code&gt;中的代码，修改结果如下。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;imgsetpath = os.path.join(args.voc_root, &lt;span class=&#34;string&#34;&gt;&amp;#x27;VOC2007&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;ImageSets&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;Main&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#123;&amp;#125;.txt&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr /&gt;
&lt;p&gt;做实验对比，所以需要跑通ssd，这里部署的pytroch版本，大佬项目&lt;a href=&#34;https://github.com/amdegroot/ssd.pytorch&#34;&gt;&lt;code&gt;ssd.pytorch&lt;/code&gt;&lt;/a&gt;，中间踩了不少坑，记录如下&lt;/p&gt;
&lt;p&gt;目标：ssd.pytorch&lt;/p&gt;
&lt;p&gt;环境：cuda 11.3 | pytorch 1.8.1&lt;/p&gt;
&lt;h1 id=&#34;修改xml文件的绝对路径&#34;&gt;修改xml文件的绝对路径&lt;/h1&gt;
&lt;p&gt;这是在之前的电脑打的标签，所以VOC数据集里面的标注文件.xml里面的&lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt;值还是老路径，&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230531102209091.png&#34;  style=&#34;zoom: 67%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这里我更改成新的路径。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230531102832023.png&#34;  style=&#34;zoom: 65%;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;indexerrorinvalid-index-of-a-0-dim-tensor&#34;&gt;IndexError:invalid index of a 0-dim tensor…&lt;/h1&gt;
&lt;p&gt;修改&lt;code&gt;train.py&lt;/code&gt;中代码，&lt;code&gt;.data[0]&lt;/code&gt;写法不适用高版本的Pytorch，修改结果如下。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;loc_loss += loss_l.item()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;conf_loss += loss_c.item()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; iteration % &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt; == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;timer: %.4f sec.&amp;#x27;&lt;/span&gt; % (t1 - t0))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;iter &amp;#x27;&lt;/span&gt; + &lt;span class=&#34;built_in&#34;&gt;repr&lt;/span&gt;(iteration) + &lt;span class=&#34;string&#34;&gt;&amp;#x27; || Loss: %.4f ||&amp;#x27;&lt;/span&gt; % (loss.item()), end=&lt;span class=&#34;string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;stopinteration&#34;&gt;StopInteration…&lt;/h1&gt;
&lt;p&gt;修改&lt;code&gt;train.py&lt;/code&gt;中代码，修改结果如下。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    images, targets = &lt;span class=&#34;built_in&#34;&gt;next&lt;/span&gt;(batch_iterator)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;except&lt;/span&gt; StopIteration:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    batch_iterator = &lt;span class=&#34;built_in&#34;&gt;iter&lt;/span&gt;(data_loader)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    images, targets = &lt;span class=&#34;built_in&#34;&gt;next&lt;/span&gt;(batch_iterator)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;indexerror-the-shape-of-the-mask-14-8732-at-index-0does&#34;&gt;IndexError: The shape of the mask [14, 8732] at index 0does…&lt;/h1&gt;
&lt;p&gt;交换&lt;code&gt;layers/modules/multibox_loss.py&lt;/code&gt;中代码位置，修改结果如下。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;loss_c = loss_c.view(num, -1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;loss_c[pos] = 0  # filter out pos boxes for now&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;lossnan&#34;&gt;loss：NAN&lt;/h1&gt;
&lt;p&gt;如果lr设置过高，可能会导致训练过程中loss出现NAN的情况。它默认的参数是1e-3，我这里将学习率修改为1e-4。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;parser.add_argument(&lt;span class=&#34;string&#34;&gt;&amp;#x27;--lr&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;--learning-rate&amp;#x27;&lt;/span&gt;, default=&lt;span class=&#34;number&#34;&gt;1e-4&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;警告&#34;&gt;警告&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;UserWarning: size_average and reduce args will be deprecated, please use reduction=‘sum’ instead. warnings.warn(warning.format(ret))&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在高版本的Pytorch中，&lt;code&gt;size_average&lt;/code&gt;和&lt;code&gt;reduce&lt;/code&gt;这两个参数都将不再支持，修改&lt;code&gt;multibox_loss.py&lt;/code&gt;中代码，修改结果如下。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;loss_l = F.smooth_l1_loss(loc_p, loc_t, reduction=&lt;span class=&#34;string&#34;&gt;&amp;#x27;sum&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;loss_c = F.cross_entropy(conf_p, targets_weighted, reduction=&lt;span class=&#34;string&#34;&gt;&amp;#x27;sum&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;UserWarning: volatile was removed and now has no effect. Use ‘with torch.no_grad():’ instead.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;版本问题，修改&lt;code&gt;ssd.py&lt;/code&gt;中代码，修改结果如下。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; torch.no_grad():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	self.priors = Variable(self.priorbox.forward())&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;UserWarning: nn.init.xavier_uniform is now deprecated in favor of nn.init.xavier_uniform_ .init.xavier_uniform(param)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nn.init.xavier_uniform&lt;/code&gt;是以前的版本使用的，在高版本的Pytorch中已经被弃用。修改&lt;code&gt;train.py&lt;/code&gt;中代码，修改结果如下。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;xavier&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;param&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    init.xavier_uniform_(param)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以发现很多警告就是版本不匹配的问题，但我是抱着只要能运行的心态，然而&lt;code&gt;UserWarning&lt;/code&gt;又很影响观感，那就直接屏蔽它！&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; warnings&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;warnings.filterwarnings(&lt;span class=&#34;string&#34;&gt;&amp;#x27;ignore&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或者命令行执行&lt;code&gt;xx.py&lt;/code&gt;脚本文件&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;python -W ignore xx.py&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;运行train.py文件&#34;&gt;运行train.py文件&lt;/h1&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;python -W ignore train.py&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230531115820400.png&#34; style=&#34;zoom: 67%;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;amdegroot/ssd.pytorch/issues/421&#34;&gt;&lt;code&gt;amdegroot/ssd.pytorch/issues/421&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_39506912/article/details/116926504?spm=1001.2014.3001.5506&#34;&gt;&lt;code&gt;SSD训练自己的数据集（pytorch版）&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/shaoxx333/p/16181651.html&#34;&gt;&lt;code&gt;Pytorch搭建SSD模型踩坑集锦&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.yii666.com/blog/407628.html&#34;&gt;&lt;code&gt;SSD训练数据集流程（学习记录）&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://liujk6525.github.io/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/%E8%B7%91%E9%80%9AYolo-v5/</guid>
            <title>wii11系统跑通Yolo-v5</title>
            <link>https://liujk6525.github.io/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/%E8%B7%91%E9%80%9AYolo-v5/</link>
            <category>Python</category>
            <category>Yolov5</category>
            <pubDate>Sat, 27 May 2023 10:06:35 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;之前跑Yolo-v5是在服务器跑的，现在把权重文件跑完了，正好最近换了新电脑，在本地部署跑跑看，记录如下：&lt;/p&gt;
&lt;p&gt;复现&lt;img src=&#34;/imgs/$%7Bfiilename%7D/b3809ce4a80e96cf09f6d500abed0fbd_129107_720_720.jpg&#34;  style=&#34;zoom:5%;&#34; /&gt;大佬们的项目之前一定要看这个项目所需的配置环境，掉大坑！！！&lt;/p&gt;
&lt;p&gt;目标：Yolo-v5 v6.1版本&lt;/p&gt;
&lt;p&gt;环境：cuda 11.3 | pytorch 1.8.1&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h1 id=&#34;安装anaconda3&#34;&gt;安装Anaconda3&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.anaconda.com/&#34;&gt;&lt;code&gt;anaconda官网&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230527104222716.png&#34; alt=&#34;image-20230527104222716&#34; style=&#34;zoom:33%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;直接点击&lt;code&gt;Download&lt;/code&gt;下载安装包，双击安装&lt;/p&gt;
&lt;p&gt;我把&lt;code&gt;Anaconda&lt;/code&gt;安装在D盘了&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230527105216332.png&#34;  style=&#34;zoom: 67%;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;安装cuda&#34;&gt;安装CUDA&lt;/h1&gt;
&lt;p&gt;安装之前先看下自己电脑配置条件，在终端输入&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;nvidia-smi&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230527105741395.png&#34;  style=&#34;zoom: 50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以看到&lt;code&gt;Driver Version: 512.98&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在对照&lt;a href=&#34;https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html&#34;&gt;&lt;code&gt;nvidia官网显卡驱动&lt;/code&gt;&lt;/a&gt;给出的版本要求选择CUDA版本，这里我选择的是&lt;code&gt;CUDA 11.3&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230527110416589.png&#34;  style=&#34;zoom: 33%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后来到&lt;a href=&#34;https://developer.nvidia.com/cuda-toolkit-archive&#34;&gt;&lt;code&gt;CUDA Toolkit Archive&lt;/code&gt;&lt;/a&gt;，&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230527111819649.png&#34;  style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;点击&lt;code&gt;CUDA Toolkit 11.3.1&lt;/code&gt;即可跳转到&lt;a href=&#34;https://developer.nvidia.com/cuda-11-3-1-download-archive?target_os=Windows&amp;amp;target_arch=x86_64&amp;amp;target_version=10&amp;amp;target_type=exe_local&#34;&gt;&lt;code&gt;CUDA Toolkit 11.3 Update 1 Downloads&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230527112055726.png&#34;  style=&#34;zoom: 33%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;直接点击&lt;code&gt;Download(2.7GB)&lt;/code&gt;下载安装包，双击安装&lt;/p&gt;
&lt;p&gt;这里选择&lt;code&gt;自定义(c)(高级)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230527113136663.png&#34;  style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;选择驱动程序组件时，视情况而定；我这里取消勾选&lt;code&gt;Driver components&lt;/code&gt;和&lt;code&gt;Other components&lt;/code&gt;，因为当前版本已经安装了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230527113247098.png&#34;  style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;点击&lt;code&gt;下一步&lt;/code&gt;，等待安装完成。&lt;/p&gt;
&lt;h1 id=&#34;配置cudnn&#34;&gt;配置cuDNN&lt;/h1&gt;
&lt;p&gt;进入Nvidia官网&lt;a href=&#34;https://developer.nvidia.com/rdp/cudnn-archive&#34;&gt;&lt;code&gt;cuDNN Archive&lt;/code&gt;&lt;/a&gt;，选择&lt;code&gt;for CUDA 11.X&lt;/code&gt;的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230527114836975.png&#34; style=&#34;zoom:33%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;我这里选择的是&lt;code&gt;v8.8.0&lt;/code&gt;版本的，点击&lt;code&gt;Local Install for Windows(Zip)&lt;/code&gt;下载&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230527114635962.png&#34;  style=&#34;zoom: 33%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;解压后里面有三个文件&lt;span class=&#34;math inline&#34;&gt;\(bin|include|lib\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230527123944344.png&#34;  style=&#34;zoom: 43%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;将其复制到CUDA安装目录就好了，我这里把CUDA安装在D盘了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230527124408026.png&#34;  style=&#34;zoom:33%;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;安装pytorch&#34;&gt;安装pytorch&lt;/h1&gt;
&lt;p&gt;打开&lt;code&gt;Anaconda Prompt&lt;/code&gt;，输入如下命令，创建一个虚拟环境，我这里命名为yolov5；&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;conda create -n yolov5 python=3.8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;所用到的各种包都是在yolov5这个虚拟环境下配置的，所以需要激活yolov5环境&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;conda activate yolov5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230527131627319.png&#34;  style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;进入Pytorch官网&lt;a href=&#34;https://pytorch.org/get-started/previous-versions/#installing-previous-versions-of-pytorch&#34;&gt;&lt;code&gt;Installing Previous Versions Of Pytorch&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;conda install 安装&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230527130150777.png&#34;  style=&#34;zoom: 50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;我这里是安装的CUDA 11.3，输入以下指令&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;conda install pytorch==1.8.1 torchvision==0.9.1 torchaudio==0.8.1 cudatoolkit=11.3 -c pytorch -c conda-forge&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;-c pytorch&lt;/code&gt; 表示在pytorch的官网下载；&lt;code&gt;-c conda-forge&lt;/code&gt; 表示在conda官网下载&lt;/p&gt;
&lt;p&gt;但是pytorch官网只有cpu版本的，conda索性找不到了。好在CUDA是向下兼容的，最后选择用pip install的方式下载了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pip install 安装&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230527130231273.png&#34;  style=&#34;zoom: 50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;最后选择的CUDA 11.1，输入以下指令；&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;pip install torch==1.8.1+cu111 torchvision==0.9.1+cu111 torchaudio==0.8.1 -f https://download.pytorch.org/whl/torch_stable.html&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;到这里pytorch环境就配置好了！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230527133453540.png&#34;  style=&#34;zoom: 67%;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;下载yolo-v5源代码&#34;&gt;下载Yolo-v5源代码&lt;/h1&gt;
&lt;p&gt;Yolo-v5更新的很快，但我当时用服务器跑的时候下载的v6.1版本，所以用git bash下载文件。&lt;/p&gt;
&lt;p&gt;我是在&lt;code&gt;Pycharm Projects&lt;/code&gt;里面创建一个文件夹&lt;code&gt;Yolov5&lt;/code&gt;，然后右击选择&lt;code&gt;Git Bash Here&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230527134730082.png&#34;  style=&#34;zoom: 50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt; ifconfigbash&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;git &lt;span class=&#34;built_in&#34;&gt;clone&lt;/span&gt; -b v6.1 https://github.com/ultralytics/yolov5.git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230527134152555.png&#34;  style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这样就把源代码下载完成了，我这里把它重命名了&lt;code&gt;yolov5-6.1&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230527135851656.png&#34;  style=&#34;zoom: 40%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;接下来从requirements.txt安装所需要的包。打开&lt;code&gt;Anaconda Prompt&lt;/code&gt;，cd到yolov5-6.1文件夹&lt;/p&gt;
&lt;p&gt;我这里是&lt;code&gt;E:\Pycharm Projects\Yolov5\yolov5-6.1&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;pip install -r requirements.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230527140112538.png&#34; alt=&#34;image-20230527140112538&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;到这里就全部部署完成好了，接下来就是把自己的权重文件替换成yolov5的预训练权重文件yolov5.pt。&lt;/p&gt;
&lt;p&gt;执行detect.py，测试了一下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-1317.jpg&#34;  style=&#34;zoom: 45%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-1685.jpg&#34;  style=&#34;zoom:45%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230527141712871.png&#34;  style=&#34;zoom:40%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;还是能较好的把可采摘的苹果和被遮挡的苹果识别出来。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://liujk6525.github.io/%E8%B7%AF%E5%BE%84%E8%A7%84%E5%88%92/%E5%9F%BA%E4%BA%8E%E9%87%87%E6%A0%B7%E7%9A%84%E8%B7%AF%E5%BE%84%E8%A7%84%E5%88%92/</guid>
            <title>基于采样的路径规划</title>
            <link>https://liujk6525.github.io/%E8%B7%AF%E5%BE%84%E8%A7%84%E5%88%92/%E5%9F%BA%E4%BA%8E%E9%87%87%E6%A0%B7%E7%9A%84%E8%B7%AF%E5%BE%84%E8%A7%84%E5%88%92/</link>
            <category>python</category>
            <pubDate>Sat, 13 May 2023 21:41:15 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;基础知识&#34;&gt;基础知识&lt;/h1&gt;
&lt;p&gt;虽然&lt;code&gt;基于图搜索的路径规划算法&lt;/code&gt;能够给出一个&lt;strong&gt;全局范围内的最优解&lt;/strong&gt;，但是当地图过大，空间维度过高时，它的搜索效率就会变得很慢。主要用于低维空间的路径规划问题。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h2 id=&#34;概率路图算法probabilistic-road-map-prm&#34;&gt;概率路图算法(Probabilistic Road Map, &lt;a href=&#34;https://en.wikipedia.org/wiki/Probabilistic_roadmap&#34;&gt;&lt;code&gt;PRM&lt;/code&gt;&lt;/a&gt;)&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;PRM&lt;/code&gt;算法首先使用随机采样的方式在环境中建立路径网络图，将连续的空间转换为离散的空间，然后在路径网络图上进行路径规划，解决在高维空间中搜索效率低的问题&lt;/p&gt;
&lt;p&gt;算法流程&lt;/p&gt;
&lt;p&gt;​ &lt;img src=&#34;/imgs/$%7Bfiilename%7D/prm.png&#34;  style=&#34;zoom: 80%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;采样点的数量&lt;/strong&gt;和&lt;strong&gt;采样点间存在通道的最大距离&lt;/strong&gt;是关键参数，具体的&lt;/p&gt;
&lt;p&gt;采样点的数量太少，可能会导致路径规划失败，因为生成的概率路线少了。&lt;/p&gt;
&lt;p&gt;随着采样点数量增加，结果会越来越接近最短路径，但同时搜索效率会降低&lt;/p&gt;
&lt;h2 id=&#34;快速扩展随机树rapidly-exploring-random-tree-rrt算法&#34;&gt;快速扩展随机树(Rapidly-exploring Random Tree, &lt;a href=&#34;https://en.wikipedia.org/wiki/Rapidly-exploring_random_tree&#34;&gt;&lt;code&gt;RRT&lt;/code&gt;&lt;/a&gt;)算法&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;RRT&lt;/code&gt;算法是一种单查询(single-query)算法，搜索过程就像一棵树不断向周围扩展生长。它的复杂度不受地图的离散程度影响，在高维空间中具有很高的搜索效率。&lt;/p&gt;
&lt;p&gt;​ &lt;img src=&#34;/imgs/$%7Bfiilename%7D/RRT.png&#34;  style=&#34;zoom:80%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;缺点：只管尽快地找到可行路径，所以最终路径并不是最优的，甚至会非常“绕”。&lt;/p&gt;
&lt;h2 id=&#34;双向快速扩展随机树rrt-connect算法&#34;&gt;双向快速扩展随机树(&lt;a href=&#34;https://ieeexplore.ieee.org/document/844730&#34;&gt;&lt;code&gt;RRT-Connect&lt;/code&gt;&lt;/a&gt;)算法&lt;/h2&gt;
&lt;p&gt;在&lt;code&gt;RRT&lt;/code&gt;的基础上引入了双向扩展环节，分别以起点和目标点为根节点生成两棵树进行双向扩展，&lt;strong&gt;加快了搜索速度&lt;/strong&gt;，当两棵树建立连接时被认为路径规划成功。&lt;/p&gt;
&lt;p&gt;缺点：但是&lt;code&gt;RRT-Connect&lt;/code&gt;和&lt;code&gt;RRT&lt;/code&gt;一样，都是单查询算法，最终路径并不是最优的。&lt;/p&gt;
&lt;h2 id=&#34;rrt算法&#34;&gt;&lt;a href=&#34;https://arxiv.org/abs/1105.1186&#34;&gt;&lt;code&gt;RRT*&lt;/code&gt;&lt;/a&gt;算法&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;RRT*&lt;/code&gt;算法是一种渐近最优算法。在&lt;code&gt;RRT&lt;/code&gt;算法的基础上，增加了将&lt;span class=&#34;math inline&#34;&gt;\(X_{rand}\)&lt;/span&gt;加入搜索树 T 时&lt;strong&gt;父节点的选择策略&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RRT*&lt;/code&gt;算法在选择父节点时会有一个&lt;strong&gt;重连(Rewire)&lt;/strong&gt;过程，也就是在以&lt;span class=&#34;math inline&#34;&gt;\(X_{rand}\)&lt;/span&gt;为圆心、半径为&lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt;的邻域内，找到与&lt;span class=&#34;math inline&#34;&gt;\(X_{new}\)&lt;/span&gt;连接后移动代价(从起点移动到&lt;span class=&#34;math inline&#34;&gt;\(X_{new}\)&lt;/span&gt;的路径长度)最小的节点，并重新选择&lt;span class=&#34;math inline&#34;&gt;\(X_{min}\)&lt;/span&gt;作为&lt;span class=&#34;math inline&#34;&gt;\(X_{new}\)&lt;/span&gt;的父节点，而不是&lt;span class=&#34;math inline&#34;&gt;\(X_{near}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;简单理解就是&lt;span class=&#34;math inline&#34;&gt;\(Xnear\)&lt;/span&gt;产生了&lt;span class=&#34;math inline&#34;&gt;\(Xnew\)&lt;/span&gt;,然而&lt;span class=&#34;math inline&#34;&gt;\(Xnew\)&lt;/span&gt;抛弃了&lt;span class=&#34;math inline&#34;&gt;\(Xnear\)&lt;/span&gt;，选择了移动代价最小的&lt;span class=&#34;math inline&#34;&gt;\(Xmin\)&lt;/span&gt;作为父节点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/v2-1b532a8161587f211b6a7a3c9e239589_720w.webp&#34;  style=&#34;zoom: 67%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;缺点：&lt;code&gt;RRT*&lt;/code&gt;*是对自由空间进行均匀采样，搜索树上会生成很多冗余的分支，所以&lt;code&gt;RRT*&lt;/code&gt;的收敛速度很慢。&lt;/p&gt;
&lt;h2 id=&#34;informed-rrt算法&#34;&gt;&lt;a href=&#34;https://arxiv.org/abs/1404.2334&#34;&gt;&lt;code&gt;Informed-RRT*&lt;/code&gt;&lt;/a&gt;算法&lt;/h2&gt;
&lt;p&gt;对&lt;code&gt;RRT*&lt;/code&gt;的改进策略：采用椭圆采样来代替全局均匀采样&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230514175249529.png&#34;  style=&#34;zoom: 50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;以起点 &lt;span class=&#34;math inline&#34;&gt;\(X_{start}\)&lt;/span&gt;和终点&lt;span class=&#34;math inline&#34;&gt;\(X_{goal}\)&lt;/span&gt;作为椭圆的焦点，令&lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt;等于初始路径长度&lt;span class=&#34;math inline&#34;&gt;\(c_{best}\)&lt;/span&gt;的一半，即&lt;span class=&#34;math inline&#34;&gt;\(a=\frac{c_{best}}{2}\)&lt;/span&gt;，则$ c=&lt;span class=&#34;math inline&#34;&gt;\(，\)&lt;/span&gt;b=$，这样就可以得到椭圆方程的所有参数。&lt;/p&gt;
&lt;p&gt;在之后的迭代中，如果没找到更短的路径，就用&lt;span class=&#34;math inline&#34;&gt;\(c_{min}\)&lt;/span&gt;作为新的&lt;span class=&#34;math inline&#34;&gt;\(c_{best}\)&lt;/span&gt;，然后在新的椭圆区域进行采样。&lt;/p&gt;
&lt;h1 id=&#34;代码实现&#34;&gt;代码实现&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230514234320378.png&#34;  style=&#34;zoom:80%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230514234432119.png&#34;  style=&#34;zoom:80%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230514234602917.png&#34;  style=&#34;zoom:80%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230514234911888.png&#34;  style=&#34;zoom:80%;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/349074802&#34;&gt;&lt;code&gt;路径规划 | 随机采样算法：PRM、RRT、RRT-Connect、RRT*&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/372315811&#34;&gt;&lt;code&gt;路径规划 | 随机采样算法：Informed-RRT*&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1yT4y1T7Eb?p=5&#34;&gt;&lt;code&gt;机器人路径规划、轨迹优化系列课程&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[1] Lavalle S M . Rapidly-Exploring Random Trees: A New Tool for Path Planning[J]. Research Report, 1999.&lt;/p&gt;
&lt;p&gt;[2] Jr J , Lavalle S M . RRT-Connect: An Efficient Approach to Single-Query Path Planning[C]// Proceedings of the 2000 IEEE International Conference on Robotics and Automation, ICRA 2000, April 24-28, 2000, San Francisco, CA, USA. IEEE, 2000.&lt;/p&gt;
&lt;p&gt;[3] Karaman S , Frazzoli E . Sampling-based Algorithms for Optimal Motion Planning[J]. The International Journal of Robotics Research, 2011, 30(7):846-894.&lt;/p&gt;
&lt;p&gt;[4] Gammell J D , Srinivasa S S , Barfoot T D . Informed RRT*: Optimal Sampling-based Path Planning Focused via Direct Sampling of an Admissible Ellipsoidal Heuristic[J]. IEEE, 2014.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://liujk6525.github.io/%E8%B7%AF%E5%BE%84%E8%A7%84%E5%88%92/%E5%9F%BA%E4%BA%8E%E6%90%9C%E7%B4%A2%E7%9A%84%E8%B7%AF%E5%BE%84%E8%A7%84%E5%88%92/</guid>
            <title>基于搜索的路径规划</title>
            <link>https://liujk6525.github.io/%E8%B7%AF%E5%BE%84%E8%A7%84%E5%88%92/%E5%9F%BA%E4%BA%8E%E6%90%9C%E7%B4%A2%E7%9A%84%E8%B7%AF%E5%BE%84%E8%A7%84%E5%88%92/</link>
            <category>Python</category>
            <pubDate>Fri, 12 May 2023 11:36:41 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;基础知识&#34;&gt;基础知识&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;图搜索法&lt;/strong&gt;是通过利用已有的环境地图和障碍物等数据信息，建立由起点至目标点的可行路线。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;配置空间(Configuration Space)&lt;/strong&gt; 在实际环境，要将工作空间转换到配置空间中，即将机器人转化为一个&lt;strong&gt;质点&lt;/strong&gt;，同时将障碍物按照机器人的体积进行膨胀&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h2 id=&#34;基本流程&#34;&gt;基本流程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在容器&lt;code&gt;open list&lt;/code&gt;中存放将要访问的节点&lt;/li&gt;
&lt;li&gt;将起点加入容器&lt;/li&gt;
&lt;li&gt;While True：&lt;/li&gt;
&lt;li&gt;弹出：从容器中取出一个节点&lt;/li&gt;
&lt;li&gt;扩展：将该节点周围的其他节点放入&lt;code&gt;open list&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;深度优先搜索depth-first-search-dfs-算法&#34;&gt;深度优先搜索(Depth First Search, &lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2&#34;&gt;&lt;code&gt;DFS&lt;/code&gt;&lt;/a&gt; )算法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;优先扩展搜索深度较大的节点，从起点开始，按照某个顺序一条路走下去，直至不能再继续为止，然后回到上一节点，再换另一条路走下去；&lt;/li&gt;
&lt;li&gt;深度优先搜索的过程是一条路走到底后，最后访问的节点最先拿来处理，整个过程可以用&lt;code&gt;栈(stack)&lt;/code&gt;来表示——&lt;strong&gt;后进先出&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;深度优先算法优先扩展搜索深度较大的节点，因此能够更迅速的获得下一个可行路径，不过深度优先算法获取的第一个路径通常是比较长的路径。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在&lt;strong&gt;无权图&lt;/strong&gt;中找到从节点&lt;code&gt;a&lt;/code&gt;到节点&lt;code&gt;j&lt;/code&gt;的路径为例&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/dfs.png&#34;  style=&#34;zoom:80%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;按照&lt;code&gt;DFS&lt;/code&gt;的基本流程搜索&lt;code&gt;a&lt;/code&gt;到&lt;code&gt;j&lt;/code&gt;的路径：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/dfs-1683872034517-4.png&#34;  style=&#34;zoom:80%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;从目标点开始回溯：&lt;code&gt;a-&amp;gt;b-&amp;gt;f-&amp;gt;j&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;广度优先搜索breadth-first-search-bfs算法&#34;&gt;广度优先搜索(Breadth First Search, &lt;a href=&#34;https://zh.wikipedia.org/zh-hans/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2&#34;&gt;&lt;code&gt;BFS&lt;/code&gt;&lt;/a&gt;)算法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;每一步都扩展同一层的所有可能节点，一层一层扩展下去，直到某一层搜索到终点为止。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;广度优先搜索的过程是一层中先访问的节点拿来处理，可以用&lt;code&gt;队列(queue)&lt;/code&gt;来表示——&lt;strong&gt;先进先出&lt;/strong&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;广度优先算法优先扩展深入较小的节点，呈&lt;strong&gt;波状推进&lt;/strong&gt;的形式搜索。因此广度优先算法检索到的第一个路径通常是最短路径。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/bfs.png&#34;   style=&#34;zoom:80%;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;贪婪最佳优先搜索greedy-best-first-searchgbfs-算法&#34;&gt;贪婪最佳优先搜索(Greedy Best First Search,&lt;a href=&#34;https://www.codecademy.com/resources/docs/ai/search-algorithms/greedy-best-first-search&#34;&gt;&lt;code&gt;GBFS&lt;/code&gt;&lt;/a&gt; )算法&lt;/h2&gt;
&lt;p&gt;使用的是&lt;strong&gt;优先队列(Priority Queue)&lt;/strong&gt;，普通队列是一种&lt;strong&gt;先进先出&lt;/strong&gt;的数据结构，而在优先队列中元素被赋予了优先级，最高优先级元素优先删除，也就是&lt;code&gt;first in&lt;/code&gt;, &lt;code&gt;largest out&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在图搜索算法中，优先级判断的标准是代价函数 &lt;span class=&#34;math inline&#34;&gt;\(f(n)\)&lt;/span&gt; ， &lt;span class=&#34;math inline&#34;&gt;\(f(n)\)&lt;/span&gt; 越小，优先级越高。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f(n)=h(n)
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(h(n)\)&lt;/span&gt;是启发式函数，为节点&lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;到目标节点之间所形成路径的最小代价值。一般为&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E8%B7%9D%E7%A6%BB&#34;&gt;&lt;code&gt;欧氏距离&lt;/code&gt;&lt;/a&gt;或者&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%9B%BC%E5%93%88%E9%A0%93%E8%B7%9D%E9%9B%A2&#34;&gt;&lt;code&gt;曼哈顿距离&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;遇到障碍物时，它很容易陷入局部最优的陷阱。&lt;/p&gt;
&lt;h1 id=&#34;dijkstra算法&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%88%B4%E5%85%8B%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95&#34;&gt;&lt;code&gt;Dijkstra&lt;/code&gt;&lt;/a&gt;算法&lt;/h1&gt;
&lt;p&gt;Dijkstra算法是从一个顶点到其余各顶点的最短路径算法，其流程仍然与上述算法基本一致，它也是用优先队列作为&lt;code&gt;open list&lt;/code&gt;的数据结构，它和&lt;code&gt;GBFS&lt;/code&gt;的区别在于代价函数 &lt;span class=&#34;math inline&#34;&gt;\(f(n)\)&lt;/span&gt;的定义:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f(n)=g(n)
\]&lt;/span&gt; &lt;span class=&#34;math inline&#34;&gt;\(g(n)\)&lt;/span&gt;表示从起始节点到当前节点&lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;的移动代价函数。&lt;/p&gt;
&lt;p&gt;计算起点&lt;code&gt;v1&lt;/code&gt;到终点&lt;code&gt;v6&lt;/code&gt;的最短路径，箭头上的数值表示&lt;strong&gt;两个节点间的距离&lt;/strong&gt;&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;首先扩展第一个节点，计算其余邻近节点与第一个节点的距离，从未扩展的节点中选择代价函数最小的节点进行扩展，并更新其余节点的代价函数&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;重复进行上面的步骤，直到所有节点都已扩展。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最后标出起点到终点的最短路径&lt;/p&gt;
&lt;p&gt;找到一条从&lt;code&gt;1&lt;/code&gt;到&lt;code&gt;6&lt;/code&gt;的最短路径&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​ &lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230512205640371.png&#34;  style=&#34;zoom:80%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;open list&lt;/code&gt;: 4(1) 2(2) # 存储已经被搜索过但没有被访问过的节点，并对其进行排序&lt;/p&gt;
&lt;p&gt;&lt;code&gt;closed list&lt;/code&gt;:1(0) # 存储已经被访问过的节点&lt;/p&gt;
&lt;p&gt;从&lt;code&gt;open list&lt;/code&gt;中的节点中选择距离最小的节点作为扩展节点，显然是节点4。&lt;/p&gt;
&lt;p&gt;​ &lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230512210430685.png&#34;  style=&#34;zoom:80%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;open list&lt;/code&gt;: 2(2) 3(3) 7(5) 6(9) # 遍历邻接节点，更新距离&lt;/p&gt;
&lt;p&gt;&lt;code&gt;closed list&lt;/code&gt;: 1(0) 4(1)&lt;/p&gt;
&lt;p&gt;重复上述操作。选择新的扩展节点，即节点2&lt;/p&gt;
&lt;p&gt;​ &lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230512211350445.png&#34; style=&#34;zoom:80%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;open list&lt;/code&gt;: 3(3) 7(5) &lt;strong&gt;6(9)&lt;/strong&gt; 5(13)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;closed list&lt;/code&gt;: 1(0) 4(1) 2(2)&lt;/p&gt;
&lt;p&gt;选择新的扩展节点，即节点3&lt;/p&gt;
&lt;p&gt;​ &lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230512212316556.png&#34; style=&#34;zoom:80%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;open list&lt;/code&gt;: 7(5) &lt;strong&gt;6(8)&lt;/strong&gt; 5(13) # 注意这里访问节点3，对它的领接节点6的距离进行了更新&lt;/p&gt;
&lt;p&gt;&lt;code&gt;closed list&lt;/code&gt;: 1(0) 4(1) 2(2) 3(3)&lt;/p&gt;
&lt;p&gt;选择新的扩展节点，即节点7&lt;/p&gt;
&lt;p&gt;​ &lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230512213110030.png&#34;  style=&#34;zoom:80%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;open list&lt;/code&gt;: &lt;strong&gt;6(6)&lt;/strong&gt; 5(13) # 注意这里访问节点7，对它的领接节点6的距离进行了更新&lt;/p&gt;
&lt;p&gt;&lt;code&gt;closed list&lt;/code&gt;: 1(0) 4(1) 2(2) 3(3) 7(5)&lt;/p&gt;
&lt;p&gt;​ &lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230512214147752.png&#34;  style=&#34;zoom:80%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;closed list&lt;/code&gt;: 1(0) 4(1) 2(2) 3(3) 7(5) 6(6)&lt;/p&gt;
&lt;h1 id=&#34;a搜索a-search算法&#34;&gt;&lt;code&gt;A*&lt;/code&gt;搜索(&lt;a href=&#34;https://zh.wikipedia.org/wiki/A*%E6%90%9C%E5%B0%8B%E6%BC%94%E7%AE%97%E6%B3%95&#34;&gt;&lt;code&gt;A* search&lt;/code&gt;&lt;/a&gt;)算法&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;GBFS&lt;/code&gt;用节点到目标点的距离作为代价函数，将搜索方向引向目标点，搜索效率高。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Dijkstra&lt;/code&gt;算法采用起点到当前扩展节点的移动代价作为代价函数，能够确保路径最优。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;A*&lt;/code&gt;搜索算法在&lt;code&gt;Dijkstra&lt;/code&gt;算法的基础上增加启发式函数&lt;span class=&#34;math inline&#34;&gt;\(h(n)\)&lt;/span&gt;，规定其代价函数为 &lt;span class=&#34;math display&#34;&gt;\[
f(n)=g(n)+h(n)
\]&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;代码实现&#34;&gt;代码实现&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/Astart.png&#34; alt=&#34;Astart&#34; style=&#34;zoom:80%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/dijkstra.png&#34; alt=&#34;dijkstra&#34; style=&#34;zoom:80%;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/346666812&#34;&gt;&lt;code&gt;路径规划 | 图搜索算法：DFS、BFS、GBFS、Dijkstra、A*&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1yT4y1T7Eb?p=2&#34;&gt;机器人路径规划、轨迹优化系列课程&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
