<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>你不是单打独斗 • Posts by &#34;matlab&#34; tag</title>
        <link>https://liujk6525.github.io</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Tue, 16 May 2023 10:20:21 +0800</pubDate>
        <lastBuildDate>Tue, 16 May 2023 10:20:21 +0800</lastBuildDate>
        <category>Anaconda</category>
        <category>Hexo</category>
        <category>Jetson Nano</category>
        <category>Yolo-v5</category>
        <category>JupyterLab</category>
        <category>Python</category>
        <category>Jupyter Notebook</category>
        <category>Typora</category>
        <category>Git</category>
        <category>Matlab</category>
        <category>路径规划</category>
        <category>python</category>
        <category>Yolov5</category>
        <category>ssd.pytorch</category>
        <item>
            <guid isPermalink="true">https://liujk6525.github.io/%E8%BD%A8%E8%BF%B9%E4%BC%98%E5%8C%96/%E8%BD%A8%E8%BF%B9%E4%BC%98%E5%8C%96-%E9%97%AD%E5%BC%8F%E6%B1%82%E8%A7%A3/</guid>
            <title>轨迹优化-闭式求解</title>
            <link>https://liujk6525.github.io/%E8%BD%A8%E8%BF%B9%E4%BC%98%E5%8C%96/%E8%BD%A8%E8%BF%B9%E4%BC%98%E5%8C%96-%E9%97%AD%E5%BC%8F%E6%B1%82%E8%A7%A3/</link>
            <category>Matlab</category>
            <pubDate>Tue, 16 May 2023 10:20:21 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;如果&lt;a href=&#34;https://baike.baidu.com/item/%E4%BA%8C%E6%AC%A1%E8%A7%84%E5%88%92/4269159&#34;&gt;&lt;code&gt;QP&lt;/code&gt;&lt;/a&gt;问题只有等式约束，没有不等式约束，可以采用&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E8%A7%A3%E6%9E%90%E8%A7%A3&#34;&gt;&lt;code&gt;闭式求解&lt;/code&gt;&lt;/a&gt;的方式。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h1 id=&#34;构建等式约束方程&#34;&gt;构建等式约束方程&lt;/h1&gt;
&lt;p&gt;还是一段复杂的轨迹按照时间划分成&lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt;段，一共有&lt;span class=&#34;math inline&#34;&gt;\(m+1\)&lt;/span&gt;个点，其中&lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;是起点，&lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt;是目标点，&lt;span class=&#34;math inline&#34;&gt;\(m-1\)&lt;/span&gt;个中间点。每段多项式轨迹都构成 &lt;span class=&#34;math display&#34;&gt;\[
A_ip_i=d_i,\quad 
A_i=\left[\begin{matrix}
A_0\\A_T
\end{matrix}\right]_i,\quad
d_i=\left[\begin{matrix}
d_0\\d_T
\end{matrix}\right]_i
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;其中，&lt;span class=&#34;math inline&#34;&gt;\(d_o,d_T\)&lt;/span&gt;是第&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;段多项式轨迹的起点和终点的各阶导数组成的向量。这里只考虑了位置速度和加速度。 &lt;span class=&#34;math display&#34;&gt;\[
\underbrace{A_{total}}_{6m \times m(n+1)}
\underbrace{
\left[ \begin{matrix}
p_1 \\
\vdots \\
p_m \\
\end{matrix} \right]}_{m(n+1) \times 1} 
= \left[ \begin{matrix}
d_1 \\
\vdots \\
d_m \\
\end{matrix} \right]
=\underbrace{
\left[ \begin{matrix}
p_1(t_0)\\
v_1(t_0)\\
a_1(t_0)\\
p_1(t_1)\\
v_1(t_1)\\
a_1(t_1)\\
\vdots \\
p_m(t_{m-1})\\
v_m(t_{m-1})\\
a_m(t_{m-1})\\
p_m(t_m)\\
v_m(t_m)\\
a_m(t_m)\\
\end{matrix} \right]}_{6m \times 1}
\]&lt;/span&gt; 目标是要求解参数&lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; &lt;span class=&#34;math display&#34;&gt;\[
p=A^{-1}d
\]&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;消除重复变量&#34;&gt;消除重复变量&lt;/h2&gt;
&lt;p&gt;考虑到连续性(这里假设P、V、A连续)，向量中很多变量重复了 &lt;span class=&#34;math display&#34;&gt;\[
p_i(t_i)=p_{i+1}(t_i),~~v_i(t_i)=v_{i+1}(t_i),~~a_i(t_i)=a_{i+1}(t_i)
\]&lt;/span&gt; 连续性约束不是直接加到等式约束方程中。而是通过一个映射矩阵&lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt;将一个变量映射到两个重复的变量上。 &lt;span class=&#34;math display&#34;&gt;\[
\underbrace{
\left[ \begin{matrix}
d_1 \\
\vdots \\
d_k \\
\end{matrix} \right]}_{6m\times1}=
\underbrace{
\left[ \begin{matrix}
1\\
&amp;amp;1\\
&amp;amp;&amp;amp;1\\
&amp;amp;&amp;amp;&amp;amp;1\\
&amp;amp;&amp;amp;&amp;amp;&amp;amp;1\\
&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;1\\
&amp;amp;&amp;amp;&amp;amp;1\\
&amp;amp;&amp;amp;&amp;amp;&amp;amp;1\\
&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;1\\
&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;1\\
&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;1\\
&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;1\\
&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;\ddots
\end{matrix} \right]}_{M}
\underbrace{
\left[\begin{matrix} 
p(t_0)\\
v(t_0)\\
a(t_0)\\
p(t_1)\\
v(t_1)\\
a(t_1)\\
p(t_2)\\
v(t_2)\\
a(t_2)\\
\vdots\\
p(t_m)\\
v(t_m)\\
a(t_m)\\
\end{matrix} \right]}_{3(m+1)\times 1}
\]&lt;/span&gt; 即&lt;span class=&#34;math inline&#34;&gt;\(d=Md&amp;#39;\)&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;向量元素置换&#34;&gt;向量元素置换&lt;/h2&gt;
&lt;p&gt;接着把已知参数 &lt;span class=&#34;math inline&#34;&gt;\(d_F\)&lt;/span&gt;和未知参数&lt;span class=&#34;math inline&#34;&gt;\(d_P\)&lt;/span&gt;重新排列，可以左乘一个置换矩阵&lt;span class=&#34;math inline&#34;&gt;\(C\)&lt;/span&gt;，使得&lt;span class=&#34;math inline&#34;&gt;\(d&amp;#39;=C\left[\begin{matrix}d_F\\d_P\end{matrix}\right]\)&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;转成无约束优化问题&#34;&gt;转成无约束优化问题&lt;/h2&gt;
&lt;p&gt;所以 &lt;span class=&#34;math inline&#34;&gt;\(d=MC\left[\begin{matrix}d_F\\d_P\end{matrix}\right]\)&lt;/span&gt; &lt;span class=&#34;math display&#34;&gt;\[
p=A^{-1}d=\underbrace{A^{-1}MC}_K\left[\begin{matrix}d_F\\d_P\end{matrix}\right] = K\left[\begin{matrix}d_F\\d_P\end{matrix}\right]
\]&lt;/span&gt; 将&lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt;代入优化函数 &lt;span class=&#34;math display&#34;&gt;\[
\min p^TQp\\
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
=\left[\begin{matrix}d_F\\d_P\end{matrix}\right]^T\underbrace{K^TQK}_R\left[\begin{matrix}d_F\\d_P\end{matrix}\right]
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
=\left[\begin{matrix}d_F\\d_P\end{matrix}\right]^T
\left[\begin{matrix}R_{FF} &amp;amp; R_{FP}\\R_{PF}&amp;amp;R_{PP}\end{matrix}\right]
\left[\begin{matrix}d_F\\d_P\end{matrix}\right]
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
=d_F^TR_{FF}d_F+d_F^TR_{FP}d_P+d_P^TR_{PF}d_F+d_P^TR_{PP}d_P
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
=d_F^TR_{FF}d_F+2d_F^TR_{FP}d_P+d_P^TR_{PP}d_P
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;令优化函数&lt;span class=&#34;math inline&#34;&gt;\(mibn\)&lt;/span&gt;对&lt;span class=&#34;math inline&#34;&gt;\(d_P\)&lt;/span&gt;求导，并且令其导数等于0 &lt;span class=&#34;math display&#34;&gt;\[
\rightarrow 2d_F^TR_{FP}+2R_{PP}d_P=0\quad(R_{PP}^T=R_{PP})\\
\rightarrow d^*_p = -R_{PP}^{-1}R_{FP}^Td_F
\]&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;总结&#34;&gt;总结&lt;/h1&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;先确定轨迹阶数(这里是用的5阶，因为A矩阵要为方形阵，所以&lt;span class=&#34;math inline&#34;&gt;\(6m=m(n+1)\rightarrow n=5\)&lt;/span&gt;)，再确定&lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt;中的约束量(p、v、a)，进而根据各段的时间分配求得&lt;span class=&#34;math inline&#34;&gt;\(A_{total}\)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;根据连续性约束构造映射矩阵&lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt;，并确定&lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt;中哪些量是已知的(fix/specified)，哪些量是未知的(free/unspecified)，进而构造置换矩阵&lt;span class=&#34;math inline&#34;&gt;\(C\)&lt;/span&gt;，并求得&lt;span class=&#34;math inline&#34;&gt;\(K=A^{-1}MC\)&lt;/span&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;计算目标函数中的Q矩阵，并计算&lt;span class=&#34;math inline&#34;&gt;\(R=K^TQK\)&lt;/span&gt;，根据已知参数(fix)的长度将&lt;span class=&#34;math inline&#34;&gt;\(R\)&lt;/span&gt;拆分成&lt;span class=&#34;math inline&#34;&gt;\(R_{FF},R_{FR},R_{FR},R_{PP}\)&lt;/span&gt;四小块。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;根据&lt;span class=&#34;math inline&#34;&gt;\(d^*_p = -R_{PP}^{-1}R_{FP}^Td_F\)&lt;/span&gt;计算&lt;span class=&#34;math inline&#34;&gt;\(d^*_p\)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;根据&lt;span class=&#34;math inline&#34;&gt;\(p=K\left[\begin{matrix}d_F\\d_p\end{matrix}\right]\)&lt;/span&gt;计算得到轨迹参数&lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230516211818087.png&#34; style=&#34;zoom:80%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230516211938320.png&#34;  style=&#34;zoom:80%;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;p&gt;Richter C, Bry A, Roy N. Polynomial trajectory planning for aggressive quadrotor flight in dense indoor environments[C]//Robotics Research: The 16th International Symposium ISRR. Springer International Publishing, 2016: 649-666.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/q597967420/article/details/79031791?spm=1001.2014.3001.5502&#34;&gt;&lt;code&gt;Minimum Snap轨迹规划详解（3）闭式求解&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1yT4y1T7Eb?p=12&amp;amp;vd_source=fe8e916be2bd597efffd8dfd95249141&#34;&gt;&lt;code&gt;机器人路径规划、轨迹优化系列课程&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://liujk6525.github.io/%E8%BD%A8%E8%BF%B9%E4%BC%98%E5%8C%96/%E8%BD%A8%E8%BF%B9%E4%BC%98%E5%8C%96-MinimumSnap/</guid>
            <title>轨迹优化-MinimumSnap</title>
            <link>https://liujk6525.github.io/%E8%BD%A8%E8%BF%B9%E4%BC%98%E5%8C%96/%E8%BD%A8%E8%BF%B9%E4%BC%98%E5%8C%96-MinimumSnap/</link>
            <category>Matlab</category>
            <pubDate>Mon, 15 May 2023 14:16:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;基础知识&#34;&gt;基础知识&lt;/h1&gt;
&lt;h2 id=&#34;二次型&#34;&gt;二次型&lt;/h2&gt;
&lt;p&gt;含有n个变量&lt;span class=&#34;math inline&#34;&gt;\(x=x_1,x_2,\cdots,x_{n-1},x_{n}\)&lt;/span&gt;的二次齐次函数 &lt;span class=&#34;math display&#34;&gt;\[
f(x_1,x_2,...,x_n)=a11x_1^2+a22x_2^2+\cdots+a_{nn}x_n^2
\]&lt;/span&gt; 称为二次型。取&lt;span class=&#34;math inline&#34;&gt;\(a_{ij}=a_{ji}\)&lt;/span&gt;，则有&lt;span class=&#34;math inline&#34;&gt;\(2a_{ij}x_ix_j=a_{ij}x_ix_j+a_{ji}x_jx_i\)&lt;/span&gt;，上式可表示为&lt;span class=&#34;math inline&#34;&gt;\(f(x)=\sum_{i,j=1}^{n}a_{ij}x_ix_j\)&lt;/span&gt;。矩阵表示为&lt;span class=&#34;math inline&#34;&gt;\(f=x^TAx\)&lt;/span&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h2 id=&#34;二次规划quadratic-programming-qp&#34;&gt;二次规划(Quadratic Programming, &lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%BA%8C%E6%AC%A1%E8%A7%84%E5%88%92&#34;&gt;&lt;code&gt;QP&lt;/code&gt;&lt;/a&gt;)&lt;/h2&gt;
&lt;p&gt;当目标函数&lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt;为二次型，且约束为线性约束时，该优化问题就是二次规划问题，一般形式表述如下： &lt;span class=&#34;math display&#34;&gt;\[
\underset {x}{min}f(x)=\frac{x^TQx}{2}+q^Tx
\]&lt;/span&gt; &lt;span class=&#34;math display&#34;&gt;\[
s.t.Ax=b
\]&lt;/span&gt; &lt;span class=&#34;math display&#34;&gt;\[
Gx\leq h
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;二次规划是一类凸优化问题，目前有很多商业或者开源的求解器来求解这类问题。&lt;/p&gt;
&lt;h1 id=&#34;多项式轨迹&#34;&gt;多项式轨迹&lt;/h1&gt;
&lt;p&gt;使用路径规划可以得到一系列的路径点，但这些路径点是不带时间&lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt;的，轨迹函数是以自变量为时间&lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt;的函数，一般用&lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;阶多项式表示 &lt;span class=&#34;math display&#34;&gt;\[
p(t)=p_0t^0+p_1t^1+p_2t^2+\cdots+p_nt^n=\sum_{i=0}^{n}p_it^i
\]&lt;/span&gt; 向量形式 &lt;span class=&#34;math display&#34;&gt;\[
p(t)=\left[\begin{matrix}
1&amp;amp;t&amp;amp;\cdots&amp;amp;t^n 
\end{matrix}\right]
\left[\begin{matrix}
p_0\\p_1\\\vdots\\p_n 
\end{matrix}\right]
\]&lt;/span&gt; 其中&lt;span class=&#34;math inline&#34;&gt;\(p_0,p_1,\cdots,p_n\)&lt;/span&gt;是轨迹参数(n次多项式，有n+1个参数)，也是我们的优化参数。&lt;/p&gt;
&lt;p&gt;对轨迹函数进行求导，可以写出它的速度&lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt;、加速度&lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt;、jerk、snap等参数随时间变化的函数 &lt;span class=&#34;math display&#34;&gt;\[
v(t)=p^{1}(t)=\left[\begin{matrix}
0&amp;amp;1&amp;amp;2t&amp;amp;3t^2&amp;amp;4t^3\cdots&amp;amp;\frac{n!}{(n-1)!}t^{n-1} 
\end{matrix}\right]\cdot p
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
a(t)=p^{(2)}(t)=\left[\begin{matrix}
0&amp;amp;0&amp;amp;2&amp;amp;6t&amp;amp;12t^2&amp;amp;\cdots&amp;amp;\frac{n!}{(n-2)!}t^{n-2} 
\end{matrix}\right]\cdot p
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
jerk(t)=p^{(3)}(t)=\left[\begin{matrix}
0&amp;amp;0&amp;amp;0&amp;amp;6&amp;amp;24t&amp;amp;\cdots&amp;amp;\frac{n!}{(n-3)!}t^{n-3} 
\end{matrix}\right]\cdot p
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
snap(t)=p^{(4)}(t)=\left[\begin{matrix}
0&amp;amp;0&amp;amp;0&amp;amp;0&amp;amp;24&amp;amp;\cdots&amp;amp;\frac{n!}{(n-4)!}t^{n-4} 
\end{matrix}\right]\cdot p
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;其中&lt;span class=&#34;math inline&#34;&gt;\(p=\left[\begin{matrix} p_0&amp;amp;p_1&amp;amp;\cdots&amp;amp;p_n \end{matrix}\right]^T\)&lt;/span&gt;，轨迹函数&lt;span class=&#34;math inline&#34;&gt;\(p(t)\)&lt;/span&gt;的导数通式为 &lt;span class=&#34;math display&#34;&gt;\[
p^{(k)}(t)=\left[\begin{matrix}
\overset{k}{\overbrace{0\cdots0}}&amp;amp;\overset{n-k+1}{\overbrace{\frac{(k+0)!}{(0)!}t^{0}\quad
\frac{(k+1)!}{(1)!}t^{1}\quad\cdots\quad
\frac{n!}{(n-k)!}t^{n-k}
}} 
\end{matrix}\right]\cdot p
\]&lt;/span&gt; 我们将一段复杂的轨迹按时间划分成&lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt;段，&lt;span class=&#34;math inline&#34;&gt;\(p_i=[p_{i_0},p_{i_1},\cdots,p_{i_n}]^T\)&lt;/span&gt;为第&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;段轨迹的参数向量。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{equation}
p(t) = 
\begin{cases}
[1,t,t^2,...,t^n]\cdot p_1~~~t_0\leq t&amp;lt;t_1\\
[1,t,t^2,...,t^n]\cdot p_2~~~t_1\leq t&amp;lt;t_2\\
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\vdots\\
[1,t,t^2,...,t^n]\cdot p_m~~~t_{m-1}\leq t&amp;lt;t_m\\
\end{cases}
\end{equation}
\]&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;minimum-snap轨迹规划&#34;&gt;Minimum Snap轨迹规划&lt;/h1&gt;
&lt;p&gt;轨迹规划的目的：求轨迹的多项式参数&lt;span class=&#34;math inline&#34;&gt;\(p_1,\cdots,p_m\)&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;约束条件&#34;&gt;约束条件&lt;/h2&gt;
&lt;p&gt;基本要求：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;两段轨迹之间连续&lt;/li&gt;
&lt;li&gt;轨迹经过固定点&lt;/li&gt;
&lt;li&gt;轨迹无碰撞&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;高级要求： 轨迹最顺滑、能量最优等&lt;/p&gt;
&lt;h2 id=&#34;构建优化函数&#34;&gt;构建优化函数&lt;/h2&gt;
&lt;p&gt;通常满足约束条件的轨迹有无数条，而实际问题中，往往只需要特定的一条轨迹，所以还需要构建一个最优函数，方便在可行的轨迹中找出最优的轨迹。&lt;/p&gt;
&lt;p&gt;这是一个约束优化问题，形如： &lt;span class=&#34;math display&#34;&gt;\[
\min f(p)
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
s.t.~~A_{eq}p = b_{eq},
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
A_{ieq}p \leq b_{ieq}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Minimum Snap&lt;/code&gt;顾名思义，最小化目标函数是&lt;span class=&#34;math inline&#34;&gt;\(Snap\)&lt;/span&gt;，当然也可以最小化Acceleration(加速度)或者Jerk，一般不会最小化速度。 &lt;span class=&#34;math display&#34;&gt;\[
minimum~snap:~\min f(p)=\min (p^{(4)}(t))^2
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
minimum~jerk:~\min f(p)=\min (p^{(3)}(t))^2
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
minimum~a:~\min f(p)=\min (p^{(2)}(t))^2 \\
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Minimum Snap的优化函数为&lt;/strong&gt; &lt;span class=&#34;math display&#34;&gt;\[
\min \int _0^T(p^{(4)}(t))^2 {\rm d}t
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
=\min \sum_{i=1}^m \int _{t_{i-1}}^{t_i}(p^{(4)}(t))^2 {\rm d}t
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
=\min \sum_{i=1}^m \int _{t_{i-1}}^{t_i}   ([0,0,0,0,24,\cdots,\frac{n!}{(n-4!)}t^{n-4}]\cdot p)^T[0,0,0,0,24,\cdots,\frac{n!}{(n-4!)}t^{n-4}]\cdot p~{\rm d}t
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
=\min \sum_{i=1}^m p^T\int _{t_{i-1}}^{t_i}[0,0,0,0,24,\cdots,\frac{n!}{(n-4!)}t^{n-4}]^T[0,0,0,0,24,\cdots,\frac{n!}{(n-4!)}t^{n-4}]~{\rm d}t~p
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
=\min \sum_{i=1}^m p^TQ_ip
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
=\min  p^TQp
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
Q_i = \int _{t_{i-1}}^{t_i}[0,0,0,0,24,\cdots,\frac{n!}{(n-4!)}t^{n-4}]^T[0,0,0,0,24,\cdots,\frac{n!}{(n-4!)}t^{n-4}]~{\rm d}t
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
=\left[\begin{matrix}
0_{4\times 4} &amp;amp; 0_{4\times (n-3)}\\
0_{(n-3) \times 4} &amp;amp; \frac{r!}{(r-4)!}\frac{c!}{(c-4)!}\frac{1}{(r-4)+(c-4)+1}(t_{i}^{(r+c-7)}-t_{i-1}^{(r+c-7)})
\end{matrix}\right]
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：r,c为矩阵的行索引和列索引， 索引从0开始，即第一行r=0。这个Q&lt;sub&gt;i&lt;/sub&gt;矩阵计算可太厉害了&lt;/strong&gt; &lt;span class=&#34;math display&#34;&gt;\[
Q = \left[\begin{matrix}
        Q_1 &amp;amp;&amp;amp;&amp;amp;\\
        &amp;amp;Q_2&amp;amp;&amp;amp;\\
        &amp;amp;&amp;amp;\ddots &amp;amp;\\
        &amp;amp;&amp;amp;&amp;amp;Q_m
    \end{matrix}\right]
\]&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;构建等式约束方程&#34;&gt;构建等式约束方程&lt;/h2&gt;
&lt;p&gt;1、设定某一个点的位置、速度、加速度为一个特定的值,可以构成一个等式约束。&lt;/p&gt;
&lt;p&gt;位置约束： &lt;span class=&#34;math inline&#34;&gt;\([1,t_0,t_0^2,\cdots,t_0^n,\underbrace{0\cdots0}_{(m-1)(n+1)}]\cdot p = p_0\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;速度约束： &lt;span class=&#34;math inline&#34;&gt;\([0,1,2t_0,\cdots,nt_0^{n-1},\underbrace{0\cdots0}_{(m-1)(n+1)}]\cdot p = v_0\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;加速度约束：&lt;span class=&#34;math inline&#34;&gt;\([0,0,2,\cdots,n(n-1)t_0^{n-2},\underbrace{0\cdots0}_{(m-1)(n+1)}]\cdot p = a_0\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2、相邻段之间的位置、速度、加速度连续可以构成一个等式约束。对于有m+1个路径点的轨迹，一共有m段多项式轨迹，&lt;/p&gt;
&lt;p&gt;连续性约束：&lt;span class=&#34;math inline&#34;&gt;\([\underbrace{0\cdots0}_{(i-1)(n+1)},1,t_i,t_i^2,\cdots,t_i^n,-1,-t_i,-t_i^2,\cdots,-t_i^n,\underbrace{0\cdots0}_{(m-i-1)(n+1)}]\cdot p=0\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;3、合并所有等式约束， &lt;span class=&#34;math display&#34;&gt;\[
\begin{equation}
\left[\begin{matrix}
1,t_0,t_0^2,\cdots,t_0^n,\underbrace{0\cdots0}_{(m-1)(n+1)}\\
0,1,2t_0,\cdots,nt_0^{n-1},\underbrace{0\cdots0}_{(m-1)(n+1)}\\
0,0,2,\cdots,n(n-1)t_0^{n-2},\underbrace{0\cdots0}_{(m-1)(n+1)}\\
\vdots\\
\underbrace{0\cdots0}_{(i-1)(n+1)} ,1,t_i,t_i^2,\cdots,t_i^n,\underbrace{0\cdots0}_{(m-i)(n+1)}\\
\vdots\\
\underbrace{0\cdots0}_{(m-1)(n+1)},1,t_m,t_m^2,\cdots,t_m^n\\
\underbrace{0\cdots0}_{(m-1)(n+1)},0,1,2t_m,\cdots,nt_m^{n-1}\\
\underbrace{0\cdots0}_{(m-1)(n+1)},0,0,2,\cdots,n(n-1)t_m^{n-2}\\
\underbrace{0\cdots0}_{(i-1)(n+1)} ,1,t_i,t_i^2,\cdots,t_i^n,-1,-t_i,-t_i^2,\cdots,-t_i^n,\underbrace{0\cdots0}_{(m-i-1)(n+1)}\\
\underbrace{0\cdots0}_{(i-1)(n+1)} ,0,1,2t_i,\cdots,nt_i^{n-1},-0,-1,-2t_i,\cdots,-nt_i^{n-1},\underbrace{0\cdots0}_{(m-i-1)(n+1)}\\
\underbrace{0\cdots0}_{(i-1)(n+1)} ,0,0,2,\cdots,\frac{n!}{(n-2)!}t_i^{n-2},-0,-0,-2,\cdots,-\frac{n!}{(n-2)!}t_i^{n-2},\underbrace{0\cdots0}_{(m-i-1)(n+1)}\\
\end{matrix}\right]_{(4m+2)\times (n+1)m}
\end{equation}p
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
=
\left[\begin{matrix}
p_0\\
v_0\\
a_0\\
\vdots\\
p_i\\
\vdots\\
p_m\\
v_m\\
a_m\\
0\\
\vdots\\
0
\end{matrix}\right]
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;等式约束个数=3{起点p&lt;sub&gt;0&lt;/sub&gt;、v&lt;sub&gt;0&lt;/sub&gt;、a&lt;sub&gt;0&lt;/sub&gt;}+m-1{中间点的p&lt;sub&gt;i&lt;/sub&gt;}+3{目标点p&lt;sub&gt;m&lt;/sub&gt;、v&lt;sub&gt;m&lt;/sub&gt;、a&lt;sub&gt;m&lt;/sub&gt;}+3(m-1){中间点p&lt;sub&gt;i&lt;/sub&gt;、v&lt;sub&gt;i&lt;/sub&gt;、a&lt;sub&gt;i&lt;/sub&gt;连续=0}=4m+2&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;代码实现&#34;&gt;代码实现&lt;/h1&gt;
&lt;p&gt;生成x、y两个维度的轨迹，合并后如下图所示。包含起始终止共7个点，用6段多项式轨迹来描述，中间点也就是多项式轨迹之间的交界点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230515212657627.png&#34;  style=&#34;zoom:80%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230515212839998.png&#34;  style=&#34;zoom:80%;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;p&gt;Mellinger D, Kumar V. Minimum snap trajectory generation and control for quadrotors[C]//2011 IEEE international conference on robotics and automation. IEEE, 2011: 2520-2525.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1yT4y1T7Eb?p=10&amp;amp;vd_source=fe8e916be2bd597efffd8dfd95249141&#34;&gt;&lt;code&gt;机器人路径规划、轨迹优化系列课程&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/q597967420/article/details/76099491&#34;&gt;&lt;code&gt;Minimum Snap轨迹规划详解（1）轨迹规划入门&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://liujk6525.github.io/%E8%B7%AF%E5%BE%84%E8%A7%84%E5%88%92/%E5%9F%BA%E4%BA%8E%E6%99%BA%E8%83%BD%E7%AE%97%E6%B3%95%E7%9A%84%E8%B7%AF%E5%BE%84%E8%A7%84%E5%88%92/</guid>
            <title>基于智能算法的路径规划</title>
            <link>https://liujk6525.github.io/%E8%B7%AF%E5%BE%84%E8%A7%84%E5%88%92/%E5%9F%BA%E4%BA%8E%E6%99%BA%E8%83%BD%E7%AE%97%E6%B3%95%E7%9A%84%E8%B7%AF%E5%BE%84%E8%A7%84%E5%88%92/</link>
            <category>Matlab</category>
            <pubDate>Mon, 15 May 2023 08:38:42 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;基础知识&#34;&gt;基础知识&lt;/h1&gt;
&lt;h2 id=&#34;遗传算法&#34;&gt;遗传算法&lt;/h2&gt;
&lt;p&gt;遗传算法(Genetic Algorithm,&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95&#34;&gt;&lt;code&gt;GA&lt;/code&gt;&lt;/a&gt;)是一种智能优化算法，主要用来解决优化问题，其主要步骤为种群初始化、适应度函数计算、选择、交叉和变异。应用于移动机器人路径规划时其主要步骤相同。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h2 id=&#34;算法步骤&#34;&gt;算法步骤&lt;/h2&gt;
&lt;p&gt;选择初始生命种群&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;每行选择一个栅格&lt;/li&gt;
&lt;li&gt;判断相邻栅格是否连续&lt;/li&gt;
&lt;li&gt;不连续时选择栅格进行插入，直到连续&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;循环&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;评价种群中的个体适应度fitness&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;以比例原则(分数高的挑中几率也较高)选择产生下一个种群(轮盘法、竞争法及等级轮盘法)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;选择&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;是按照轮盘法来选择的个体 &lt;span class=&#34;math display&#34;&gt;\[
d =\sum_{i=1}^{end-1}{\sqrt{(x_{i+1}-x{i})^{2}+(y_{i+1}-y_{i})^{2}}}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
fit_1=1/d
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
fit_2=acrccos(\frac{(b^2+c^2-a^2)}{2bc})
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
fit=fit_1+fit_2
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
p_i=\frac{fit_i}{\sum_{i=1}^{end}fit_i}
\]&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;改变该种群(选择、交叉和变异)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;交叉&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如下图所示，当两个个体{0|6|7|13|19|24}和{0|1|2|3|8|13|18|24}在栅格13处交叉，经过交叉操作后会生成新的个体{0|6|7|13|18|24}和{0|1|2|3|8|13|19|24}&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230515103232016.png&#34;  style=&#34;zoom:80%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;变异&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如下图所示，当个体{0|1|2|3|8|13|18|24}经过变异操作后会随机生成新的个体{0|1|7|13|18|24}&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230515103809856.png&#34;  style=&#34;zoom:80%;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;直到停止循环的条件满足&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;代码实现&#34;&gt;代码实现&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230515104419609.png&#34;  style=&#34;zoom:80%;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1yT4y1T7Eb?p=8&amp;amp;vd_source=fe8e916be2bd597efffd8dfd95249141&#34;&gt;&lt;code&gt;机器人路径规划、轨迹优化课程&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://liujk6525.github.io/TSP%E9%97%AE%E9%A2%98/%E5%9F%BA%E4%BA%8E%E6%B7%B7%E5%90%88%E7%B2%92%E5%AD%90%E7%BE%A4%E7%AE%97%E6%B3%95%E7%9A%84TSP%E7%AE%97%E6%B3%95/</guid>
            <title>基于混合粒子群算法的TSP算法</title>
            <link>https://liujk6525.github.io/TSP%E9%97%AE%E9%A2%98/%E5%9F%BA%E4%BA%8E%E6%B7%B7%E5%90%88%E7%B2%92%E5%AD%90%E7%BE%A4%E7%AE%97%E6%B3%95%E7%9A%84TSP%E7%AE%97%E6%B3%95/</link>
            <category>Matlab</category>
            <category>路径规划</category>
            <pubDate>Wed, 10 May 2023 21:10:59 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;理论基础&#34;&gt;理论基础&lt;/h1&gt;
&lt;h2 id=&#34;基本粒子群算法&#34;&gt;基本粒子群算法&lt;/h2&gt;
&lt;p&gt;粒子群算法，也称粒子群优化算法或鸟群觅食算法（Particle Swarm Optimization，PSO），它通过追随当前搜索到的最优值来寻找全局最优。这种算法以其实现容易、精度高、收敛快等优点引起了学术界的重视，并且在解决实际问题中展示了其优越性。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h3 id=&#34;基本原理&#34;&gt;基本原理&lt;/h3&gt;
&lt;p&gt;PSO中，每个优化问题的解都是搜索空间中的一只鸟。我们称之为“粒子”。所有的粒子都有一个由被优化的函数决定的适应值(fitness value)，每个粒子还有一个速度决定他们飞翔的方向和距离。然后粒子们就追随当前的最优粒子在解空间中搜索。&lt;/p&gt;
&lt;p&gt;粒子位置的更新方式如下所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230511062229130.png&#34; alt=&#34;粒子位置额更新方式&#34; style=&#34;zoom: 67%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(PSO\)&lt;/span&gt;初始化为一群随机粒子(随机解)。然后通过迭代找到最优解。在每一次迭代中，粒子通过跟踪两个“极值”来更新自己。第一个就是粒子本身所找到的最优解，这个解叫做个体极值P&lt;sub&gt;best&lt;/sub&gt;。另一个极值是整个种群目前找到的最优解，这个极值是全局极值g&lt;sub&gt;best&lt;/sub&gt;。另外也可以不用整个种群而只是用其中一部分作为粒子的邻居，那么在所有邻居中的极值就是局部极值。&lt;/p&gt;
&lt;p&gt;假设在一个D维的目标搜索空间中，有N个粒子组成一个种群，其中&lt;/p&gt;
&lt;p&gt;第i个粒子为一个D维的向量 &lt;span class=&#34;math display&#34;&gt;\[
X_i = (x_{i1},x_{i2},x_{i3},...x_{iD}),\quad i=1,2,3,...,N
\]&lt;/span&gt; 第i个粒子的“飞行”速度也是一个D维的向量 &lt;span class=&#34;math display&#34;&gt;\[
V_i = (v_{i1},v_{i2},v_{i3},...v_{iD}),\quad i=1,2,3,...,N
\]&lt;/span&gt; 第i个粒子迄今为止搜索到的最优位置称为个体极值 &lt;span class=&#34;math display&#34;&gt;\[
P_{best}=(p_{i1},p_{i2},p_{i3},...p_{iD}),\quad i=1,2,3,...,N
\]&lt;/span&gt; 整个粒子群迄今为止搜索到的最优位置称为全局极值 &lt;span class=&#34;math display&#34;&gt;\[
g_{best}=(p_{g1},p_{g2},p_{g3},...p_{gD})
\]&lt;/span&gt; 在找到这两个最优值时，粒子根据如下公式更新自己的速度和位置 &lt;span class=&#34;math display&#34;&gt;\[
v_{id}=w*v_{id}+c_1r_1(p_{id}-x_{id})+c_2r_2(p_{gd}-x_{id})\\
x_{id}=x_{id}+v_{id}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;式中，w为惯性权重(inertia weight)，c&lt;sub&gt;1&lt;/sub&gt;,c&lt;sub&gt;2&lt;/sub&gt;为学习因子，也称为加速常量(acceleration constants)，r&lt;sub&gt;1&lt;/sub&gt;r&lt;sub&gt;2&lt;/sub&gt;为[0,1]范围内的均匀随机数&lt;/p&gt;
&lt;p&gt;w*v&lt;sub&gt;id&lt;/sub&gt; 为“惯性”或者”动量“部分，反映了粒子的运动习惯，代表粒子有维持自己先前速度的趋势。&lt;/p&gt;
&lt;p&gt;c&lt;sub&gt;1&lt;/sub&gt;r&lt;sub&gt;1&lt;/sub&gt;(p&lt;sub&gt;id&lt;/sub&gt;-x&lt;sub&gt;id&lt;/sub&gt;)为“认知”部分，反映了粒子对自身历史经验的记忆或回忆，代表了粒子有向自身历史最佳位置逼近的趋势。&lt;/p&gt;
&lt;p&gt;c&lt;sub&gt;2&lt;/sub&gt;r&lt;sub&gt;2&lt;/sub&gt;(p&lt;sub&gt;gd&lt;/sub&gt;-x&lt;sub&gt;id&lt;/sub&gt;)为“社会”部分，反映了粒子间协同合作与知识共享的群体历史经验，代表了粒子有向群体或邻域历史最佳位置逼近的趋势。&lt;/p&gt;
&lt;h3 id=&#34;pso算法的流程&#34;&gt;PSO算法的流程&lt;/h3&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;初始化粒子群，包括群体规模N，每个粒子的位置x&lt;sub&gt;i&lt;/sub&gt;和速度v&lt;sub&gt;i&lt;/sub&gt;；&lt;/li&gt;
&lt;li&gt;计算每个粒子的适应度Fitness(i)；&lt;/li&gt;
&lt;li&gt;对每个粒子，将其适应值Fitness(i)与其经过的最优值P&lt;sub&gt;best&lt;/sub&gt;(i)作比较，如果较好，则将其替换掉原来的P&lt;sub&gt;best&lt;/sub&gt;(i)；&lt;/li&gt;
&lt;li&gt;对每个粒子，将其适应值Fitness(i)与其经过的全局最优值g&lt;sub&gt;best&lt;/sub&gt;(i)作比较，如果较好，则将其替换掉原来的g&lt;sub&gt;best&lt;/sub&gt;(i)；&lt;/li&gt;
&lt;li&gt;根据公式更新粒子的速度v&lt;sub&gt;i&lt;/sub&gt;和位置x&lt;sub&gt;i&lt;/sub&gt;；&lt;/li&gt;
&lt;li&gt;如果满足结束条件退出，否则返回第2步。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230511055154081.png&#34; alt=&#34;PSO算法流程图&#34; style=&#34;zoom:80%;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;混合粒子群算法&#34;&gt;混合粒子群算法&lt;/h2&gt;
&lt;p&gt;标准粒子群算法通过追随个体极值和群体极值完成极值寻优，虽然操作简单，且能够快速收敛，但是随着迭代次数的不断增加，在种群收敛集中的同时，各粒子也越来越相似，可能在局部最优解周边无法跳出。&lt;/p&gt;
&lt;p&gt;混合粒子群算法摒弃了传统粒子群算法中的通过跟踪极值来更新粒子位置的方法，而是引入了&lt;code&gt;遗传算法&lt;/code&gt;中的交叉和变异操作，通过粒子同个体极值和群体极值的交叉以及粒子自身变异的方式来搜索最优解。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230511070402553.png&#34; alt=&#34;混合粒子群算法流程图&#34; style=&#34;zoom:80%;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;问题描述&#34;&gt;问题描述&lt;/h1&gt;
&lt;p&gt;TSP问题，具体描述参考&lt;a href=&#34;https://liujk6525.github.io/posts/15650/&#34;&gt;&lt;code&gt;基于遗传算法的TSP算法&lt;/code&gt;&lt;/a&gt;，这边不在赘叙。&lt;/p&gt;
&lt;h1 id=&#34;代码实现&#34;&gt;代码实现&lt;/h1&gt;
&lt;h2 id=&#34;适应值变化&#34;&gt;适应值变化&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230511154328042.png&#34; alt=&#34;适应值变化图&#34; style=&#34;zoom:80%;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;苹果位置图&#34;&gt;苹果位置图&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230511160009530.png&#34; alt=&#34;苹果分布图&#34; style=&#34;zoom:80%;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;路径规划图&#34;&gt;路径规划图&lt;/h2&gt;
&lt;p&gt;​ &lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230511154532035.png&#34; alt=&#34;路径规划图&#34; style=&#34;zoom: 80%;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;最优解&#34;&gt;最优解&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230511155618486.png&#34; alt=&#34;最优解&#34; style=&#34;zoom:80%;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;p&gt;[1]史峰. MATLAB智能算法30个案例分析[M]. 北京航空航天大学出版社, 2011.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://liujk6525.github.io/TSP%E9%97%AE%E9%A2%98/%E5%9F%BA%E4%BA%8E%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E7%9A%84TSP%E7%AE%97%E6%B3%95/</guid>
            <title>基于遗传算法的TSP算法</title>
            <link>https://liujk6525.github.io/TSP%E9%97%AE%E9%A2%98/%E5%9F%BA%E4%BA%8E%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E7%9A%84TSP%E7%AE%97%E6%B3%95/</link>
            <category>Matlab</category>
            <category>路径规划</category>
            <pubDate>Sun, 07 May 2023 16:48:51 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;理论基础&#34;&gt;理论基础&lt;/h2&gt;
&lt;h3 id=&#34;遗传算法&#34;&gt;遗传算法&lt;/h3&gt;
&lt;p&gt;遗传算法（Genetic Algorithm, GA）起源于对生物系统所进行的计算机模拟研究。它是模仿自然界生物进化机制发展起来的随机全局搜索和优化方法，借鉴了达尔文的进化论和孟德尔的遗传学说。其本质是一种高效、并行、全局搜索的方法。 &lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;tsp问题&#34;&gt;TSP问题&lt;/h3&gt;
&lt;p&gt;TSP (traveling salesman problem,旅行商问题) 是典型的NP完全问题，即其最坏情况下的时间复杂度随着问题规模的增大按指数方式增长，到目前为止还未找到一个多项式时间的有效算法。&lt;/p&gt;
&lt;p&gt;​ TSP问题可描述为：已知n个城市相互之间的距离，某一旅行商从某个城市出发访问每个城市一次且仅一次，最后回到出发城市，如何安排才使其所走路线最短。简言之，就是寻找一条最短的遍历n个城市的路径，或者说搜索自然子集X={1,2,….n} ( X的元素表示对n个 城市的编号 ) 的一个排列π(X)={V&lt;sub&gt;1&lt;/sub&gt;,V&lt;sub&gt;2&lt;/sub&gt;,…,V&lt;sub&gt;n&lt;/sub&gt;},使 &lt;span class=&#34;math display&#34;&gt;\[
T_d = \sum_{i=1}^{n-1}{d(V_i,V_(i+1))}+d(V_n,V_1)
\]&lt;/span&gt; 取最小值，其中 &lt;span class=&#34;math display&#34;&gt;\[
d(V_i,V_i+1)
\]&lt;/span&gt; 表示城市V&lt;sub&gt;i&lt;/sub&gt;到城市V&lt;sub&gt;i+1&lt;/sub&gt;的距离。 ## 问题描述&lt;/p&gt;
&lt;p&gt;通过搭建的双目视觉检测系统将苹果的三维坐标获取到后，需要对其进行路径规划，即寻找出一条最短的遍历所有目标苹果的路径&lt;/p&gt;
&lt;p&gt;表1 14个苹果的位置坐标&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;目标苹果编号&lt;/th&gt;
&lt;th&gt;X坐标&lt;/th&gt;
&lt;th&gt;Y坐标&lt;/th&gt;
&lt;th&gt;Z坐标&lt;/th&gt;
&lt;th&gt;目标苹果编号&lt;/th&gt;
&lt;th&gt;X坐标&lt;/th&gt;
&lt;th&gt;Y坐标&lt;/th&gt;
&lt;th&gt;Z坐标&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;16.47&lt;/td&gt;
&lt;td&gt;96.10&lt;/td&gt;
&lt;td&gt;45.25&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;17.20&lt;/td&gt;
&lt;td&gt;96.29&lt;/td&gt;
&lt;td&gt;48.62&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;16.47&lt;/td&gt;
&lt;td&gt;94.44&lt;/td&gt;
&lt;td&gt;44.25&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;16.30&lt;/td&gt;
&lt;td&gt;97.38,&lt;/td&gt;
&lt;td&gt;42.98&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;20.09&lt;/td&gt;
&lt;td&gt;92.54&lt;/td&gt;
&lt;td&gt;45.63&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;14.05&lt;/td&gt;
&lt;td&gt;98.12,&lt;/td&gt;
&lt;td&gt;41.86&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;22.39&lt;/td&gt;
&lt;td&gt;93.37&lt;/td&gt;
&lt;td&gt;47.21&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;16.53&lt;/td&gt;
&lt;td&gt;97.38&lt;/td&gt;
&lt;td&gt;,48.52&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;25.23&lt;/td&gt;
&lt;td&gt;97.24&lt;/td&gt;
&lt;td&gt;44.29&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;21.52&lt;/td&gt;
&lt;td&gt;95.59&lt;/td&gt;
&lt;td&gt;46.25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;22.00&lt;/td&gt;
&lt;td&gt;96.05&lt;/td&gt;
&lt;td&gt;48.45&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;19.41&lt;/td&gt;
&lt;td&gt;97.13&lt;/td&gt;
&lt;td&gt;45.71&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;20.47&lt;/td&gt;
&lt;td&gt;97.02&lt;/td&gt;
&lt;td&gt;47.56&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;20.09&lt;/td&gt;
&lt;td&gt;92.55&lt;/td&gt;
&lt;td&gt;44.44&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;解决思路及步骤&#34;&gt;解决思路及步骤&lt;/h2&gt;
&lt;p&gt;遗传算法TSP问题的流程图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230510164303229.png&#34;  style=&#34;zoom:80%;&#34; /&gt;&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;编码&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​ 对于n个苹果的TSP问题，染色体分为n段，例如检测到10个苹果{1,2,3,4,5,6,7,8,9,10}，则|1|0|2|4|5|6|8|7|9|3就是一个合法的染色体。&lt;/p&gt;
&lt;ol start=&#34;2&#34; type=&#34;1&#34;&gt;
&lt;li&gt;种群初始化&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​ 编码后，需要初始化一个种群作为起始解，初始化种群的数目一般根据经验得到，种群的数量按苹果的规模确定，参考的取值为50~200。&lt;/p&gt;
&lt;ol start=&#34;3&#34; type=&#34;1&#34;&gt;
&lt;li&gt;适应度函数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​ 设k&lt;sub&gt;1&lt;/sub&gt;|k&lt;sub&gt;2&lt;/sub&gt;|k&lt;sub&gt;i&lt;/sub&gt;|…|k&lt;sub&gt;n&lt;/sub&gt;|为一个采用整数编码的染色体，d(k&lt;sub&gt;i&lt;/sub&gt;,k&lt;sub&gt;j&lt;/sub&gt;)为苹果k&lt;sub&gt;i&lt;/sub&gt;到苹果k&lt;sub&gt;j&lt;/sub&gt;的欧式距离，则该个体的适应度为 &lt;span class=&#34;math display&#34;&gt;\[
fitness = \frac{1}{\sum_{i=1}^{n-1}{d(K_i,K_(i+1))}+d(K_n,K_1)}
\]&lt;/span&gt; 即适应度函数恰好遍历了n个苹果，再回到第一个苹果的距离的倒数。优化的目标就是选择适应度函数值尽可能大的染色体。&lt;/p&gt;
&lt;ol start=&#34;4&#34; type=&#34;1&#34;&gt;
&lt;li&gt;选择操作&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​ 从旧群体中以一定概率选择个体到新群体中，个体被选中的概率跟适应度值有关，个体适应度值越大，被选中的概率越大。&lt;/p&gt;
&lt;ol start=&#34;5&#34; type=&#34;1&#34;&gt;
&lt;li&gt;交又操作 部分映射杂交，确定交叉操作的父代，将父代样本两两分组，每组重复以下过程。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​ 假定城市数为10)，产生两个[1,10]区间内的随机整数和r&lt;sub&gt;1&lt;/sub&gt;和r&lt;sub&gt;2&lt;/sub&gt;，确定两个位置，对两位置的中间数据进行交叉，如r&lt;sub&gt;1&lt;/sub&gt;=4,r&lt;sub&gt;2&lt;/sub&gt;=7 (其实就是把四和七中间的位置给互换，包括四七位置本身)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;1&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;2&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;3&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;4&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;5&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;6&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;7&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;8&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;9&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;10&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;9&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;10&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;10&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;6&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;交叉后为&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;1&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;2&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;3&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;4&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;5&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;6&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;7&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;8&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;9&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;10&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;9&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;em&gt;1&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;em&gt;6&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;em&gt;3&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;em&gt;8&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;10&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;*&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;*&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;10&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;*&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;em&gt;3&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;em&gt;7&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;em&gt;4&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;em&gt;2&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;*&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;从表格中可以看到：同一个个体中有重复的编号，处理办法就是把不重复的数据保留，有重复的数据采用部分映射的方法消除冲突。就是利用四七段的映射关系来确定，比如第一个个体的九位置，它本来的数据是8的，现在这个数据8跑到六位置了，而原来的六位置的数据是4，所以现在的九位置变成4，最后在看这个个体缺少哪个数据，给补上就是了。&lt;/p&gt;
&lt;ol start=&#34;6&#34; type=&#34;1&#34;&gt;
&lt;li&gt;变异操作&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​ 随机选取两个点，将其对换位置。&lt;/p&gt;
&lt;p&gt;​ 产生两个[1,10]范围内的随机整数r&lt;sub&gt;1&lt;/sub&gt;和r&lt;sub&gt;2&lt;/sub&gt;，确定两个位置，将其对换位置，如r&lt;sub&gt;1&lt;/sub&gt;=4,r&lt;sub&gt;2&lt;/sub&gt;=7&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;1&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;2&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;3&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;4&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;5&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;6&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;7&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;8&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;9&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;10&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;9&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;10&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;变异后为&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;th&gt;8&lt;/th&gt;
&lt;th&gt;9&lt;/th&gt;
&lt;th&gt;10&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;em&gt;2&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;em&gt;3&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol start=&#34;7&#34; type=&#34;1&#34;&gt;
&lt;li&gt;逆转操作&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​ 为改善遗传算法的局部搜索能力。这里的“进化”是指逆转算子的单方向性，即只有经逆转后，适应度值有提高的才接受下来，否则逆转无效。&lt;/p&gt;
&lt;p&gt;​ 产生两个[1,10]区间内的随机整数片r&lt;sub&gt;1&lt;/sub&gt;和r&lt;sub&gt;2&lt;/sub&gt;，确定两个位置，将其对换位置，如r&lt;sub&gt;1&lt;/sub&gt;=4，r&lt;sub&gt;2&lt;/sub&gt;=7&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;1&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;2&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;3&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;4&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;5&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;6&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;7&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;8&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;9&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;10&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;9&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;10&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;逆转后&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;th&gt;8&lt;/th&gt;
&lt;th&gt;9&lt;/th&gt;
&lt;th&gt;10&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;em&gt;4&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;7&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;3&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;​ 对每个个体进行交叉变异，然后代人适应度函数进行评估，选择出适应值大的个体进行下一代的交叉和变异以及逆转操作。&lt;/p&gt;
&lt;p&gt;循环操作：判断是否满足设定的最大遗传代数,不满足则跳入适应度值的计算；否则，结束遗传操作。&lt;/p&gt;
&lt;h2 id=&#34;代码实现&#34;&gt;代码实现&lt;/h2&gt;
&lt;h3 id=&#34;适应值变化&#34;&gt;适应值变化&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230510183559745.png&#34;  style=&#34;zoom:80%;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;苹果位置图&#34;&gt;苹果位置图&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230510185112226.png&#34;  style=&#34;zoom:80%;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;路径规划图&#34;&gt;路径规划图&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230511155819983.png&#34;  style=&#34;zoom:80%;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;最优解&#34;&gt;最优解&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230511155901209.png&#34;  style=&#34;zoom:80%;&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献&lt;/h2&gt;
&lt;p&gt;[1]史峰. MATLAB智能算法30个案例分析[M]. 北京航空航天大学出版社, 2011.&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
