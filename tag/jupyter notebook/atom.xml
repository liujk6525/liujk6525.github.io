<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://liujk6525.github.io</id>
    <title>你不是单打独斗 • Posts by &#34;jupyter notebook&#34; tag</title>
    <link href="https://liujk6525.github.io" />
    <updated>2023-06-07T01:32:09.000Z</updated>
    <category term="Anaconda" />
    <category term="Hexo" />
    <category term="Jetson Nano" />
    <category term="Yolo-v5" />
    <category term="JupyterLab" />
    <category term="Python" />
    <category term="Jupyter Notebook" />
    <category term="Git" />
    <category term="Typora" />
    <category term="Matlab" />
    <category term="路径规划" />
    <category term="python" />
    <category term="ssd.pytorch" />
    <category term="Yolov5" />
    <entry>
        <id>https://liujk6525.github.io/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E9%9B%86%E6%88%90%E5%AD%A6%E4%B9%A0/</id>
        <title>集成学习</title>
        <link rel="alternate" href="https://liujk6525.github.io/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E9%9B%86%E6%88%90%E5%AD%A6%E4%B9%A0/"/>
        <content type="html">
</content>
        <category term="Python" />
        <category term="Jupyter Notebook" />
        <updated>2023-06-07T01:32:09.000Z</updated>
    </entry>
    <entry>
        <id>https://liujk6525.github.io/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%86%B3%E7%AD%96%E6%A0%91/</id>
        <title>决策树</title>
        <link rel="alternate" href="https://liujk6525.github.io/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%86%B3%E7%AD%96%E6%A0%91/"/>
        <content type="html">&lt;h1 id=&#34;决策树-decision-tree&#34;&gt;&lt;a href=&#34;https://baike.baidu.com/item/%E5%86%B3%E7%AD%96%E6%A0%91/10377049?fr=aladdin&#34;&gt;决策树 （Decision Tree）&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;比较适合分析离散数据。 如果是连续数据要先转成离散数据再做分析&lt;/p&gt;
&lt;h2 id=&#34;熵entropy&#34;&gt;熵（entropy）&lt;/h2&gt;
&lt;p&gt;1948年，香浓提出了“&lt;a href=&#34;https://baike.baidu.com/item/%E4%BF%A1%E6%81%AF%E7%86%B5/7302318?fr=aladdin&#34;&gt;信息熵&lt;/a&gt;”的概念，&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一条信息的信息量大小和它的不确定性有直接的关系， 要搞清楚一件非常非常不确定的事情，或者是一无所知的事情，需要了解大量信息。—&amp;gt;信息量的度量就等于不确定性的多少。&lt;/strong&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;信息熵公式： &lt;span class=&#34;math display&#34;&gt;\[
H[x]=-\sum_{x}p(x)logp(x)
\]&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;id3算法&#34;&gt;&lt;a href=&#34;https://baike.baidu.com/item/ID3%E7%AE%97%E6%B3%95/5522381?fr=aladdin&#34;&gt;ID3算法&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;决策树会选择最大化信息增益来对结点进行划分。&lt;/p&gt;
&lt;p&gt;信息增益（Information Gain）计算： &lt;span class=&#34;math display&#34;&gt;\[
Info(D)=-\sum_{i=1}^{m}p_ilog(p_i)
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
Info_A(D)=-\sum_{j=1}^{v}\frac{|D_j|}{|D|}\times Info(D_j)
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
Gain(A)=Info(D)-Info_A(D)
\]&lt;/span&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;RID&lt;/th&gt;
&lt;th&gt;age&lt;/th&gt;
&lt;th&gt;income&lt;/th&gt;
&lt;th&gt;student&lt;/th&gt;
&lt;th&gt;credit_rating&lt;/th&gt;
&lt;th&gt;class_buys_computer&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;youth&lt;/td&gt;
&lt;td&gt;high&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;fair&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;youth&lt;/td&gt;
&lt;td&gt;high&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;excellent&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;middle_aged&lt;/td&gt;
&lt;td&gt;high&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;fair&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;senior&lt;/td&gt;
&lt;td&gt;medium&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;fair&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;senior&lt;/td&gt;
&lt;td&gt;low&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;fair&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;senior&lt;/td&gt;
&lt;td&gt;low&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;excellent&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;middle_aged&lt;/td&gt;
&lt;td&gt;low&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;excellent&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;youth&lt;/td&gt;
&lt;td&gt;medium&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;fair&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;youth&lt;/td&gt;
&lt;td&gt;low&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;fair&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;senior&lt;/td&gt;
&lt;td&gt;medium&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;fair&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;youth&lt;/td&gt;
&lt;td&gt;medium&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;excellent&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;middle_aged&lt;/td&gt;
&lt;td&gt;medium&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;excellent&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;middle_aged&lt;/td&gt;
&lt;td&gt;high&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;fair&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;senior&lt;/td&gt;
&lt;td&gt;medium&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;excellent&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;计算&lt;strong&gt;age&lt;/strong&gt;的信息增益: &lt;span class=&#34;math display&#34;&gt;\[
Info(D)=-\frac{9}{14}log_2(\frac{9}{14})-\frac{5}{14}log_2(\frac{5}{14})=0.94
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
Info_{age}(D)=\frac{5}{14}(-\frac{2}{5}log_2\frac{2}{5}-\frac{3}{5}log_2\frac{3}{5})+
\frac{4}{14}(-\frac{4}{4}log_2\frac{4}{4}-\frac{0}{4}log_2\frac{0}{4})+
\frac{5}{14}(-\frac{3}{5}log_2\frac{3}{5}-\frac{2}{5}log_2\frac{2}{5})
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
Gain(age)=Info(D)-Info_A(D)=0.94-0.694=0.246
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;其他的也是类似计算。&lt;/p&gt;
&lt;h2 id=&#34;c4.5算法&#34;&gt;&lt;a href=&#34;https://baike.baidu.com/item/C4.5%E7%AE%97%E6%B3%95/20814636&#34;&gt;C4.5算法&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;信息增益的方法倾向于首先选择因子数较多的变量 。&lt;/p&gt;
&lt;p&gt;信息增益的改进：增益率 &lt;span class=&#34;math display&#34;&gt;\[
SplitInfo_A(D)=-\sum_{j=1}^{v}\frac{|D_j|}{|D|}\times log_2(\frac{|D_j|}{|D|})
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
GainRatio(A)=\frac{Gain(A)}{SpliInfo_A(D)}
\]&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;cart算法&#34;&gt;&lt;a href=&#34;https://baike.baidu.com/item/CART/17679070&#34;&gt;CART算法&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;CART决策树的生成就是递归地构建二叉决策树的过程。&lt;/p&gt;
&lt;p&gt;CART用基尼（Gini）系数最小化准则来进行特征选择，生成二叉树。&lt;/p&gt;
&lt;p&gt;Gini系数计算： &lt;span class=&#34;math display&#34;&gt;\[
Gini(D)=1-\sum_{i=1}^{m}p_i^2
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
Gini_A(D)=\frac{|D_1|}{|D|}Gini(D_1)+\frac{|D_2|}{|D|}Gini(D_2)
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\Delta Gini(A)=Gini(D)-Gini_A(D)
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;优点：小规模数据集有效&lt;/p&gt;
&lt;p&gt;缺点： 处理连续变量不好 类别较多时，错误增加的比较快 不能处理大量数据&lt;/p&gt;
&lt;h2 id=&#34;线性二分类示例代码&#34;&gt;线性二分类示例代码&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.metrics &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; classification_report&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; tree &lt;span class=&#34;comment&#34;&gt;# 决策树模块&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 载入数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data = np.genfromtxt(&lt;span class=&#34;string&#34;&gt;&amp;quot;LR-testSet.csv&amp;quot;&lt;/span&gt;, delimiter=&lt;span class=&#34;string&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_data = data[:,:-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y_data = data[:,-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.scatter(x_data[:,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;],x_data[:,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;],c=y_data) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 创建决策树模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model = tree.DecisionTreeClassifier()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 输入数据建立模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model.fit(x_data, y_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 获取数据值所在的范围&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_min, x_max = x_data[:, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].&lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt;() - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, x_data[:, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].&lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;() + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y_min, y_max = x_data[:, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].&lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt;() - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, x_data[:, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].&lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;() + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 生成网格矩阵&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;xx, yy = np.meshgrid(np.arange(x_min, x_max, &lt;span class=&#34;number&#34;&gt;0.02&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                     np.arange(y_min, y_max, &lt;span class=&#34;number&#34;&gt;0.02&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;z = model.predict(np.c_[xx.ravel(), yy.ravel()])&lt;span class=&#34;comment&#34;&gt;# ravel与flatten类似，多维数据转一维。flatten不会改变原始数据，ravel会改变原始数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;z = z.reshape(xx.shape)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 等高线图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cs = plt.contourf(xx, yy, z)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 样本散点图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.scatter(x_data[:, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], x_data[:, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;], c=y_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 测试与评估&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;predictions = model.predict(x_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(classification_report(predictions,y_data))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230607084609741.png&#34;  style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230606214438933.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;非线性二分类示例代码&#34;&gt;非线性二分类示例代码&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.metrics &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; classification_report&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; tree&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.model_selection &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; train_test_split&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 载入数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data = np.genfromtxt(&lt;span class=&#34;string&#34;&gt;&amp;quot;LR-testSet2.txt&amp;quot;&lt;/span&gt;, delimiter=&lt;span class=&#34;string&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_data = data[:,:-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y_data = data[:,-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.scatter(x_data[:,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;],x_data[:,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;],c=y_data) &lt;span class=&#34;comment&#34;&gt;# s散点图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#分割数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_train,x_test,y_train,y_test = train_test_split(x_data, y_data) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 创建决策树模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# max_depth，树的深度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# min_samples_split 内部节点再划分所需最小样本数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model = tree.DecisionTreeClassifier(max_depth=&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;,min_samples_split=&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 拟合模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model.fit(x_train, y_train)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 获取数据值所在的范围&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_min, x_max = x_data[:, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].&lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt;() - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, x_data[:, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].&lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;() + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y_min, y_max = x_data[:, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].&lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt;() - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, x_data[:, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].&lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;() + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 生成网格矩阵&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;xx, yy = np.meshgrid(np.arange(x_min, x_max, &lt;span class=&#34;number&#34;&gt;0.02&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                     np.arange(y_min, y_max, &lt;span class=&#34;number&#34;&gt;0.02&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;z = model.predict(np.c_[xx.ravel(), yy.ravel()])&lt;span class=&#34;comment&#34;&gt;# ravel与flatten类似，多维数据转一维。flatten不会改变原始数据，ravel会改变原始数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;z = z.reshape(xx.shape)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 等高线图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cs = plt.contourf(xx, yy, z)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 样本散点图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.scatter(x_data[:, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], x_data[:, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;], c=y_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 测试并评估&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;predictions = model.predict(x_test)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(classification_report(predictions,y_test))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230607084429752.png&#34;  style=&#34;zoom: 50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230607084526669.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;回归树示例代码&#34;&gt;回归树示例代码&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; tree&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 载入数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data = np.genfromtxt(&lt;span class=&#34;string&#34;&gt;&amp;quot;data.csv&amp;quot;&lt;/span&gt;, delimiter=&lt;span class=&#34;string&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_data = data[:,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,np.newaxis]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y_data = data[:,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,np.newaxis]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.scatter(x_data,y_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model = tree.DecisionTreeRegressor(max_depth=&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model.fit(x_data, y_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_test = np.linspace(&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;80&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_test = x_test[:,np.newaxis]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 画图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.plot(x_data, y_data, &lt;span class=&#34;string&#34;&gt;&amp;#x27;b&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.plot(x_test, model.predict(x_test), &lt;span class=&#34;string&#34;&gt;&amp;#x27;r&amp;#x27;&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230607090010220.png&#34;  style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1Rt411q7WJ?p=50&amp;amp;vd_source=fe8e916be2bd597efffd8dfd95249141&#34;&gt;决策树&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="Python" />
        <category term="Jupyter Notebook" />
        <updated>2023-06-06T12:25:49.000Z</updated>
    </entry>
    <entry>
        <id>https://liujk6525.github.io/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/KNN%E7%AE%97%E6%B3%95/</id>
        <title>KNN算法</title>
        <link rel="alternate" href="https://liujk6525.github.io/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/KNN%E7%AE%97%E6%B3%95/"/>
        <content type="html">&lt;h1 id=&#34;k最近邻k-nearest-neighborknn分类算法&#34;&gt;&lt;a href=&#34;https://baike.baidu.com/item/k%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95/9512781?fr=aladdin&#34;&gt;K最近邻（K-Nearest Neighbor，KNN）&lt;/a&gt;分类算法&lt;/h1&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;为了判断未知实例的类别，以所有已知类别的实例作为 参照选择参数K&lt;/li&gt;
&lt;li&gt;计算未知实例与所有已知实例的距离&lt;/li&gt;
&lt;li&gt;选择最近K个已知实例&lt;/li&gt;
&lt;li&gt;根据少数服从多数的投票法则(majority-voting)，让 未知实例归类为K个最邻近样本中最多数的类别&lt;/li&gt;
&lt;/ol&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;欧氏距离 &lt;span class=&#34;math display&#34;&gt;\[
E(x,y)=\sqrt{\sum_{i=0}^{n}(x_i-y_i)^2}
\]&lt;/span&gt; &lt;a href=&#34;https://www.cnblogs.com/belfuture/p/5871452.html&#34;&gt;其他的距离衡量&lt;/a&gt;：余弦值距离（cos），相关度（correlation），曼哈顿距离（Manhattan distance）&lt;/p&gt;
&lt;p&gt;算法缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;算法复杂度较高（需要比较所有已知实例与要分类的实例）&lt;/li&gt;
&lt;li&gt;当其样本分布不平衡时，比如其中一类样本过大（实例数量过多）占主导的时候，新的未知实例容易被归类为这个主导样本，因为这类样本实例的数量过大，但这个新的未知实例实际并没有接近目标样本&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;示例代码&#34;&gt;示例代码&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 导入算法包以及数据集&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; neighbors&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; datasets&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.model_selection &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; train_test_split&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.metrics &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; classification_report&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; random&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 载入数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;iris = datasets.load_iris()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(iris)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 打乱数据切分数据集&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# x_train,x_test,y_train,y_test = train_test_split(iris.data, iris.target, test_size=0.2) #分割数据0.2为测试数据，0.8为训练数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#打乱数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data_size = iris.data.shape[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;index = [i &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(data_size)] &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;random.shuffle(index)  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;iris.data = iris.data[index]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;iris.target = iris.target[index]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#切分数据集&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;test_size = &lt;span class=&#34;number&#34;&gt;40&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_train = iris.data[test_size:]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_test =  iris.data[:test_size]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y_train = iris.target[test_size:]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y_test = iris.target[:test_size]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 构建模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model = neighbors.KNeighborsClassifier(n_neighbors=&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model.fit(x_train, y_train)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 测试和评估&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;prediction = model.predict(x_test)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(classification_report(y_test, prediction))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230606202144425.png&#34;  style=&#34;zoom: 67%;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1Rt411q7WJ?p=41&amp;amp;vd_source=fe8e916be2bd597efffd8dfd95249141&#34;&gt;KNN算法&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="Python" />
        <category term="Jupyter Notebook" />
        <updated>2023-06-06T12:05:23.000Z</updated>
    </entry>
    <entry>
        <id>https://liujk6525.github.io/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/</id>
        <title>逻辑回归</title>
        <link rel="alternate" href="https://liujk6525.github.io/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/"/>
        <content type="html">&lt;h1 id=&#34;逻辑回归logistic-regression&#34;&gt;&lt;a href=&#34;https://baike.baidu.com/item/logistic%E5%9B%9E%E5%BD%92/2981575?fromtitle=%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92&amp;amp;fromid=17202449&amp;amp;fr=aladdin&#34;&gt;逻辑回归（Logistic Regression）&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;是一种广义的线性回归分析模型，与多重线性回归有很多相同之处。它们的模型形式基本上相同，都具有$ w’x+b$，其区别在于他们的因变量不同，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多重线性回归直接将&lt;span class=&#34;math inline&#34;&gt;\(w&amp;#39;x+b\)&lt;/span&gt;作为因变量，&lt;/li&gt;
&lt;li&gt;Logistic回归则通过函数L将&lt;span class=&#34;math inline&#34;&gt;\(w&amp;#39;x+b\)&lt;/span&gt;对应一个隐状态&lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(p =L(w&amp;#39;x+b)\)&lt;/span&gt;，然后根据&lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt;与&lt;span class=&#34;math inline&#34;&gt;\(1-p\)&lt;/span&gt;的大小决定因变量的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果L是Logistic函数，就是Logistic回归，&lt;/p&gt;
&lt;p&gt;如果L是多项式函数就是多项式回归。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h2 id=&#34;logistic-function&#34;&gt;Logistic Function&lt;/h2&gt;
&lt;p&gt;定义逻辑回归的预测函数为&lt;span class=&#34;math inline&#34;&gt;\(ℎ_\theta(x) = 𝑔(\theta^𝑇𝑥)\)&lt;/span&gt; ，其中g(x)函数是sigmoid函数。 &lt;span class=&#34;math display&#34;&gt;\[
g(x)=\frac{1}{1+e^{-x}}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
h_\theta(x)=\frac{1}{1+e^{-\theta^Tx}}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230606093600860.png&#34;  style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;当&lt;span class=&#34;math inline&#34;&gt;\(\theta^Tx≥0\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(g(\theta^Tx)≥0.5\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;当&lt;span class=&#34;math inline&#34;&gt;\(\theta^Tx≤0\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(g(\theta^Tx)≤0.5\)&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;逻辑回归的代价函数cost-function&#34;&gt;逻辑回归的代价函数（Cost Function）&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
Cost(h_\theta(x),y)= 
\begin{cases}
-log(h_\theta(x))\quad\quad\quad if\quad y=1\\
-log(1-h_\theta(x))\quad if\quad y=0
\end{cases}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
=-ylog(h_\theta(x))-(1-y)log(1-h_\theta(x))
\]&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;梯度下降法gradient-descent&#34;&gt;梯度下降法（Gradient Descent）&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
J(\theta)=-\frac{1}{m}[\sum_{i=1}^{m}y^{(i)}logh_\theta(x^{(i)})+(1-y^{(i)})log(1-h_\theta(x^{(i)}))]
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;求解 &lt;span class=&#34;math inline&#34;&gt;\(min_\theta J(\theta)\)&lt;/span&gt; &lt;span class=&#34;math display&#34;&gt;\[
\theta_j:=\theta_j-\alpha\sum_{i=1}^{m}(h_\theta(x^{(i)})-y^{(i)})x_j^{(i)}
\]&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;准确率精准率召回率f1分数&#34;&gt;准确率|精准率|召回率|F&lt;sub&gt;1&lt;/sub&gt;分数&lt;/h2&gt;
&lt;p&gt;混淆矩阵&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;实际&lt;/th&gt;
&lt;th&gt;实际&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;预测&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;TP&lt;/td&gt;
&lt;td&gt;FP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;预测&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;FN&lt;/td&gt;
&lt;td&gt;TN&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;P（Positive）：代表1&lt;/li&gt;
&lt;li&gt;N（Negative）：代表0&lt;/li&gt;
&lt;li&gt;T（True）：代表预测正确&lt;/li&gt;
&lt;li&gt;F（False）：代表预测错误&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;准确率：&lt;/strong&gt;即预测正确的结果占总样本的百分比 &lt;span class=&#34;math display&#34;&gt;\[
准确率=\frac{TP+TN}{TP+TN+FP+FN}
\]&lt;/span&gt; &lt;strong&gt;精准率（Precision）：&lt;/strong&gt;是指在所有被预测为正的样本中实际为正的样本的概率。 &lt;span class=&#34;math display&#34;&gt;\[
精准率=\frac{TP}{TP+FP}
\]&lt;/span&gt; &lt;strong&gt;精准率就是你认为找的是对的实际上多少是对的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;召回率（Recall）：&lt;/strong&gt;是指在实际为正的样本中被预测为正样本的概率。 &lt;span class=&#34;math display&#34;&gt;\[
召回率=\frac{TP}{TP+FN}
\]&lt;/span&gt; &lt;strong&gt;F&lt;sub&gt;1&lt;/sub&gt;分数：&lt;/strong&gt;精准率和召回率之间的一个平衡点。 &lt;span class=&#34;math display&#34;&gt;\[
F_1=\frac{2\times Precision\times Recall}{Precision+Recall}
\]&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;逻辑回归示例代码&#34;&gt;逻辑回归示例代码&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.metrics &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; classification_report&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; preprocessing&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; linear_model&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 数据是否需要标准化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;scale = &lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 载入数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data = np.genfromtxt(&lt;span class=&#34;string&#34;&gt;&amp;quot;LR-testSet.csv&amp;quot;&lt;/span&gt;, delimiter=&lt;span class=&#34;string&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_data = data[:,:-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y_data = data[:,-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;plot&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x0 = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x1 = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    y0 = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    y1 = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 切分不同类别的数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(x_data)):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; y_data[i]==&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            x0.append(x_data[i,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            y0.append(x_data[i,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            x1.append(x_data[i,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            y1.append(x_data[i,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 画图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   scatter0 = plt.scatter(x0, y0, c=&lt;span class=&#34;string&#34;&gt;&amp;#x27;c&amp;#x27;&lt;/span&gt;, marker=&lt;span class=&#34;string&#34;&gt;&amp;#x27;+&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    scatter1 = plt.scatter(x1, y1, c=&lt;span class=&#34;string&#34;&gt;&amp;#x27;y&amp;#x27;&lt;/span&gt;, marker=&lt;span class=&#34;string&#34;&gt;&amp;#x27;*&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;#画图例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    plt.legend(handles=[scatter0,scatter1],labels=[&lt;span class=&#34;string&#34;&gt;&amp;#x27;label0&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;label1&amp;#x27;&lt;/span&gt;],loc=&lt;span class=&#34;string&#34;&gt;&amp;#x27;best&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plot()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 创建并拟合模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;logistic = linear_model.LogisticRegression()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;logistic.fit(x_data, y_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; scale == &lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 画图决策边界&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    plot()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x_test = np.array([[-&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;],[&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;]])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    y_test = (-logistic.intercept_ - x_test*logistic.coef_[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;])/logistic.coef_[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;][&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    plt.plot(x_test, y_test, &lt;span class=&#34;string&#34;&gt;&amp;#x27;k&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    plt.show()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 测试与评估    &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;predictions = logistic.predict(x_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(classification_report(y_data, predictions))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230606164354040.png&#34;  style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230606164557574.png&#34;  style=&#34;zoom: 67%;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;非线性逻辑回归示例代码&#34;&gt;非线性逻辑回归示例代码&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; linear_model&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.datasets &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; make_gaussian_quantiles&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.preprocessing &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; PolynomialFeatures&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 生成2维正态分布，生成的数据按分位数分为两类，500个样本,2个样本特征&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 可以生成两类或多类数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_data, y_data = make_gaussian_quantiles(n_samples=&lt;span class=&#34;number&#34;&gt;500&lt;/span&gt;, n_features=&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,n_classes=&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.scatter(x_data[:, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], x_data[:, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;], c=y_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 创建并拟合模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;logistic = linear_model.LogisticRegression()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;logistic.fit(x_data, y_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 定义多项式回归,degree的值可以调节多项式的特征&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;poly_reg  = PolynomialFeatures(degree=&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 特征处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_poly = poly_reg.fit_transform(x_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 定义逻辑回归模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;logistic = linear_model.LogisticRegression()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 训练模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;logistic.fit(x_poly, y_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 获取数据值所在的范围&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_min, x_max = x_data[:, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].&lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt;() - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, x_data[:, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].&lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;() + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y_min, y_max = x_data[:, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].&lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt;() - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, x_data[:, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].&lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;() + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 生成网格矩阵&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;xx, yy = np.meshgrid(np.arange(x_min, x_max, &lt;span class=&#34;number&#34;&gt;0.02&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                     np.arange(y_min, y_max, &lt;span class=&#34;number&#34;&gt;0.02&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;z = logistic.predict(poly_reg.fit_transform(np.c_[xx.ravel(), yy.ravel()]))&lt;span class=&#34;comment&#34;&gt;# ravel与flatten类似，多维数据转一维。flatten不会改变原始数据，ravel会改变原始数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;z = z.reshape(xx.shape)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 等高线图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cs = plt.contourf(xx, yy, z)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 样本散点图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.scatter(x_data[:, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], x_data[:, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;], c=y_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;score:&amp;#x27;&lt;/span&gt;,logistic.score(x_poly,y_data))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230606165631817.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1Rt411q7WJ?p=29&#34;&gt;逻辑回归&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="Python" />
        <category term="Jupyter Notebook" />
        <updated>2023-06-05T13:32:23.000Z</updated>
    </entry>
    <entry>
        <id>https://liujk6525.github.io/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%8F%8A%E9%9D%9E%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</id>
        <title>线性回归及非线性回归</title>
        <link rel="alternate" href="https://liujk6525.github.io/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%8F%8A%E9%9D%9E%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
        <content type="html">&lt;h1 id=&#34;基本概念&#34;&gt;基本概念：&lt;/h1&gt;
&lt;p&gt;将数据划分为三部分：&lt;span class=&#34;math inline&#34;&gt;\(\begin{cases} 训练集(Train):用来训练，构建模型\\ 验证集(Validate):在模型训练阶段，测试模型的好坏\\ 测试集(Test):等模型训练好后，评估模型的好坏 \end{cases}\)&lt;/span&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;学习方式：&lt;span class=&#34;math inline&#34;&gt;\(\begin{cases} 监督学习\\ 无监督学习\\ 半监督学习 \end{cases}\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;常见应用：&lt;span class=&#34;math inline&#34;&gt;\(\begin{cases} 回归：预测数据为连续型数值。\\ 分类：预测数据为类别型数据，并且类别已知。\\ 聚类：预测数据为类别型数据，但是类别未知。 \end{cases}\)&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;回归分析regression&#34;&gt;&lt;a href=&#34;https://baike.baidu.com/item/%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90/2625498?fr=aladdin&#34;&gt;回归分析（Regression）&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;回归分析用来建立方程，模拟两个或者多个变量之间如何关联，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;被预测的变量叫做：因变量/输出&lt;/li&gt;
&lt;li&gt;被用来进行预测的变量叫做： 自变量,/输入&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一元线性回归包含一个自变量和一个因变量，两个变量的关系用一条直线来模拟，如果包含两个以上的自变量，则称作多元回归分析（multiple regression）&lt;/p&gt;
&lt;h1 id=&#34;一元线性回归&#34;&gt;&lt;a href=&#34;https://baike.baidu.com/item/%E4%B8%80%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/22770888?fr=aladdin&#34;&gt;一元线性回归&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;一元线性回归：&lt;span class=&#34;math inline&#34;&gt;\(h_\theta(x)=\theta_0+\theta_1x\)&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;代价函数cost-function&#34;&gt;&lt;a href=&#34;https://baike.baidu.com/item/%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0/1783236?fromtitle=%E4%BB%A3%E4%BB%B7%E5%87%BD%E6%95%B0&amp;amp;fromid=7048599&amp;amp;fr=aladdin&#34;&gt;代价函数（Cost Function）&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;最小二乘法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;假设真实值为&lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;，预测值&lt;span class=&#34;math inline&#34;&gt;\(h_\theta(x)\)&lt;/span&gt; ，则误差平方为&lt;span class=&#34;math inline&#34;&gt;\((h_\theta(x)-y)^2\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;找到合适的参数，使得误差平方和&lt;span class=&#34;math inline&#34;&gt;\(J(\theta_0,\theta_1)\)&lt;/span&gt;最小。 &lt;span class=&#34;math display&#34;&gt;\[
J(\theta_0,\theta_1)=\frac{1}{2m}\sum_{i=1}^{m}{(h_\theta(x^{(i)})-y^{(i)})^{2}}
\]&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;梯度下降法gradient-descent&#34;&gt;&lt;a href=&#34;https://baike.baidu.com/item/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95/8641233?fr=aladdin&#34;&gt;梯度下降法（Gradient Descent）&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;最小化目标函数&lt;/strong&gt; &lt;span class=&#34;math inline&#34;&gt;\(\underset{\theta_0,\theta_1}{min}\quad J(\theta_0,\theta_1)\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;初始化参数&lt;span class=&#34;math inline&#34;&gt;\(\theta_0,\theta_1\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;不断改变&lt;span class=&#34;math inline&#34;&gt;\(\theta_0,\theta_1\)&lt;/span&gt; ，直到&lt;span class=&#34;math inline&#34;&gt;\(J(\theta_0,\theta_1)\)&lt;/span&gt;到达一个全局最小值，或局部极小值。 &lt;span class=&#34;math display&#34;&gt;\[
\theta_j:=\theta_j-\alpha\frac{\partial}{\partial\theta_j}J(\theta_0,\theta_1)\quad (j=0,1,2\cdots)
\]&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;用梯度下降法求解线性回归&#34;&gt;用梯度下降法求解线性回归&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\frac{\partial}{\partial\theta_0}J(\theta_0,\theta_1)=
\frac{1}{m}\sum_{i=1}^{m}{(h_\theta(x^{(i)})-y^{(i)})}
\\
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\frac{\partial}{\partial\theta_1}J(\theta_0,\theta_1)=
\frac{1}{m}\sum_{i=1}^{m}{(h_\theta(x^{(i)})-y^{(i)})}\times x^{(i)}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;不断迭代，直到收敛： &lt;span class=&#34;math display&#34;&gt;\[
\theta_0:=\theta_0-\alpha\frac{1}{m}{\sum_{i=1}^{m}{(h_\theta(x^{(i)})-y^{(i)})}}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\theta_1:=\theta_1-\alpha\frac{1}{m}{\sum_{i=1}^{m}{(h_\theta(x^{(i)})-y^{(i)})}}\times x^{(i)}
\]&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;示例代码&#34;&gt;示例代码：&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.linear_model &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; LinearRegression &lt;span class=&#34;comment&#34;&gt;# 线性回归模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 载入数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data = np.genfromtxt(&lt;span class=&#34;string&#34;&gt;&amp;quot;data.csv&amp;quot;&lt;/span&gt;, delimiter=&lt;span class=&#34;string&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_data = data[:,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y_data = data[:,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.scatter(x_data,y_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_data = data[:,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,np.newaxis]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y_data = data[:,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,np.newaxis]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 创建并拟合模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model = LinearRegression() &lt;span class=&#34;comment&#34;&gt;# 线性回归&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model.fit(x_data, y_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 测试&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_test = [[&lt;span class=&#34;number&#34;&gt;44.5&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;predict = model.predict(x_test)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;predict&amp;#x27;&lt;/span&gt;,predict)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 画图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.plot(x_data, y_data, &lt;span class=&#34;string&#34;&gt;&amp;#x27;b.&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.plot(x_data, model.predict(x_data), &lt;span class=&#34;string&#34;&gt;&amp;#x27;r&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230605203607162.png&#34;  style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;多元线性回归multiple-linear-regression&#34;&gt;&lt;a href=&#34;https://baike.baidu.com/item/%E5%A4%9A%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/10702248?fr=aladdin&#34;&gt;多元线性回归（Multiple Linear Regression）&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;多特征时，假设：&lt;span class=&#34;math inline&#34;&gt;\(h_\theta(x)=\theta_0+\theta_1x_1+\theta_2x_2+\cdots+\theta_nx_n\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;当真实值&lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;的影响因素不是唯一时，需采用多元线性回归模型。&lt;/p&gt;
&lt;p&gt;代价函数： &lt;span class=&#34;math display&#34;&gt;\[
J(\theta_0,\theta_1,\cdots,\theta_n)=\frac{1}{2m}\sum_{i=1}^{m}(h_\theta(x^{(i)})-y^{(i)})^{2}
\]&lt;/span&gt; 梯度下降法： &lt;span class=&#34;math display&#34;&gt;\[
\theta_j:=\theta_j-\alpha\frac{1}{m}\sum_{i=1}^{m}{(h_\theta(x^{(i)})-y^{(i)})}\times x_j^{(i)}\quad (j=0,1,2\cdots,n)
\]&lt;/span&gt; 注意这里的&lt;span class=&#34;math inline&#34;&gt;\(j=0\)&lt;/span&gt;时，&lt;span class=&#34;math inline&#34;&gt;\(x_0=1\)&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;示例代码-1&#34;&gt;示例代码：&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; genfromtxt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; linear_model &lt;span class=&#34;comment&#34;&gt;# 线性回归模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; mpl_toolkits.mplot3d &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; Axes3D  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 读入数据 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data = genfromtxt(&lt;span class=&#34;string&#34;&gt;r&amp;quot;Delivery.csv&amp;quot;&lt;/span&gt;,delimiter=&lt;span class=&#34;string&#34;&gt;&amp;#x27;,&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 切分数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_data = data[:,:-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y_data = data[:,-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(x_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(y_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 创建模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model = linear_model.LinearRegression()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model.fit(x_data, y_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 测试&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_test = [[&lt;span class=&#34;number&#34;&gt;102&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;predict = model.predict(x_test)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;predict:&amp;quot;&lt;/span&gt;,predict)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ax = plt.figure().add_subplot(&lt;span class=&#34;number&#34;&gt;111&lt;/span&gt;, projection = &lt;span class=&#34;string&#34;&gt;&amp;#x27;3d&amp;#x27;&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ax.scatter(x_data[:,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], x_data[:,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;], y_data, c = &lt;span class=&#34;string&#34;&gt;&amp;#x27;r&amp;#x27;&lt;/span&gt;, marker = &lt;span class=&#34;string&#34;&gt;&amp;#x27;o&amp;#x27;&lt;/span&gt;, s = &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;#点为红色三角形  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x0 = x_data[:,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x1 = x_data[:,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 生成网格矩阵&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x0, x1 = np.meshgrid(x0, x1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;z = model.intercept_ + x0*model.coef_[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] + x1*model.coef_[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 画3D图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ax.plot_surface(x0, x1, z)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#设置坐标轴  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ax.set_xlabel(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Miles&amp;#x27;&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ax.set_ylabel(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Num of Deliveries&amp;#x27;&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ax.set_zlabel(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Time&amp;#x27;&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#显示图像  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()  &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230605204147960.png&#34;  style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;多项式回归&#34;&gt;多项式回归&lt;/h1&gt;
&lt;p&gt;假如我们不是要找直线（或者超平面），而是需要找到一 个用多项式所表示的曲线（或者超曲面）&lt;/p&gt;
&lt;p&gt;多项式回归：&lt;span class=&#34;math inline&#34;&gt;\(h_\theta(x)=\theta_0+\theta_1x+\theta_2x^2+\cdots+\theta_nx^n\)&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;示例代码-2&#34;&gt;示例代码：&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.preprocessing &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; PolynomialFeatures &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.linear_model &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; LinearRegression&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 载入数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data = np.genfromtxt(&lt;span class=&#34;string&#34;&gt;&amp;quot;job.csv&amp;quot;&lt;/span&gt;, delimiter=&lt;span class=&#34;string&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_data = data[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y_data = data[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.scatter(x_data,y_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_data = x_data[:,np.newaxis]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y_data = y_data[:,np.newaxis]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 定义多项式回归,degree的值可以调节多项式的特征&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;poly_reg  = PolynomialFeatures(degree=&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 特征处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_poly = poly_reg.fit_transform(x_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 定义回归模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;lin_reg = LinearRegression()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 训练模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;lin_reg.fit(x_poly, y_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 画图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 画图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.plot(x_data, y_data, &lt;span class=&#34;string&#34;&gt;&amp;#x27;b.&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_test = np.linspace(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_test = x_test[:,np.newaxis]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.plot(x_test, lin_reg.predict(poly_reg.fit_transform(x_test)), c=&lt;span class=&#34;string&#34;&gt;&amp;#x27;r&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.title(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Truth or Bluff (Polynomial Regression)&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.xlabel(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Position level&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.ylabel(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Salary&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230605205328029.png&#34;  style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;标准方程法normal-equation&#34;&gt;标准方程法（Normal Equation）&lt;/h1&gt;
&lt;p&gt;注意这里的符号：&lt;span class=&#34;math inline&#34;&gt;\(w\)&lt;/span&gt;其实就是上面公式里的&lt;span class=&#34;math inline&#34;&gt;\(\theta\)&lt;/span&gt;，就是要求解的那个参数。&lt;/p&gt;
&lt;p&gt;假设： &lt;span class=&#34;math display&#34;&gt;\[
h_w(x)=w_0+w_1x_1+w_2x_2+\cdots+w_nx_n
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
h_w(x)=xw\
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;目标函数: &lt;span class=&#34;math display&#34;&gt;\[
J(w_0,w_1,\cdots,w_n)=\frac{1}{2m}\sum_{i=1}^{m}(h_w(x^{(i)})-y^{(i)})^{2}
\]&lt;/span&gt; 又因为 &lt;span class=&#34;math display&#34;&gt;\[
\sum_{i=1}^{m}(h_w(x^{(i)})-y^{(i)})^{2}=(y-Xw)^T(y-Xw)
\]&lt;/span&gt; 所以 &lt;span class=&#34;math display&#34;&gt;\[
\frac{\partial J(w)}{\partial w}=\frac{\partial(y-Xw)^T(y-Xw)}{\partial w}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
=\frac{\partial(y^Ty-y^TXw-w^TX^Ty+w^TX^TXw)}{\partial w}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
=\frac{\partial(y^Ty)}{\partial w}-\frac{\partial(y^TXw)}{\partial w}-\frac{\partial(w^TX^Ty)}{\partial w}+\frac{\partial(w^TX^TXw)}{\partial w}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
=0-X^Ty-X^Ty+2X^TXw
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math display&#34;&gt;\[
\frac{\partial J(w)}{\partial w}=0
\]&lt;/span&gt; 求解： &lt;span class=&#34;math display&#34;&gt;\[
-2X^Ty+2X^TXw=0
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
X^TXw=X^Ty
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
w=(X^TX)^{-1}X^Ty
\]&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;特征缩放&#34;&gt;&lt;a href=&#34;https://baike.baidu.com/item/%E7%89%B9%E5%BE%81%E7%BC%A9%E6%94%BE/17415222?fr=aladdin&#34;&gt;特征缩放&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id=&#34;数据归一化&#34;&gt;数据归一化&lt;/h2&gt;
&lt;p&gt;数据归一化就是把数据的取值范围处理为&lt;span class=&#34;math inline&#34;&gt;\(0-1\)&lt;/span&gt;，或者&lt;span class=&#34;math inline&#34;&gt;\(-1-1\)&lt;/span&gt;之间。&lt;/p&gt;
&lt;p&gt;任意数据转化为0-1之间： &lt;span class=&#34;math display&#34;&gt;\[
NewValue = \frac{OldValue-min}{max-min}
\]&lt;/span&gt; 任意数据转化为-1-1之间： &lt;span class=&#34;math display&#34;&gt;\[
NewValue=2\times(\frac{OldVaule-min}{max-min}-0.5)
\]&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;均值标准化&#34;&gt;均值标准化&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;为特征数据，&lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt;为数据的平均值，&lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt;为数据的方差。 &lt;span class=&#34;math display&#34;&gt;\[
NewValue=\frac{OldValue-u}{s}
\]&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;过拟合overfitting&#34;&gt;过拟合（Overfitting）&lt;/h1&gt;
&lt;p&gt;回归问题拟合有以下三种情况：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230605154335888.png&#34;  style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;分类问题有以下三种情况：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230605154600447.png&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;防止过拟合：减少特征；增加数据量；正则化（Regularized）&lt;/p&gt;
&lt;h2 id=&#34;正则化&#34;&gt;正则化&lt;/h2&gt;
&lt;p&gt;L2正则化： &lt;span class=&#34;math display&#34;&gt;\[
J(\theta)=\frac{1}{2m}[\sum_{i=1}^{m}{h_\theta(x^{(i)}-y^{(i)})^2+\lambda\sum_{j=1}^{n}{\theta_j^2}}]
\]&lt;/span&gt; L1正则化： &lt;span class=&#34;math display&#34;&gt;\[
J(\theta)=\frac{1}{2m}[\sum_{i=1}^{m}{h_\theta(x^{(i)}-y^{(i)})^2+\lambda\sum_{j=1}^{n}{|\theta_j|}}]
\]&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;岭回归ridge-regression&#34;&gt;&lt;a href=&#34;https://baike.baidu.com/link?url=J428YjCOAduEv-hDj1BM53FvjQEMC1iR9icG161YvlKwmXXmtsgGoFBvkL_VK2T40KfCjPMUpQQ8ePln0cjp50QpceYEGvvCC4iewQhwY0fGCqcS9kwQCLnbARBjd0mT&#34;&gt;岭回归（Ridge Regression）&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;由标准方程法得出， &lt;span class=&#34;math display&#34;&gt;\[
w = (𝑋^𝑇𝑋)^{-1}𝑋^𝑇y
\]&lt;/span&gt; 如果数据的特征比样本点还多，（数据特征&lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;，样本个数&lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt;），如果&lt;span class=&#34;math inline&#34;&gt;\(n&amp;gt;m\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(𝑋^𝑇𝑋\)&lt;/span&gt;不是满秩矩阵，不可逆，计算&lt;span class=&#34;math inline&#34;&gt;\(𝑋^𝑇𝑋^{-1}\)&lt;/span&gt;时会出错。&lt;/p&gt;
&lt;p&gt;为了解决这个问题，引入了岭回归的概念。&lt;span class=&#34;math inline&#34;&gt;\(\lambda\)&lt;/span&gt;为岭系数，&lt;span class=&#34;math inline&#34;&gt;\(I\)&lt;/span&gt;为单位矩阵。 &lt;span class=&#34;math display&#34;&gt;\[
w = (𝑋^𝑇𝑋 + \lambda I)^{-1}𝑋^𝑇y
\]&lt;/span&gt; 推导： &lt;span class=&#34;math display&#34;&gt;\[
J(\theta)=\frac{1}{2}[\sum_{i=1}^{m}{h_\theta(x^{(i)}-y^{(i)})^2+\lambda\sum_{j=1}^{n}{\theta_j^2}}]
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
=\frac{1}{2}(Xw-y)^T(Xw-y)+\lambda w^Tw
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
=\frac{1}{2}(w^TX^TXw-w^TX^Ty-y^TXw+y^Ty)+\lambda w^Tw
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\frac{\partial J(w)}{\partial w}=X^TXw-X^Ty+\lambda w
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math display&#34;&gt;\[
\frac{\partial J(w)}{\partial w}=0
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
w = (𝑋^𝑇𝑋 + \lambda I)^{-1}𝑋^𝑇y
\]&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;示例代码-3&#34;&gt;示例代码：&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; genfromtxt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; linear_model&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 读入数据 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data = genfromtxt(&lt;span class=&#34;string&#34;&gt;r&amp;quot;longley.csv&amp;quot;&lt;/span&gt;,delimiter=&lt;span class=&#34;string&#34;&gt;&amp;#x27;,&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 切分数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_data = data[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;:]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y_data = data[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(x_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(y_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 创建模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 生成50个值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alphas_to_test = np.linspace(&lt;span class=&#34;number&#34;&gt;0.001&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 创建模型，保存误差值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model = linear_model.RidgeCV(alphas=alphas_to_test, store_cv_values=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model.fit(x_data, y_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 画图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 岭系数跟loss值的关系&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.plot(alphas_to_test, model.cv_values_.mean(axis=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 选取的岭系数值的位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.plot(model.alpha_, &lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt;(model.cv_values_.mean(axis=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)),&lt;span class=&#34;string&#34;&gt;&amp;#x27;ro&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.xlabel(&lt;span class=&#34;string&#34;&gt;&amp;#x27;alphas&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.ylabel(&lt;span class=&#34;string&#34;&gt;&amp;#x27;loss&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 测试&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model.predict(x_data[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,np.newaxis])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230605210828441.png&#34;  style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;lassoleast-absolute-shrinkage-and&#34;&gt;[LASSO（Least Absolute Shrinkage and&lt;/h1&gt;
&lt;p&gt;Selectionator operator）](https://baike.baidu.com/item/Lasso%E7%AE%97%E6%B3%95/22685468?fromtitle=LASSO&amp;amp;fromid=20366865&amp;amp;fr=aladdin)&lt;/p&gt;
&lt;p&gt;LASSO的代价函数： &lt;span class=&#34;math display&#34;&gt;\[
J(\theta)=\frac{1}{2m}[\sum_{i=1}^{m}{h_\theta(x^{(i)}-y^{(i)})^2+\lambda\sum_{j=1}^{n}{|\theta_j|}}]
\]&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;示例代码-4&#34;&gt;示例代码：&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; genfromtxt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; linear_model&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 读入数据 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data = genfromtxt(&lt;span class=&#34;string&#34;&gt;r&amp;quot;longley.csv&amp;quot;&lt;/span&gt;,delimiter=&lt;span class=&#34;string&#34;&gt;&amp;#x27;,&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 切分数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_data = data[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;:]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y_data = data[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(x_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(y_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 创建并拟合模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model = linear_model.LassoCV()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model.fit(x_data, y_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# lasso系数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(model.alpha_)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 相关系数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(model.coef_)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 预测&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model.predict(x_data[-&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,np.newaxis])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;弹性网elastic-net&#34;&gt;弹性网（Elastic Net）&lt;/h1&gt;
&lt;p&gt;在&lt;span class=&#34;math inline&#34;&gt;\(q\)&lt;/span&gt;取不同值情况下的代价函数 &lt;span class=&#34;math display&#34;&gt;\[
J(\theta)=\frac{1}{2m}[\sum_{i=1}^{m}{h_\theta(x^{(i)}-y^{(i)})^2+\lambda\sum_{j=1}^{n}{|\theta_j|^q}}]
\]&lt;/span&gt; &lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20230605164458909.png&#34;  style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Elastic Net的代价函数： &lt;span class=&#34;math display&#34;&gt;\[
J(\theta)=\frac{1}{2m}[\sum_{i=1}^{m}{h_\theta(x^{(i)}-y^{(i)})^2+\lambda\sum_{j=1}^{n}{\alpha\theta_j^2+(1-\alpha)|\theta_j|}}]
\]&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;示例代码-5&#34;&gt;示例代码：&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; genfromtxt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; linear_model&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 读入数据 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data = genfromtxt(&lt;span class=&#34;string&#34;&gt;r&amp;quot;longley.csv&amp;quot;&lt;/span&gt;,delimiter=&lt;span class=&#34;string&#34;&gt;&amp;#x27;,&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 切分数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_data = data[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;:]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y_data = data[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(x_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(y_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 创建并拟合模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model = linear_model.ElasticNetCV()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model.fit(x_data, y_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 弹性网系数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(model.alpha_)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 相关系数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(model.coef_)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 预测&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model.predict(x_data[-&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,np.newaxis])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1Rt411q7WJ?p=23&amp;amp;vd_source=fe8e916be2bd597efffd8dfd95249141&#34;&gt;线性回归及其非线性回归&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="Python" />
        <category term="Jupyter Notebook" />
        <updated>2023-06-05T01:37:27.000Z</updated>
    </entry>
    <entry>
        <id>https://liujk6525.github.io/OpenCV/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E6%A1%88%E4%BE%8B/</id>
        <title>人脸识别案例</title>
        <link rel="alternate" href="https://liujk6525.github.io/OpenCV/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E6%A1%88%E4%BE%8B/"/>
        <content type="html">&lt;h1 id=&#34;基础&#34;&gt;基础&lt;/h1&gt;
&lt;p&gt;使用机器学习的方法完成人脸检测，首先需要大量的正样本图像（面部图像）和负样本图像（不含面部的图像）来训练分类器。我们需要从其中提取特征。下图中的 Haar 特征会被使用，就像我们的卷积核，每一个特征是一个值，这个值等于黑色矩形中的像素值之后减去白色矩形中的像素值之和。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191014152218924-1684563500129-1.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Haar特征值反映了图像的灰度变化情况。例如：脸部的一些特征能由矩形特征简单的描述，眼睛要比脸颊颜色要深，鼻梁两侧比鼻梁颜色要深，嘴巴比周围颜色要深等。&lt;/p&gt;
&lt;p&gt;Haar特征可用于于图像任意位置，大小也可以任意改变，所以矩形特征值是矩形模版类别、矩形位置和矩形大小这三个因素的函数。故类别、大小和位置的变化，使得很小的检测窗口含有非常多的矩形特征。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191014152716626-1684563652425-11.png&#34;  style=&#34;zoom: 50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;得到图像的特征后，训练一个决策树构建的adaboost级联决策器来识别是否为人脸。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191014160504382-1684563672078-13.png&#34;  style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;OpenCV中自带已训练好的检测器，包括面部，眼睛，猫脸等，都保存在XML文件中，利用这些文件来识别人脸，眼睛等。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;读取图片，并转换成灰度图&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;实例化人脸和眼睛检测的分类器对象&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 实例化级联分类器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;classifier =cv.CascadeClassifier( &lt;span class=&#34;string&#34;&gt;&amp;quot;haarcascade_frontalface_default.xml&amp;quot;&lt;/span&gt; ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 加载分类器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;classifier.load(&lt;span class=&#34;string&#34;&gt;&amp;#x27;haarcascade_frontalface_default.xml&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;进行人脸和眼睛的检测&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;rect = classifier.detectMultiScale(gray, scaleFactor, minNeighbors, minSize,maxsize)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gray: 要进行检测的人脸图像&lt;/li&gt;
&lt;li&gt;scaleFactor: 前后两次扫描中，搜索窗口的比例系数&lt;/li&gt;
&lt;li&gt;minneighbors：目标至少被检测到minNeighbors次才会被认为是目标&lt;/li&gt;
&lt;li&gt;minsize和maxsize: 目标的最小尺寸和最大尺寸&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将检测结果绘制出来就可以了。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;示例代码&#34;&gt;示例代码：&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; cv2 &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; cv&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 1.以灰度图的形式读取图片&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img = cv.imread(&lt;span class=&#34;string&#34;&gt;&amp;quot;16.jpg&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;gray = cv.cvtColor(img,cv.COLOR_BGR2GRAY)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2.实例化OpenCV人脸和眼睛识别的分类器 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;face_cas = cv.CascadeClassifier( &lt;span class=&#34;string&#34;&gt;&amp;quot;haarcascade_frontalface_default.xml&amp;quot;&lt;/span&gt; ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;face_cas.load(&lt;span class=&#34;string&#34;&gt;&amp;#x27;haarcascade_frontalface_default.xml&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;eyes_cas = cv.CascadeClassifier(&lt;span class=&#34;string&#34;&gt;&amp;quot;haarcascade_eye.xml&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;eyes_cas.load(&lt;span class=&#34;string&#34;&gt;&amp;quot;haarcascade_eye.xml&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3.调用识别人脸 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;faceRects = face_cas.detectMultiScale( gray, scaleFactor=&lt;span class=&#34;number&#34;&gt;1.2&lt;/span&gt;, minNeighbors=&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, minSize=(&lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;)) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; faceRect &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; faceRects: &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x, y, w, h = faceRect &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 框出人脸 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cv.rectangle(img, (x, y), (x + h, y + w),(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;255&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;), &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 4.在识别出的人脸中进行眼睛的检测&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    roi_color = img[y:y+h, x:x+w]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    roi_gray = gray[y:y+h, x:x+w]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    eyes = eyes_cas.detectMultiScale(roi_gray) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (ex,ey,ew,eh) &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; eyes:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cv.rectangle(roi_color,(ex,ey),(ex+ew,ey+eh),(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;255&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;),&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 5. 检测结果的绘制&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.figure(figsize=(&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;),dpi=&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.imshow(img[:,:,::-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]),plt.title(&lt;span class=&#34;string&#34;&gt;&amp;#x27;检测结果&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.xticks([]), plt.yticks([])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/yangzi2.jpeg&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在视频中对人脸进行检测：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; cv2 &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; cv&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 1.读取视频&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cap = cv.VideoCapture(&lt;span class=&#34;string&#34;&gt;&amp;quot;movie.mp4&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2.在每一帧数据中进行人脸识别&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(cap.isOpened()):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ret, frame = cap.read()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ret==&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        gray = cv.cvtColor(frame, cv.COLOR_BGR2GRAY)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 3.实例化OpenCV人脸识别的分类器 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        face_cas = cv.CascadeClassifier( &lt;span class=&#34;string&#34;&gt;&amp;quot;haarcascade_frontalface_default.xml&amp;quot;&lt;/span&gt; ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        face_cas.load(&lt;span class=&#34;string&#34;&gt;&amp;#x27;haarcascade_frontalface_default.xml&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 4.调用识别人脸 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        faceRects = face_cas.detectMultiScale(gray, scaleFactor=&lt;span class=&#34;number&#34;&gt;1.2&lt;/span&gt;, minNeighbors=&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, minSize=(&lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;)) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; faceRect &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; faceRects: &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            x, y, w, h = faceRect &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;# 框出人脸 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            cv.rectangle(frame, (x, y), (x + h, y + w),(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;255&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;), &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cv.imshow(&lt;span class=&#34;string&#34;&gt;&amp;quot;frame&amp;quot;&lt;/span&gt;,frame)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; cv.waitKey(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;amp; &lt;span class=&#34;number&#34;&gt;0xFF&lt;/span&gt; == &lt;span class=&#34;built_in&#34;&gt;ord&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;q&amp;#x27;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 5. 释放资源&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cap.release()  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cv.destroyAllWindows()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
        <category term="Jupyter Notebook" />
        <updated>2023-05-20T06:16:48.000Z</updated>
    </entry>
    <entry>
        <id>https://liujk6525.github.io/OpenCV/%E8%A7%86%E9%A2%91%E8%BF%BD%E8%B8%AA/</id>
        <title>视频追踪</title>
        <link rel="alternate" href="https://liujk6525.github.io/OpenCV/%E8%A7%86%E9%A2%91%E8%BF%BD%E8%B8%AA/"/>
        <content type="html">&lt;h1 id=&#34;视频读写&#34;&gt;视频读写&lt;/h1&gt;
&lt;h2 id=&#34;读取视频&#34;&gt;读取视频&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;创建读取视频的对象&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cap = cv.VideoCapture(filepath)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;filepath：视频文件路径&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;获取视频的某些属性&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;retval = cap.get(propId)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;propId: 从0到18的数字，每个数字表示视频的属性&lt;/p&gt;
&lt;p&gt;常用属性有：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191016164053661-1684560896151-1.png&#34;  style=&#34;zoom: 33%;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;修改视频的属性信息&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cap.&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;(propId，value)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;proid：属性的索引，与上面的表格相对应&lt;/li&gt;
&lt;li&gt;value：修改后的属性值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;判断图像是否读取成功&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;isornot = cap.isOpened()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;若读取成功则返回true，否则返回False&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;获取视频的一帧图像&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ret, frame = cap.read()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ret：若获取成功返回True，获取失败，返回False&lt;/li&gt;
&lt;li&gt;frame：获取到的某一帧的图像&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;将视频释放掉&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cap.realease()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;示例代码&#34;&gt;示例代码：&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; cv2 &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; cv&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 1.获取视频对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cap = cv.VideoCapture(&lt;span class=&#34;string&#34;&gt;&amp;#x27;DOG.wmv&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2.判断是否读取成功&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(cap.isOpened()):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 3.获取每一帧图像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ret, frame = cap.read()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 4. 获取成功显示图像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ret == &lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cv.imshow(&lt;span class=&#34;string&#34;&gt;&amp;#x27;frame&amp;#x27;&lt;/span&gt;,frame)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 5.每一帧间隔为25ms&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; cv.waitKey(&lt;span class=&#34;number&#34;&gt;25&lt;/span&gt;) &amp;amp; &lt;span class=&#34;number&#34;&gt;0xFF&lt;/span&gt; == &lt;span class=&#34;built_in&#34;&gt;ord&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;q&amp;#x27;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 6.释放视频对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cap.release()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cv.destoryAllwindows()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;保存视频&#34;&gt;保存视频&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;创建视频写入的对象&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;out = cv2.VideoWriter(filename,fourcc, fps, frameSize)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;filename：视频保存的位置&lt;/li&gt;
&lt;li&gt;fourcc：指定视频编解码器的4字节代码&lt;/li&gt;
&lt;li&gt;fps：帧率&lt;/li&gt;
&lt;li&gt;frameSize：帧大小&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;设置视频的编解码器&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;retval = cv2.VideoWriter_fourcc( c1, c2, c3, c4 )&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;c1,c2,c3,c4：是视频编解码器的4字节代码，常用的有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在Windows中：DIVX（.avi）&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在OS中：MJPG（.mp4），DIVX（.avi），X264（.mkv）。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;获取视频的一帧图像&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ret, frame = cap.read()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ret：若获取成功返回True，获取失败，返回False&lt;/li&gt;
&lt;li&gt;frame：获取到的某一帧的图像&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;某一帧图像写入视频&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;out.write()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;释放资源&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cap.release()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;out.release()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;示例代码-1&#34;&gt;示例代码：&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; cv2 &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; cv&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 1. 读取视频&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cap = cv.VideoCapture(&lt;span class=&#34;string&#34;&gt;&amp;quot;DOG.wmv&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2. 获取图像的属性（宽和高，）,并将其转换为整数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;frame_width = &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;(cap.get(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;frame_height = &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;(cap.get(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3. 创建保存视频的对象，设置编码格式，帧率，图像的宽高等&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;out = cv.VideoWriter(&lt;span class=&#34;string&#34;&gt;&amp;#x27;outpy.avi&amp;#x27;&lt;/span&gt;,cv.VideoWriter_fourcc(&lt;span class=&#34;string&#34;&gt;&amp;#x27;M&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;J&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;P&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;G&amp;#x27;&lt;/span&gt;), &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, (frame_width,frame_height))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 4.获取视频中的每一帧图像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ret, frame = cap.read()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ret == &lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;: &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 5.将每一帧图像写入到输出文件中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        out.write(frame)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 6.释放资源&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cap.release()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;out.release()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cv.destroyAllWindows()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;视频追踪&#34;&gt;视频追踪&lt;/h1&gt;
&lt;h2 id=&#34;meanshift算法&#34;&gt;&lt;code&gt;meanshift算法&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;假设有一堆点集，还有一个小的窗口，这个窗口可能是圆形的，现在你可能要移动这个窗口到点集密度最大的区域当中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image1-0784863-1684561795932-3.jpg&#34; style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;最开始的窗口是蓝色圆环的区域，命名为&lt;span class=&#34;math inline&#34;&gt;\(C1\)&lt;/span&gt;。蓝色圆环的圆心用一个蓝色的矩形标注，命名为&lt;span class=&#34;math inline&#34;&gt;\(C1_o\)&lt;/span&gt;。而窗口中所有点的点集构成的质心在蓝色圆形点&lt;span class=&#34;math inline&#34;&gt;\(C1_r\)&lt;/span&gt;处，显然圆环的形心和质心并不重合。所以，移动蓝色的窗口，使得形心与之前得到的质心重合。在新移动后的圆环的区域当中再次寻找圆环当中所包围点集的质心，然后再次移动，通常情况下，形心和质心是不重合的。不断执行上面的移动过程，直到形心和质心大致重合结束。 这样，最后圆形的窗口会落到像素分布最大的地方，也就是图中的绿色圈，命名为&lt;span class=&#34;math inline&#34;&gt;\(C2\)&lt;/span&gt;。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;首先在图像上选定一个目标区域&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;计算选定区域的直方图分布，一般是&lt;code&gt;HSV&lt;/code&gt;色彩空间的直方图。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对下一帧图像&lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt;同样计算直方图分布。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;计算图像&lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt;当中与选定区域直方图分布最为相似的区域，使用&lt;code&gt;meanshift算法&lt;/code&gt;将选定区域沿着最为相似的部分进行移动，直到找到最相似的区域，便完成了在图像&lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt;中的目标追踪。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;重复3、4的过程，就完成整个视频目标追踪。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image2-0785334-1684562460307-7.gif&#34;  style=&#34;zoom: 80%;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通常情况下使用&lt;strong&gt;直方图反向投影&lt;/strong&gt;得到的图像和第一帧目标对象的起始位置，目标对象的移动会反映到直方图反向投影图中，&lt;code&gt;meanshift 算法&lt;/code&gt;把窗口移动到反向投影图像中灰度密度最大的区域。&lt;/p&gt;
&lt;p&gt;直方图反向投影的流程是：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;假设我们有一张&lt;span class=&#34;math inline&#34;&gt;\(100\times100\)&lt;/span&gt;的输入图像，有一张&lt;span class=&#34;math inline&#34;&gt;\(10\times10\)&lt;/span&gt;的模板图像，&lt;/li&gt;
&lt;li&gt;从输入图像的左上角&lt;span class=&#34;math inline&#34;&gt;\((0,0)\)&lt;/span&gt;开始，切割一块&lt;span class=&#34;math inline&#34;&gt;\((0,0)\)&lt;/span&gt;至&lt;span class=&#34;math inline&#34;&gt;\((10,10)\)&lt;/span&gt;的临时图像，&lt;/li&gt;
&lt;li&gt;生成临时图像的直方图，&lt;/li&gt;
&lt;li&gt;用临时图像的直方图和模板图像的直方图对比，对比结果记为&lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt;，&lt;/li&gt;
&lt;li&gt;直方图对比结果&lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt;，就是结果图像&lt;span class=&#34;math inline&#34;&gt;\((0,0)\)&lt;/span&gt;处的像素值，&lt;/li&gt;
&lt;li&gt;切割输入图像从&lt;span class=&#34;math inline&#34;&gt;\((0,1)\)&lt;/span&gt;至&lt;span class=&#34;math inline&#34;&gt;\((10,11)\)&lt;/span&gt;的临时图像，对比直方图，并记录到结果图像，&lt;/li&gt;
&lt;li&gt;重复1～5步直到输入图像的右下角，就形成了直方图的反向投影。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cv.meanShift(probImage, window, criteria)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;probImage: ROI区域，即目标的直方图的反向投影&lt;/li&gt;
&lt;li&gt;window： 初始搜索窗口，就是定义ROI的rect&lt;/li&gt;
&lt;li&gt;criteria: 确定窗口搜索停止的准则，主要有迭代次数达到设置的最大值，窗口中心的漂移值大于某个设定的限值等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;示例代码-2&#34;&gt;示例代码：&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; cv2 &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; cv&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 1.获取图像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cap = cv.VideoCapture(&lt;span class=&#34;string&#34;&gt;&amp;#x27;DOG.wmv&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2.获取第一帧图像，并指定目标位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ret,frame = cap.read()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2.1 目标位置（行，高，列，宽）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;r,h,c,w = &lt;span class=&#34;number&#34;&gt;197&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;141&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;208&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;track_window = (c,r,w,h)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2.2 指定目标的感兴趣区域&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;roi = frame[r:r+h, c:c+w]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3. 计算直方图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3.1 转换色彩空间（HSV）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;hsv_roi =  cv.cvtColor(roi, cv.COLOR_BGR2HSV)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3.2 去除低亮度的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# mask = cv.inRange(hsv_roi, np.array((0., 60.,32.)), np.array((180.,255.,255.)))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3.3 计算直方图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;roi_hist = cv.calcHist([hsv_roi],[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;],&lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;,[&lt;span class=&#34;number&#34;&gt;180&lt;/span&gt;],[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;180&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3.4 归一化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cv.normalize(roi_hist,roi_hist,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;255&lt;/span&gt;,cv.NORM_MINMAX)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 4. 目标追踪&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 4.1 设置窗口搜索终止条件：最大迭代次数，窗口中心漂移最小值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;term_crit = ( cv.TERM_CRITERIA_EPS | cv.TERM_CRITERIA_COUNT, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 4.2 获取每一帧图像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ret ,frame = cap.read()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ret == &lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 4.3 计算直方图的反向投影&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        hsv = cv.cvtColor(frame, cv.COLOR_BGR2HSV)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        dst = cv.calcBackProject([hsv],[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;],roi_hist,[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;180&lt;/span&gt;],&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 4.4 进行meanshift追踪&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ret, track_window = cv.meanShift(dst, track_window, term_crit)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 4.5 将追踪的位置绘制在视频上，并进行显示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        x,y,w,h = track_window&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        img2 = cv.rectangle(frame, (x,y), (x+w,y+h), &lt;span class=&#34;number&#34;&gt;255&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cv.imshow(&lt;span class=&#34;string&#34;&gt;&amp;#x27;frame&amp;#x27;&lt;/span&gt;,img2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; cv.waitKey(&lt;span class=&#34;number&#34;&gt;60&lt;/span&gt;) &amp;amp; &lt;span class=&#34;number&#34;&gt;0xFF&lt;/span&gt; == &lt;span class=&#34;built_in&#34;&gt;ord&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;q&amp;#x27;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 5. 资源释放        &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cap.release()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cv.destroyAllWindows()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191011180244485-1684561868819-5.png&#34;  style=&#34;zoom: 50%;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;camshift算法&#34;&gt;Camshift算法&lt;/h1&gt;
&lt;p&gt;检测的窗口的大小是固定的，而狗狗由近及远是一个逐渐变小的过程，固定的窗口是不合适的。所以需要根据目标的大小和角度来对窗口的大小和角度进行修正。&lt;/p&gt;
&lt;p&gt;连续自适应&lt;code&gt;MeanShift&lt;/code&gt;(Continuously Adaptive Mean-Shift，&lt;a href=&#34;https://baike.baidu.com/item/Camshift/5302311&#34;&gt;Camshift&lt;/a&gt;)算法是对&lt;code&gt;MeanShift算法&lt;/code&gt;的改进算法，可随着跟踪目标的大小变化实时调整搜索窗口的大小，具有较好的跟踪效果。&lt;/p&gt;
&lt;p&gt;首先应用&lt;code&gt;meanshift&lt;/code&gt;，一旦&lt;code&gt;meanshift&lt;/code&gt;收敛，它就会更新窗口的大小，还计算最佳拟合椭圆的方向，从而根据目标的位置和大小更新搜索窗口。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image4-1684563103560-9.gif&#34;  style=&#34;zoom: 80%;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;示例代码-3&#34;&gt;示例代码：&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; cv2 &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; cv&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 1.获取图像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cap = cv.VideoCapture(&lt;span class=&#34;string&#34;&gt;&amp;#x27;DOG.wmv&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2.获取第一帧图像，并指定目标位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ret,frame = cap.read()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2.1 目标位置（行，高，列，宽）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;r,h,c,w = &lt;span class=&#34;number&#34;&gt;197&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;141&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;208&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;track_window = (c,r,w,h)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2.2 指定目标的感兴趣区域&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;roi = frame[r:r+h, c:c+w]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3. 计算直方图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3.1 转换色彩空间（HSV）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;hsv_roi =  cv.cvtColor(roi, cv.COLOR_BGR2HSV)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3.2 去除低亮度的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# mask = cv.inRange(hsv_roi, np.array((0., 60.,32.)), np.array((180.,255.,255.)))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3.3 计算直方图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;roi_hist = cv.calcHist([hsv_roi],[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;],&lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;,[&lt;span class=&#34;number&#34;&gt;180&lt;/span&gt;],[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;180&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3.4 归一化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cv.normalize(roi_hist,roi_hist,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;255&lt;/span&gt;,cv.NORM_MINMAX)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 4. 目标追踪&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 4.1 设置窗口搜索终止条件：最大迭代次数，窗口中心漂移最小值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;term_crit = ( cv.TERM_CRITERIA_EPS | cv.TERM_CRITERIA_COUNT, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 4.2 获取每一帧图像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ret ,frame = cap.read()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ret == &lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 4.3 计算直方图的反向投影&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        hsv = cv.cvtColor(frame, cv.COLOR_BGR2HSV)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        dst = cv.calcBackProject([hsv],[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;],roi_hist,[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;180&lt;/span&gt;],&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 4.4 进行camshift追踪&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   	 	ret, track_window = cv.CamShift(dst, track_window, term_crit)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 绘制追踪结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        pts = cv.boxPoints(ret)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        pts = np.int0(pts)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        img2 = cv.polylines(frame,[pts],&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;255&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cv.imshow(&lt;span class=&#34;string&#34;&gt;&amp;#x27;frame&amp;#x27;&lt;/span&gt;,img2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; cv.waitKey(&lt;span class=&#34;number&#34;&gt;60&lt;/span&gt;) &amp;amp; &lt;span class=&#34;number&#34;&gt;0xFF&lt;/span&gt; == &lt;span class=&#34;built_in&#34;&gt;ord&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;q&amp;#x27;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 5. 资源释放        &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cap.release()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cv.destroyAllWindows()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;总结&#34;&gt;总结&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;Meanshift&lt;/code&gt;和&lt;code&gt;camshift&lt;/code&gt;算法都各有优势，自然也有劣势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Meanshift算法&lt;/code&gt;：简单，迭代次数少，但无法解决目标的遮挡问题并且不能适应运动目标的的形状和大小变化。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;camshift算法&lt;/code&gt;：可适应运动目标的大小形状的改变，具有较好的跟踪效果，但当背景色和目标颜色接近时，容易使目标的区域变大，最终有可能导致目标跟踪丢失。&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Jupyter Notebook" />
        <updated>2023-05-20T05:31:48.000Z</updated>
    </entry>
    <entry>
        <id>https://liujk6525.github.io/OpenCV/%E5%9B%BE%E5%83%8F%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E4%B8%8E%E6%8F%8F%E8%BF%B0/</id>
        <title>图像特征提取与描述</title>
        <link rel="alternate" href="https://liujk6525.github.io/OpenCV/%E5%9B%BE%E5%83%8F%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E4%B8%8E%E6%8F%8F%E8%BF%B0/"/>
        <content type="html">&lt;h1 id=&#34;角点特征&#34;&gt;角点特征&lt;/h1&gt;
&lt;p&gt;如下图所示，蓝色框中的区域是一个平面，无论向哪个方向移动蓝色框，都是一样的。对于黑色框中的区域，它是一个边缘。如果沿垂直方向移动，它会改变。但是如果沿水平方向移动就不会改变。而红色框中的角点，无论你向那个方向移动，得到的结果都不同，这说明它是唯一的。 所以说，角点是一个好的图像特征。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191008141945745-1684510965118-1.png&#34;  style=&#34;zoom: 80%;&#34; /&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h1 id=&#34;harris和shi-tomas算法&#34;&gt;Harris和Shi-Tomas算法&lt;/h1&gt;
&lt;h2 id=&#34;harris角点检测&#34;&gt;Harris角点检测&lt;/h2&gt;
&lt;p&gt;Harris角点检测的思想是通过图像的局部的小窗口观察图像，角点的特征是窗口沿任意方向移动都会导致图像灰度的明显变化，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191008144647540-1684511183358-3.png&#34;  style=&#34;zoom: 33%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;将局部窗口向各个方向移动&lt;span class=&#34;math inline&#34;&gt;\((u,v)\)&lt;/span&gt;，并计算所有灰度差异的总和，表达式如下： &lt;span class=&#34;math display&#34;&gt;\[
E(u,v)=\sum_{x,y}w(x,y)[I(x+u,y+v)-I(x,y)]^2
\]&lt;/span&gt; 其中&lt;span class=&#34;math inline&#34;&gt;\(E(u,v)\)&lt;/span&gt;是局部窗口的图像灰度，&lt;span class=&#34;math inline&#34;&gt;\(I(x+u,y+v)\)&lt;/span&gt;是平移后的图像灰度，&lt;span class=&#34;math inline&#34;&gt;\(w(x,y)\)&lt;/span&gt;是窗口函数，该可以是矩形窗口，也可以是对每一个像素赋予不同权重的高斯窗口，如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191008153014984-1684511417820-5.png&#34;  style=&#34;zoom: 50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;角点检测中使&lt;span class=&#34;math inline&#34;&gt;\(E(u,v)\)&lt;/span&gt;的值最大。利用一阶泰勒展开有： &lt;span class=&#34;math display&#34;&gt;\[
I(x+u,y+v)=I(x,y)+I_xu+I_yv
\]&lt;/span&gt; 其中&lt;span class=&#34;math inline&#34;&gt;\(I_x\)&lt;/span&gt;和&lt;span class=&#34;math inline&#34;&gt;\(I_y\)&lt;/span&gt;是沿&lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;和&lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;方向的导数，可用&lt;code&gt;sobel算子&lt;/code&gt;计算 &lt;span class=&#34;math display&#34;&gt;\[
E(u,v)=\sum_{x,y}w(x,y)[I(x+u,y+v)-I(x,y)]^2
\]&lt;/span&gt; &lt;span class=&#34;math display&#34;&gt;\[
=\sum_{x,y}w(x,y)[I(x,y)+I_xu+I_yv-I(x,y)]^2
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
=\sum_{x,y}w(x,y)[I_x^2u^2+2I_xI_yuv+I_y^2v^2]
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
=\sum_{x,y}w(x,y)\left[\begin{matrix}u&amp;amp;v\end{matrix}\right]
\left[\begin{matrix}I_x^2&amp;amp;I_xI_y\\I_xI_y&amp;amp;I_y^2\end{matrix}\right]
\left[\begin{matrix}u\\v\end{matrix}\right]
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
=\left[\begin{matrix}u&amp;amp;v\end{matrix}\right]\underbrace{\sum_{x,y}w(x,y)
\left[\begin{matrix}I_x^2&amp;amp;I_xI_y\\I_xI_y&amp;amp;I_y^2\end{matrix}\right]}_M
\left[\begin{matrix}u\\v\end{matrix}\right]=\left[\begin{matrix}u&amp;amp;v\end{matrix}\right]M
\left[\begin{matrix}u\\v\end{matrix}\right]
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt;矩阵决定了&lt;span class=&#34;math inline&#34;&gt;\(E(u,v)\)&lt;/span&gt;的取值，下面我们利用&lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt;来求角点，&lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt;是&lt;span class=&#34;math inline&#34;&gt;\(I_x\)&lt;/span&gt;和&lt;span class=&#34;math inline&#34;&gt;\(I_y\)&lt;/span&gt;的二次项函数，可以表示成椭圆的形状，椭圆的长短半轴由&lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt;的特征值&lt;span class=&#34;math inline&#34;&gt;\(\lambda_1\)&lt;/span&gt;和&lt;span class=&#34;math inline&#34;&gt;\(\lambda_2\)&lt;/span&gt;决定，方向由特征矢量决定，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191008160908338-1684512358754-7.png&#34;  style=&#34;zoom: 60%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;椭圆函数特征值与图像中的角点、直线（边缘）和平面之间的关系如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191008161040473-1684512385628-9.png&#34;  style=&#34;zoom: 45%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;共可分为三种情况：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;图像中的直线。一个特征值大，另一个特征值小，&lt;span class=&#34;math inline&#34;&gt;\(\lambda_1&amp;gt;&amp;gt;\lambda_2\)&lt;/span&gt;或 &lt;span class=&#34;math inline&#34;&gt;\(\lambda_2&amp;gt;&amp;gt;\lambda_1\)&lt;/span&gt;。椭圆函数值在某一方向上大，在其他方向上小。&lt;/li&gt;
&lt;li&gt;图像中的平面。两个特征值都小，且近似相等；椭圆函数数值在各个方向上都小。&lt;/li&gt;
&lt;li&gt;图像中的角点。两个特征值都大，且近似相等，椭圆函数在所有方向都增大&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Harris给出的角点计算方法并不需要计算具体的特征值，而是计算一个&lt;strong&gt;角点响应值&lt;span class=&#34;math inline&#34;&gt;\(R\)&lt;/span&gt;&lt;/strong&gt;来判断角点。&lt;span class=&#34;math inline&#34;&gt;\(R\)&lt;/span&gt;的计算公式是 &lt;span class=&#34;math display&#34;&gt;\[
R=detM-\alpha(traceM)^2\\
detM=\lambda_1\lambda_2\\
traceM=\lambda_1+\lambda_2
\]&lt;/span&gt; 式中，&lt;span class=&#34;math inline&#34;&gt;\(detM\)&lt;/span&gt;为矩阵&lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt;的行列式；&lt;span class=&#34;math inline&#34;&gt;\(traceM\)&lt;/span&gt;为矩阵&lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt;的迹；&lt;span class=&#34;math inline&#34;&gt;\(\alpha\)&lt;/span&gt;为常数，取值范围为0.04~0.06。&lt;/p&gt;
&lt;p&gt;如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191008161904372-1684512700094-11.png&#34;  style=&#34;zoom: 50%;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当R为大数值的正数时是角点&lt;/li&gt;
&lt;li&gt;当R为大数值的负数时是边界&lt;/li&gt;
&lt;li&gt;当R为小数是认为是平坦区域&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;dst=cv.cornerHarris(src, blockSize, ksize, k)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;img：数据类型为 ﬂoat32 的输入图像。&lt;/li&gt;
&lt;li&gt;blockSize：角点检测中要考虑的邻域大小。&lt;/li&gt;
&lt;li&gt;ksize：&lt;code&gt;sobel算子&lt;/code&gt;求导使用的核大小。&lt;/li&gt;
&lt;li&gt;k：角点检测方程中的自由参数，取值参数为 [0.04，0.06]。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;示例代码&#34;&gt;示例代码&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; cv2 &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; cv&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 1 读取图像，并转换成灰度图像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img = cv.imread(&lt;span class=&#34;string&#34;&gt;&amp;#x27;./image/chessboard.jpg&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2 角点检测&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2.1 输入图像必须是 float32&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;gray = np.float32(gray)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2.2 最后一个参数在 0.04 到 0.05 之间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dst = cv.cornerHarris(gray,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0.04&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3 设置阈值，将角点绘制出来，阈值根据图像进行选择&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img[dst&amp;gt;&lt;span class=&#34;number&#34;&gt;0.001&lt;/span&gt;*dst.&lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;()] = [&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;255&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 4 图像显示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.figure(figsize=(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;),dpi=&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.imshow(img[:,:,::-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]),plt.title(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Harris角点检测&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.xticks([]), plt.yticks([])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191008164344988-1684512767151-13.png&#34;  style=&#34;zoom: 33%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Harris角点检测的优缺点：&lt;/p&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;旋转不变性，椭圆转过一定角度但是其形状保持不变（特征值保持不变）&lt;/li&gt;
&lt;li&gt;对于图像灰度的仿射变化具有部分的不变性，由于仅仅使用了图像的一介导数，对于图像灰度平移变化不变；对于图像灰度尺度变化不变&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对尺度很敏感，不具备几何尺度不变性。&lt;/li&gt;
&lt;li&gt;提取的角点是像素级的&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;shi-tomasi角点检测&#34;&gt;Shi-Tomasi角点检测&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Shi-Tomasi算法&lt;/code&gt;是对&lt;code&gt;Harris算法&lt;/code&gt;的改进，具体地：若矩阵M的两个特征值&lt;span class=&#34;math inline&#34;&gt;\(\lambda_1,\lambda_2\)&lt;/span&gt;中较小的一个大于阈值，则认为他是角点，即： &lt;span class=&#34;math display&#34;&gt;\[
R=min(\lambda_1,\lambda_2)
\]&lt;/span&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;corners = cv2.goodFeaturesToTrack ( image, maxcorners, qualityLevel, minDistance )&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Image：输入灰度图像&lt;/li&gt;
&lt;li&gt;maxCorners：获取角点数的数目。&lt;/li&gt;
&lt;li&gt;qualityLevel：指出最低可接受的角点质量水平，在0-1之间。&lt;/li&gt;
&lt;li&gt;minDistance：角点之间最小的欧式距离，避免得到相邻特征点。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;返回：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Corners: 搜索到的角点，在这里所有低于质量水平的角点被排除掉，然后把合格的角点按质量排序，然后将质量较好的角点附近（小于最小欧式距离）的角点删掉，最后找到maxCorners个角点返回。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;示例代码-1&#34;&gt;示例代码&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; cv2 &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; cv&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 1 读取图像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img = cv.imread(&lt;span class=&#34;string&#34;&gt;&amp;#x27;./image/tv.jpg&amp;#x27;&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;gray = cv.cvtColor(img,cv.COLOR_BGR2GRAY)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2 角点检测&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;corners = cv.goodFeaturesToTrack(gray,&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0.01&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3 绘制角点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; corners:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x,y = i.ravel()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cv.circle(img,(x,y),&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;255&lt;/span&gt;),-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 4 图像展示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.figure(figsize=(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;),dpi=&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.imshow(img[:,:,::-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]),plt.title(&lt;span class=&#34;string&#34;&gt;&amp;#x27;shi-tomasi角点检测&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.xticks([]), plt.yticks([])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191008174257711.png&#34;  style=&#34;zoom: 45%;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;sift和surf算法&#34;&gt;SIFT和SURF算法&lt;/h1&gt;
&lt;h2 id=&#34;sift算法&#34;&gt;&lt;a href=&#34;https://baike.baidu.com/item/SIFT/1396275?fr=aladdin&#34;&gt;SIFT算法&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Harris&lt;/code&gt;和&lt;code&gt;Shi-Tomasi&lt;/code&gt;角点检测算法具有旋转不变性，但不具有尺度不变性，以下图为例，在左侧小图中可以检测到角点，但是图像被放大后，在使用同样的窗口，就检测不到角点了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191008181535222-1684547971195-2.png&#34;  style=&#34;zoom: 80%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;尺度不变特征转换&lt;/strong&gt;（Scale-invariant feature transform，SIFT）。此算法由 David Lowe在1999年所发表，2004年完善总结。它的实质是在不同的尺度空间上查找关键点(特征点)，并计算出关键点的方向。SIFT所查找到的关键点是一些十分突出，不会因光照，仿射变换和噪音等因素而变化的点，如&lt;strong&gt;角点、边缘点、暗区的亮点及亮区的暗点&lt;/strong&gt;等。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;尺度空间极值检测：搜索所有尺度上的图像位置。通过高斯差分函数来识别潜在的对于尺度和旋转不变的关键点。&lt;/li&gt;
&lt;li&gt;关键点定位：在每个候选的位置上，通过一个拟合精细的模型来确定位置和尺度。关键点的选择依据于它们的稳定程度。&lt;/li&gt;
&lt;li&gt;关键点方向确定：基于图像局部的梯度方向，分配给每个关键点位置一个或多个方向。所有后面的对图像数据的操作都相对于关键点的方向、尺度和位置进行变换，从而保证了对于这些变换的不变性。&lt;/li&gt;
&lt;li&gt;关键点描述：在每个关键点周围的邻域内，在选定的尺度上测量图像局部的梯度。这些梯度作为关键点的描述符，它允许比较大的局部形状的变形或光照变化。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;尺度空间极值检测&#34;&gt;尺度空间极值检测&lt;/h3&gt;
&lt;p&gt;在不同的尺度空间是不能使用相同的窗口检测极值点，对小的关键点使用小的窗口，对大的关键点使用大的窗口，为了达到上述目的，使用&lt;strong&gt;尺度空间滤波器&lt;/strong&gt;。（高斯核是唯一可以产生多尺度空间的核函数）&lt;/p&gt;
&lt;p&gt;一个图像的尺度空间&lt;span class=&#34;math inline&#34;&gt;\(L(x,y,\sigma)\)&lt;/span&gt;定义为原始图像&lt;span class=&#34;math inline&#34;&gt;\(I(x,y)\)&lt;/span&gt;与一个可变尺度的2维高斯函数&lt;span class=&#34;math inline&#34;&gt;\(G(x,y,\sigma)\)&lt;/span&gt;&lt;strong&gt;卷积运算&lt;/strong&gt; ，即： &lt;span class=&#34;math display&#34;&gt;\[
L(x,y,\sigma)=G(x,y,\sigma)*I(x,y)
\]&lt;/span&gt; 其中&lt;span class=&#34;math inline&#34;&gt;\(\sigma\)&lt;/span&gt;是尺度空间因子，它决定图像的模糊程度。在大尺度下(&lt;span class=&#34;math inline&#34;&gt;\(\sigma\)&lt;/span&gt;值大)表现的是图像的概貌信息，在小尺度下(&lt;span class=&#34;math inline&#34;&gt;\(\sigma\)&lt;/span&gt;值小)表现的是图像的细节信息。&lt;/p&gt;
&lt;p&gt;在计算高斯函数的离散近似时，在大概&lt;span class=&#34;math inline&#34;&gt;\(3\sigma\)&lt;/span&gt;距离之外的像素都可以看作不起作用，这些像素的计算也就可以忽略。所以，在实际应用中，只计算&lt;span class=&#34;math inline&#34;&gt;\((6\sigma+1)\times(6\sigma+1)\)&lt;/span&gt;的高斯卷积核就可以保证相关像素影响。&lt;/p&gt;
&lt;p&gt;下面构建图像的高斯金字塔，它采用高斯函数对图像进行模糊以及降采样处理得到的， 1. 将图像扩大一倍，在扩大的图像的基础之上构建高斯金字塔， 2. 对该尺寸下图像进行高斯模糊，几幅模糊之后的图像集合构成了一个Octave， 3. 对该Octave下选择一幅图像进行下采样，长和宽分别缩短一倍，图像面积变为原来四分之一。这幅图像就是下一个Octave的初始图像，在初始图像的基础上完成属于这个Octave的高斯模糊处理， 4. 以此类推，完成整个算法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191009110944907-1684549584975-4.png&#34;  style=&#34;zoom: 40%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;利用高斯拉普拉斯算子(Laplacian of Gaussian, &lt;code&gt;LoG&lt;/code&gt;)，即图像的二阶导数，可以在不同的尺度下检测图像的关键点信息，从而确定图像的特征点。但&lt;code&gt;LoG&lt;/code&gt;的计算量大，效率低。所以通过两个相邻高斯尺度空间的图像相减，得到高斯差分(Difference of Gaussians，&lt;a href=&#34;https://baike.baidu.com/item/%E9%AB%98%E6%96%AF%E5%B7%AE%E5%88%86%E5%87%BD%E6%95%B0/1597793?fr=aladdin&#34;&gt;DOG&lt;/a&gt;)来近似&lt;code&gt;LoG&lt;/code&gt;。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;构建&lt;strong&gt;高斯差分金字塔&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;将&lt;strong&gt;高斯金字塔&lt;/strong&gt;中每个Octave中相邻两层相减就构成了高斯差分金字塔。&lt;/li&gt;
&lt;li&gt;高斯差分金字塔的&lt;strong&gt;第o组第i层图&lt;/strong&gt;像是由高斯金字塔的&lt;strong&gt;第o组第i+1层减第o组第i层&lt;/strong&gt;得到的。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191009113953721-1684549912508-6.png&#34;  style=&#34;zoom: 33%;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34; type=&#34;1&#34;&gt;
&lt;li&gt;在不同的尺度空间中搜索局部最大值
&lt;ul&gt;
&lt;li&gt;对于图像中的每一个像素点而言，它需要与自己周围的&lt;span class=&#34;math inline&#34;&gt;\(8\)&lt;/span&gt;邻域，以及尺度空间中上下两层中的相邻的&lt;span class=&#34;math inline&#34;&gt;\(18(2\times9)\)&lt;/span&gt;个点相比。&lt;/li&gt;
&lt;li&gt;如果是局部最大值，它就可能是一个关键点。 &lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191009115023016-1684549955480-8.png&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/li&gt;
&lt;li&gt;搜索过程从每组的第二层开始，以第二层为当前层，对第二层的&lt;code&gt;DoG&lt;/code&gt;图像中的每个点取一个&lt;span class=&#34;math inline&#34;&gt;\(3\times3\)&lt;/span&gt;的立方体，立方体上下层为第一层与第三层。搜索得到的极值点既有位置坐标(&lt;code&gt;DoG&lt;/code&gt;的图像坐标)，又有空间尺度坐标(层坐标)。&lt;/li&gt;
&lt;li&gt;当第二层搜索完成后，再以第三层作为当前层，其过程与第二层的搜索类似。&lt;/li&gt;
&lt;li&gt;当&lt;span class=&#34;math inline&#34;&gt;\(S=3\)&lt;/span&gt;时，每组里面要搜索3层，所以在高斯差分金字塔中就有&lt;span class=&#34;math inline&#34;&gt;\(S+2\)&lt;/span&gt;层，在高斯金字塔中每组有&lt;span class=&#34;math inline&#34;&gt;\(S+3\)&lt;/span&gt;层。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;关键点定位&#34;&gt;关键点定位&lt;/h3&gt;
&lt;p&gt;由于&lt;code&gt;DoG&lt;/code&gt;对噪声和边缘比较敏感，因此在高斯差分金字塔中检测到的局部极值点需经过进一步的检验才能精确定位为特征点。&lt;/p&gt;
&lt;p&gt;使用尺度空间的泰勒级数展开来获得极值的准确位置， 如果&lt;strong&gt;极值点的灰度值小于阈值&lt;/strong&gt;（一般为0.03或0.04）就会被忽略掉。 在 OpenCV 中这种阈值被称为 contrastThreshold。&lt;/p&gt;
&lt;p&gt;欠佳的关键点在平行边缘的方向有较大的主曲率，而在垂直于边缘的方向有较小的曲率，两者的比值如果高于某个阈值（在OpenCV中叫做边界阈值），就认为该关键点为边界，将被忽略，一般该阈值为10。&lt;/p&gt;
&lt;p&gt;将低对比度和边界的关键点去除，得到的就是我们感兴趣的关键点。&lt;/p&gt;
&lt;h3 id=&#34;关键点方向确定&#34;&gt;关键点方向确定&lt;/h3&gt;
&lt;p&gt;为了实现旋转不变性，还需要为每个关键点分配一个方向角度，也就是在高斯尺度图像的邻域结构中求得一个方向基准。&lt;/p&gt;
&lt;p&gt;对于任一关键点，采集其所在高斯金字塔图像以&lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt;为半径的区域内所有像素的梯度特征（幅值和幅角），&lt;span class=&#34;math inline&#34;&gt;\(r=3\times1.5\sigma\)&lt;/span&gt;，其中&lt;span class=&#34;math inline&#34;&gt;\(\sigma\)&lt;/span&gt;是关键点所在octave的图像的尺度，可以得到对应的尺度图像。&lt;/p&gt;
&lt;p&gt;梯度的幅值和方向的计算公式为： &lt;span class=&#34;math display&#34;&gt;\[
m(x,y)=\sqrt{(L(x+1,y)-L(x-1,y))^2+(L(x,y+1)-L(x,y-1))^2}
\]&lt;/span&gt; &lt;span class=&#34;math display&#34;&gt;\[
\theta(x,y)=\arctan(\frac{L(x,y+1)-L(x,y-1)}{L(x+1,y)-L(x-1,y)}
\]&lt;/span&gt; 邻域像素梯度的计算结果如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191009143818527-1684552168908-10.png&#34;  style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;使用直方图统计关键点邻域内像素的梯度幅值和方向。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;将&lt;span class=&#34;math inline&#34;&gt;\(360^\circ\)&lt;/span&gt;分为&lt;span class=&#34;math inline&#34;&gt;\(36\)&lt;/span&gt;柱，每&lt;span class=&#34;math inline&#34;&gt;\(10^\circ\)&lt;/span&gt;为一柱，然后在以&lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt;为半径的区域内，将梯度方向在某一个柱内的像素找出来。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将他们的幅值相加在一起作为柱的高度。因为在r为半径的区域内像素的梯度幅值对中心像素的贡献是不同的，因此还需要对幅值进行加权处理，采用高斯加权，方差为&lt;span class=&#34;math inline&#34;&gt;\(1.5\sigma\)&lt;/span&gt;。 &lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191009144726492-1684552637576-16.png&#34;  style=&#34;zoom:33%;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每个特征点必须分配一个主方向，还需要一个或多个辅方向，增加辅方向的目的是为了增强图像匹配的鲁棒性。辅方向的定义是，当一个柱体的高度大于主方向柱体高度的&lt;span class=&#34;math inline&#34;&gt;\(80\%\)&lt;/span&gt;时，则该柱体所代表的的方向就是给特征点的辅方向。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;直方图的峰值，即最高的柱代表的方向是特征点邻域范围内图像梯度的主方向，但该柱体代表的角度是一个范围，所以我们还要对离散的直方图进行插值拟合，以得到更精确的方向角度值。利用抛物线对离散的直方图进行拟合。 &lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191009150008701-1684552598604-14.png&#34; style=&#34;zoom: 40%;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;获得图像关键点主方向后，使用一个带箭头的圆或直接使用箭头表示SIFT区域的三个值：中心表示特征点位置&lt;span class=&#34;math inline&#34;&gt;\((x,y)\)&lt;/span&gt;，半径表示关键点尺度&lt;span class=&#34;math inline&#34;&gt;\((\sigma)\)&lt;/span&gt;，箭头表示方向&lt;span class=&#34;math inline&#34;&gt;\((\theta)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191025112522974-1684552568027-12.png&#34;  style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;关键点描述&#34;&gt;关键点描述&lt;/h3&gt;
&lt;p&gt;为每个关键点建立一个描述符，该描述符既具有可区分性，又具有对某些变量的不变性，如光照，视角等。而且描述符不仅仅包含关键点，也包括关键点周围对其有贡献的的像素点。&lt;/p&gt;
&lt;p&gt;在关键点所在的高斯尺度图像上生成对应的描述符。以特征点为中心，将其附近邻域划分为&lt;span class=&#34;math inline&#34;&gt;\(d\times d\)&lt;/span&gt;个子区域（一般取&lt;span class=&#34;math inline&#34;&gt;\(d=4\)&lt;/span&gt;)，每个子区域都是一个正方形，边长为&lt;span class=&#34;math inline&#34;&gt;\(3\sigma\)&lt;/span&gt;，考虑到实际计算时，需进行三次线性插值，所以特征点邻域的为&lt;span class=&#34;math inline&#34;&gt;\(3\sigma(d+1)\times3\sigma(d+1)\)&lt;/span&gt;的范围，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191009161647267-1684552834400-18.png&#34;  style=&#34;zoom: 67%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;为了保证特征点的旋转不变性，以特征点为中心，将坐标轴旋转为关键点的主方向，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191009161756423-1684552865043-20.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;计算子区域内的像素的梯度，并按照&lt;span class=&#34;math inline&#34;&gt;\(\sigma=0.5d\)&lt;/span&gt;进行高斯加权，然后插值计算得到每个种子点的八个方向的梯度，插值方法如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191009162914982-1684552898801-22.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;每个种子点的梯度都是由覆盖其的&lt;span class=&#34;math inline&#34;&gt;\(4\)&lt;/span&gt;个子区域插值而得的。如图中的红色点，落在第&lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;行和第&lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;行之间，对这两行都有贡献。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对第&lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;行第&lt;span class=&#34;math inline&#34;&gt;\(3\)&lt;/span&gt;列种子点的贡献因子为&lt;span class=&#34;math inline&#34;&gt;\(dr\)&lt;/span&gt;，对第&lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;行第&lt;span class=&#34;math inline&#34;&gt;\(3\)&lt;/span&gt;列的贡献因子为&lt;span class=&#34;math inline&#34;&gt;\(1-dr\)&lt;/span&gt;，&lt;/li&gt;
&lt;li&gt;对邻近两列的贡献因子为&lt;span class=&#34;math inline&#34;&gt;\(dc\)&lt;/span&gt;和&lt;span class=&#34;math inline&#34;&gt;\(1-dc\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;对邻近两个方向的贡献因子为&lt;span class=&#34;math inline&#34;&gt;\(do\)&lt;/span&gt;和&lt;span class=&#34;math inline&#34;&gt;\(1-do\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最终累加在每个方向上的梯度大小为： &lt;span class=&#34;math display&#34;&gt;\[
weight=w*dr^k(1-dr)^{(1-k)}dc^m(1-dc)^{1-m}do^n(1-do^{1-n})
\]&lt;/span&gt; 其中&lt;span class=&#34;math inline&#34;&gt;\(k,m,n\)&lt;/span&gt;为0或为1。 如上统计&lt;span class=&#34;math inline&#34;&gt;\(4\times4\times8=128\)&lt;/span&gt;个梯度信息即为该关键点的特征向量，按照特征点的对每个关键点的特征向量进行排序，就得到了SIFT特征描述向量。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实例化sift&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sift = cv.xfeatures2d.SIFT_create()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;利用&lt;code&gt;sift.detectAndCompute()&lt;/code&gt;检测关键点并计算&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;kp,des = sift.detectAndCompute(gray,&lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gray：进行关键点检测的图像，注意是灰度图像&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;返回：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kp：关键点信息，包括位置，尺度，方向信息&lt;/li&gt;
&lt;li&gt;des：关键点描述符，每个关键点对应128个梯度信息的特征向量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;将关键点检测结果绘制在图像上&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cv.drawKeypoints(image, keypoints, outputimage, color, flags)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;image: 原始图像&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;keypoints：关键点信息，将其绘制在图像上&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;outputimage：输出图片，可以是原始图像&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;color：颜色设置，通过修改b、g、r的值,更改画笔的颜色&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;flags：绘图功能的标识设置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;cv2.DRAW_MATCHES_FLAGS_DEFAULT：创建输出图像矩阵，使用现存的输出图像绘制匹配对和特征点，对每一个关键点只绘制中间点&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;cv2.DRAW_MATCHES_FLAGS_DRAW_OVER_OUTIMG：不创建输出图像矩阵，而是在输出图像上绘制匹配对&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS：对每一个特征点绘制带大小和方向的关键点图形&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;cv2.DRAW_MATCHES_FLAGS_NOT_DRAW_SINGLE_POINTS：单点的特征点不被绘制&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;示例代码-2&#34;&gt;示例代码：&lt;/h3&gt;
&lt;p&gt;利用SIFT算法在中央电视台的图片上检测关键点，并将其绘制出来：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; cv2 &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; cv &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 1 读取图像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img = cv.imread(&lt;span class=&#34;string&#34;&gt;&amp;#x27;./image/tv.jpg&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;gray= cv.cvtColor(img,cv.COLOR_BGR2GRAY)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2 sift关键点检测&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2.1 实例化sift对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sift = cv.xfeatures2d.SIFT_create()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2.2 关键点检测：kp关键点信息包括方向，尺度，位置信息，des是关键点的描述符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;kp,des=sift.detectAndCompute(gray,&lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2.3 在图像上绘制关键点的检测结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cv.drawKeypoints(img,kp,img,flags=cv.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3 图像显示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.figure(figsize=(&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;),dpi=&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.imshow(img[:,:,::-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]),plt.title(&lt;span class=&#34;string&#34;&gt;&amp;#x27;sift检测&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.xticks([]), plt.yticks([])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191009181525538-1684553395070-26.png&#34;  style=&#34;zoom: 50%;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;surf算法&#34;&gt;SURF算法&lt;/h2&gt;
&lt;p&gt;使用 SIFT 算法进行关键点检测和描述的执行速度比较慢， 需要速度更快的算法。 2006 年 Bay提出了 SURF 算法，是SIFT算法的增强版，它的计算量小，运算速度快，提取的特征与SIFT几乎相同，将其与SIFT算法对比如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191016163330835-1684553312569-24.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;fast和orb算法&#34;&gt;Fast和ORB算法&lt;/h1&gt;
&lt;h2 id=&#34;fast算法&#34;&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Features_from_accelerated_segment_test&#34;&gt;Fast算法&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Fast(Features from accelerated segment test)是一种角点检测算法，Edward Rosten和Tom Drummond在2006年提出了FAST算法，并在2010年对其进行了修正。该算法的原理是取图像中检测点，以该点为圆心的周围邻域内像素点判断检测点是否为角点，通俗的讲就是&lt;strong&gt;若一个像素周围有一定数量的像素与该点像素值不同，则认为其为角点&lt;/strong&gt;。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;在图像中选取一个像素点&lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt;，来判断它是不是关键点。&lt;span class=&#34;math display&#34;&gt;\[I_p\]&lt;/span&gt;等于像素点&lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt;的灰度值。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;以&lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt;为半径画圆，覆盖&lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt;点周围的&lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt;个像素，通常情况设置&lt;span class=&#34;math inline&#34;&gt;\(r=3\)&lt;/span&gt;，则&lt;span class=&#34;math inline&#34;&gt;\(M=16\)&lt;/span&gt;。 &lt;img src=&#34;/imgs/$%7Bfiilename%7D/image17-1684555943527-30.jpg&#34;  style=&#34;zoom: 67%;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置阈值&lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt;，如果在这&lt;span class=&#34;math inline&#34;&gt;\(16\)&lt;/span&gt;个像素点中存在&lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;个连续像素点的灰度值都高于&lt;span class=&#34;math inline&#34;&gt;\(I_p+t\)&lt;/span&gt;，或者低于&lt;span class=&#34;math inline&#34;&gt;\(I_p-t\)&lt;/span&gt;，那么像素点&lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt;就被认为是一个角点。如上图中的虚线所示，一般取值为&lt;span class=&#34;math inline&#34;&gt;\(n=12\)&lt;/span&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;采用一种&lt;strong&gt;非特征点判别&lt;/strong&gt;的方法：首先对候选点的周围每个&lt;span class=&#34;math inline&#34;&gt;\(90^\circ\)&lt;/span&gt;的点（&lt;span class=&#34;math inline&#34;&gt;\(1,9,5,13\)&lt;/span&gt;）进行测试(先测试&lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;和&lt;span class=&#34;math inline&#34;&gt;\(9\)&lt;/span&gt;，如果它们符合阈值要求再测试&lt;span class=&#34;math inline&#34;&gt;\(5\)&lt;/span&gt;和&lt;span class=&#34;math inline&#34;&gt;\(13\)&lt;/span&gt;)。如果&lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt;是角点，那么这四个点中至少有 3 个要符合阈值要求，否则直接剔除。对保留下来的点再继续进行测试。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;机器学习的角点检测器&#34;&gt;机器学习的角点检测器&lt;/h3&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;选择一组训练图片&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用&lt;code&gt;FAST算法&lt;/code&gt;找出每幅图像的特征点，对图像中的每一个特征点，将其周围的&lt;span class=&#34;math inline&#34;&gt;\(16\)&lt;/span&gt;个像素存储构成一个向量&lt;span class=&#34;math inline&#34;&gt;\(P\)&lt;/span&gt;。 &lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191010114459269-1684556434454-32.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每一个特征点的 16 像素点都属于下列三类中的一种 $$ S_{px}=&lt;/p&gt;
&lt;span class=&#34;math display&#34;&gt;\[\begin{cases}
d\quad I_{p\rightarrow x}\leq I_{p}-t\quad (darker)\\
s\quad I_{p}-t\leq I_{p\rightarrow x}\leq I_{p}+t\quad (similar)\\
b\quad I_{p}+t\leq I_{p\rightarrow x}\quad (brighter)\\

\end{cases}\]&lt;/span&gt;
&lt;p&gt;$$&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;根据这些像素点的分类，特征向量&lt;span class=&#34;math inline&#34;&gt;\(P\)&lt;/span&gt;也被分为&lt;span class=&#34;math inline&#34;&gt;\(3\)&lt;/span&gt;个子集(&lt;span class=&#34;math inline&#34;&gt;\(P_d,P_s,P_b\)&lt;/span&gt;)，&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;定义一个新的布尔变量&lt;span class=&#34;math inline&#34;&gt;\(K_p\)&lt;/span&gt;，如果&lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt;是角点就设置为&lt;span class=&#34;math inline&#34;&gt;\(True\)&lt;/span&gt;，如果不是就设置为&lt;span class=&#34;math inline&#34;&gt;\(False\)&lt;/span&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;利用特征值向量&lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt;，目标值是&lt;span class=&#34;math inline&#34;&gt;\(K_p\)&lt;/span&gt;，训练&lt;span class=&#34;math inline&#34;&gt;\(ID3\)&lt;/span&gt;树（决策树分类器）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将构建好的决策树运用于其他图像的快速检测。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;非极大值抑制&#34;&gt;非极大值抑制&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;在筛选出来的候选角点中有很多是紧挨在一起的，需要通过非极大值抑制来消除这种影响。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为所有的候选角点确定一个打分函数&lt;span class=&#34;math inline&#34;&gt;\(V\)&lt;/span&gt;&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;分别计算&lt;span class=&#34;math inline&#34;&gt;\(I_p\)&lt;/span&gt;与圆上&lt;span class=&#34;math inline&#34;&gt;\(16\)&lt;/span&gt;个点的像素值差值，取绝对值，&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将这16个绝对值相加，就得到了&lt;span class=&#34;math inline&#34;&gt;\(V\)&lt;/span&gt;的值 &lt;span class=&#34;math display&#34;&gt;\[
V = \sum_{i}^{16}|I_p-I_i|
\]&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;比较毗邻候选角点的&lt;span class=&#34;math inline&#34;&gt;\(V\)&lt;/span&gt;值，把&lt;span class=&#34;math inline&#34;&gt;\(V\)&lt;/span&gt;值较小的候选角点去除掉。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;实例化Fast&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;fast = =cv.FastFeatureDetector_create( threshold, nonmaxSuppression)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;threshold：阈值t，默认值10&lt;/li&gt;
&lt;li&gt;nonmaxSuppression：是否进行非极大值抑制，默认值True&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;返回：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fast：创建的FastFeatureDetector对象&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;利用&lt;code&gt;fast.detect()&lt;/code&gt;检测关键点，没有对应的关键点描述&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;kp = fast.detect(grayImg, &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gray: 进行关键点检测的图像，注意是灰度图像&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;返回：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kp: 关键点信息，包括位置，尺度，方向信息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;将关键点检测结果绘制在图像上&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cv.drawKeypoints(image, keypoints, outputimage, color, flags)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;示例代码-3&#34;&gt;示例代码：&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; cv2 &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; cv&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; matplotlib &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 1 读取图像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img = cv.imread(&lt;span class=&#34;string&#34;&gt;&amp;#x27;./image/tv.jpg&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2 Fast角点检测&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2.1 创建一个Fast对象，传入阈值，注意：可以处理彩色空间图像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fast = cv.FastFeatureDetector_create(threshold=&lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2.2 检测图像上的关键点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;kp = fast.detect(img,&lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2.3 在图像上绘制关键点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img2 = cv.drawKeypoints(img, kp, &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;, color=(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;255&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2.4 输出默认参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;Threshold: &amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;format&lt;/span&gt;(fast.getThreshold()) )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;nonmaxSuppression:&amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;format&lt;/span&gt;(fast.getNonmaxSuppression()) )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;neighborhood: &amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;format&lt;/span&gt;(fast.getType()) )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;Total Keypoints with nonmaxSuppression: &amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;format&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(kp)) )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2.5 关闭非极大值抑制&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fast.setNonmaxSuppression(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;kp = fast.detect(img,&lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;Total Keypoints without nonmaxSuppression: &amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;format&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(kp)) )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2.6 绘制为进行非极大值抑制的结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img3 = cv.drawKeypoints(img, kp, &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;, color=(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;255&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3 绘制图像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fig,axes=plt.subplots(nrows=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,ncols=&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,figsize=(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;),dpi=&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].imshow(img2[:,:,::-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].set_title(&lt;span class=&#34;string&#34;&gt;&amp;quot;加入非极大值抑制&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].imshow(img3[:,:,::-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].set_title(&lt;span class=&#34;string&#34;&gt;&amp;quot;未加入非极大值抑制&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191010120822413-1684557401983-34.png&#34;  style=&#34;zoom: 50%;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;orb-算法&#34;&gt;&lt;a href=&#34;https://medium.com/data-breach/introduction-to-orb-oriented-fast-and-rotated-brief-4220e8ec40cf&#34;&gt;ORB 算法&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ORB（Oriented Fast and Rotated Brief）可以用来对图像中的关键点快速创建特征向量，并用这些特征向量来识别图像中的对象。&lt;/p&gt;
&lt;p&gt;ORB算法结合了Fast和Brief算法，提出了构造金字塔，为Fast特征点添加了方向，从而使得关键点具有了尺度不变性和旋转不变性。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;构造尺度金字塔
&lt;ul&gt;
&lt;li&gt;金字塔共有&lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;层，与SIFT不同的是，每一层仅有一幅图像。第&lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt;层的尺度为&lt;span class=&#34;math inline&#34;&gt;\(\sigma_s=\sigma_0^s\)&lt;/span&gt;， &lt;span class=&#34;math inline&#34;&gt;\(\sigma_0\)&lt;/span&gt;是初始尺度，默认为&lt;span class=&#34;math inline&#34;&gt;\(1.2\)&lt;/span&gt;，原图在第&lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;层。第&lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt;层图像的大小&lt;span class=&#34;math inline&#34;&gt;\(Size = (H*\frac{1}{\sigma_s})\times(W*\frac{1}{\sigma_s})\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;在不同的尺度上利用&lt;code&gt;Fast算法&lt;/code&gt;检测特征点
&lt;ul&gt;
&lt;li&gt;采用Harris角点响应函数，根据角点的响应值排序，选取前&lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt;个特征点，作为本尺度的特征点。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;计算特征点的主方向
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;计算以特征点为圆心，半径为&lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt;的圆形邻域内的灰度质心位置，将从特征点位置到质心位置的方向做特征点的主方向。 &lt;span class=&#34;math display&#34;&gt;\[
m_{pq}=\sum_{x,y}x^py^qI(x,y)
\]&lt;/span&gt; 质心位置： &lt;span class=&#34;math inline&#34;&gt;\(C=(\frac{m_{10}}{m_{00}},\frac{m_{01}}{m_{10}})\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;主方向： &lt;span class=&#34;math inline&#34;&gt;\(\theta = arctan(m_{01},m_{10})\)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;brief算法&#34;&gt;BRIEF算法&lt;/h3&gt;
&lt;p&gt;了解决旋转不变性，将特征点的邻域旋转到主方向上利用&lt;code&gt;Brief算法&lt;/code&gt;构建特征描述符，至此就得到了ORB的特征描述向量。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Brief算法&lt;/code&gt;是一种特征描述子提取算法，并非特征点的提取算法，匹配只需要使用简单的汉明距离(Hamming Distance)利用比特之间的异或操作就可以完成。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;图像滤波
&lt;ul&gt;
&lt;li&gt;原始图像中存在噪声时，会对结果产生影响，所以需要对图像进行滤波，去除部分噪声。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;选取点对
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;以特征点为中心，取&lt;span class=&#34;math inline&#34;&gt;\(S\times S\)&lt;/span&gt;的邻域窗口，在窗口内随机选取&lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt;组点对，一般&lt;span class=&#34;math inline&#34;&gt;\(N=128,256,512\)&lt;/span&gt;，默认是&lt;span class=&#34;math inline&#34;&gt;\(256\)&lt;/span&gt;，关于选取随机点对，提供了五种形式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(x,y\)&lt;/span&gt;方向平均分布采样&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(x,y\)&lt;/span&gt;均服从&lt;span class=&#34;math inline&#34;&gt;\(Gauss(0,\frac{S^2}{25})\)&lt;/span&gt;各向同性采样&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;服从&lt;span class=&#34;math inline&#34;&gt;\(Gauss(0,\frac{S^2}{25})\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;服从&lt;span class=&#34;math inline&#34;&gt;\(Gauss(0,\frac{S^2}{100})\)&lt;/span&gt;采样&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(x,y\)&lt;/span&gt;从网格中随机获取&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;一直在&lt;span class=&#34;math inline&#34;&gt;\((0,0)\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;从网格中随机选取&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191010153907973-1684559140937-36.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;图中一条线段的两个端点就是一组点对，其中第二种方法的结果比较好。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;构建描述符
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;假设&lt;span class=&#34;math inline&#34;&gt;\(x,y\)&lt;/span&gt;是某个点对的两个端点，&lt;span class=&#34;math inline&#34;&gt;\(p(x),p(y)\)&lt;/span&gt;是两点对应的像素值， &lt;span class=&#34;math display&#34;&gt;\[
t(x,y)=\begin{cases}1 &amp;amp;if&amp;amp;p(x)&amp;gt;p(y)\\ 0&amp;amp; else\end{cases}
\]&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对每一个点对都进行上述的二进制赋值，形成&lt;code&gt;Brief&lt;/code&gt;的关键点的描述特征向量，该向量一般为&lt;span class=&#34;math inline&#34;&gt;\(128-512\)&lt;/span&gt;位的字符串，其中仅包含&lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;和&lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191010161944491-1684559749207-38.png&#34; style=&#34;zoom: 50%;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;实例化ORB&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;orb = cv.xfeatures2d.orb_create(nfeatures)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nfeatures: 特征点的最大数量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;利用&lt;code&gt;orb.detectAndCompute()&lt;/code&gt;检测关键点并计算&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;kp,des = orb.detectAndCompute(gray,&lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gray: 进行关键点检测的图像，注意是灰度图像&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;返回：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kp: 关键点信息，包括位置，尺度，方向信息&lt;/li&gt;
&lt;li&gt;des: 关键点描述符，每个关键点BRIEF特征向量，二进制字符串，&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;将关键点检测结果绘制在图像上&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cv.drawKeypoints(image, keypoints, outputimage, color, flags)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;示例代码-4&#34;&gt;示例代码：&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; cv2 &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; cv&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; matplotlib &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 1 图像读取&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img = cv.imread(&lt;span class=&#34;string&#34;&gt;&amp;#x27;./image/tv.jpg&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2 ORB角点检测&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2.1 实例化ORB对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;orb = cv.ORB_create(nfeatures=&lt;span class=&#34;number&#34;&gt;500&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2.2 检测关键点,并计算特征描述符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;kp,des = orb.detectAndCompute(img,&lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(des.shape)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3 将关键点绘制在图像上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img2 = cv.drawKeypoints(img, kp, &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;, color=(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;255&lt;/span&gt;), flags=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 4. 绘制图像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.figure(figsize=(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;),dpi=&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.imshow(img2[:,:,::-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.xticks([]), plt.yticks([])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191010162532196-1684559841023-40.png&#34;  style=&#34;zoom: 45%;&#34; /&gt;&lt;/p&gt;
</content>
        <category term="Jupyter Notebook" />
        <updated>2023-05-19T15:38:12.000Z</updated>
    </entry>
    <entry>
        <id>https://liujk6525.github.io/OpenCV/OpenCV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86-%E4%B8%8B/</id>
        <title>OpenCV图像处理(下)</title>
        <link rel="alternate" href="https://liujk6525.github.io/OpenCV/OpenCV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86-%E4%B8%8B/"/>
        <content type="html">&lt;h1 id=&#34;直方图&#34;&gt;直方图&lt;/h1&gt;
&lt;h2 id=&#34;图像直方图&#34;&gt;图像直方图&lt;/h2&gt;
&lt;p&gt;在统计学中，&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E7%9B%B4%E6%96%B9%E5%9B%BE&#34;&gt;直方图&lt;/a&gt;是一种对数据分布情况的图形表示，是一种二维统计图表，它的两个 坐标分别是统计样本和该样本对应的某个属性的度量，以长条图(bar)的形式具体表现。因为直方图的长度及宽度很适合用来表现数量上的变化，所以较容易解读差异小的数值。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;图像直方图（Image Histogram）是用以表示数字图像中亮度分布的直方图，标绘了图像中每个亮度值的像素个数。这种直方图中，横坐标的左侧为较暗的区域，而右侧为较亮的区域。因此一张较暗图片的直方图中的数据多集中于左侧和中间部分，而整体明亮、只有少量阴影的图像则相反。&lt;/p&gt;
&lt;p&gt;假设有一张图像的信息（灰度值&lt;span class=&#34;math inline&#34;&gt;\(0-255\)&lt;/span&gt;），按一定规律将这个范围分割成子区域（也就是 bins）。如下按&lt;span class=&#34;math inline&#34;&gt;\(bin=16\)&lt;/span&gt;分割 &lt;span class=&#34;math display&#34;&gt;\[
[0,255]=\underbrace{[0,15]}_{b_{1}}\cup\underbrace{[16,30]}_{b_{2}}\cdots\cup\underbrace{[240,255]}_{b_{16}}
\]&lt;/span&gt; 再统计&lt;span class=&#34;math inline&#34;&gt;\(bin(i)\)&lt;/span&gt; 的像素数目。得到以&lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;轴表示&lt;span class=&#34;math inline&#34;&gt;\(bin\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; 轴表示各个&lt;span class=&#34;math inline&#34;&gt;\(bin\)&lt;/span&gt;中的像素个数的图像直方图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20190928144352467-1684457137421-1.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;直方图是根据灰度图进行绘制的，而不是彩色图像。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;直方图是图像中像素强度分布的图形表达方式。   &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;它统计了每一个强度值所具有的像素个数。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不同的图像的直方图可能是相同的&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;直方图的计算和绘制&#34;&gt;直方图的计算和绘制&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cv2.calcHist(images,channels,mask,histSize,ranges[,hist[,accumulate]])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;images：原图像。当传入函数时应该用中括号[]括起来，例如：[img]。&lt;/li&gt;
&lt;li&gt;channels：如果输入图像是灰度图，它的值就是[0]；如果是彩色图像的话，传入的参数可以是[0]，[1]，[2]。它们分别对应着B，G，R通道。 　　&lt;/li&gt;
&lt;li&gt;mask: 掩模图像。要统计整幅图像的直方图就把它设为 None。但是如果你想统计图像某一部分的直方图的话，你就需要制作一个掩模图像，并使用它。　　&lt;/li&gt;
&lt;li&gt;histsize：&lt;span class=&#34;math inline&#34;&gt;\(bin\)&lt;/span&gt;的数目。也应该用中括号括起来，例如：[256]。 　　&lt;/li&gt;
&lt;li&gt;ranges：像素值范围，通常为[0，256]&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;示例代码&#34;&gt;示例代码&lt;/h3&gt;
&lt;p&gt;绘制直方图&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; cv2 &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; cv&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; matplotlib &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 1 直接以灰度图的方式读入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img = cv.imread(&lt;span class=&#34;string&#34;&gt;&amp;#x27;./image/cat.jpeg&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2 统计灰度图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;histr = cv.calcHist([img],[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;],&lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;,[&lt;span class=&#34;number&#34;&gt;256&lt;/span&gt;],[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;256&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3 绘制灰度图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.figure(figsize=(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;),dpi=&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.plot(histr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.grid()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20190928155000064-1684458391504-3.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;掩膜&#34;&gt;掩膜&lt;/h2&gt;
&lt;p&gt;掩膜是用选定的图像、图形或物体，对要处理的图像进行遮挡，来控制图像处理的区域。&lt;/p&gt;
&lt;p&gt;在数字图像处理中，通常使用二维矩阵数组进行掩膜。掩膜是由0和1组成一个二进制图像，利用该掩膜图像要处理的图像进行掩膜，其中1值的区域被处理，0 值区域被屏蔽，不会处理。&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;cv.calcHist()&lt;/code&gt;来查找完整图像的直方图。&lt;/p&gt;
&lt;p&gt;如果要查找图像某些区域的直方图， 只需在要查找直方图的区域上创建一个白色的掩膜图像，否则创建黑色， 然后将其作为掩码mask传递即可。&lt;/p&gt;
&lt;h3 id=&#34;示例代码-1&#34;&gt;示例代码：&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; cv2 &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; cv&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; matplotlib &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 1. 直接以灰度图的方式读入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img = cv.imread(&lt;span class=&#34;string&#34;&gt;&amp;#x27;./image/cat.jpeg&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2. 创建蒙版&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mask = np.zeros(img.shape[:&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;], np.uint8)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mask[&lt;span class=&#34;number&#34;&gt;400&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;650&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;200&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;500&lt;/span&gt;] = &lt;span class=&#34;number&#34;&gt;255&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3.掩模&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;masked_img = cv.bitwise_and(img,img,mask = mask)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 4. 统计掩膜后图像的灰度图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mask_histr = cv.calcHist([img],[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;],mask,[&lt;span class=&#34;number&#34;&gt;256&lt;/span&gt;],[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;256&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 5. 图像展示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fig,axes=plt.subplots(nrows=&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,ncols=&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,figsize=(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].imshow(img,cmap=plt.cm.gray)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].set_title(&lt;span class=&#34;string&#34;&gt;&amp;quot;原图&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].imshow(mask,cmap=plt.cm.gray)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].set_title(&lt;span class=&#34;string&#34;&gt;&amp;quot;蒙版数据&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].imshow(masked_img,cmap=plt.cm.gray)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].set_title(&lt;span class=&#34;string&#34;&gt;&amp;quot;掩膜后数据&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].plot(mask_histr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].grid()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].set_title(&lt;span class=&#34;string&#34;&gt;&amp;quot;灰度直方图&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20190928160241831-1684458631460-5.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;直方图均衡化&#34;&gt;直方图均衡化&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://baike.baidu.com/item/%E7%9B%B4%E6%96%B9%E5%9B%BE%E5%9D%87%E8%A1%A1/4950487&#34;&gt;直方图均衡化&lt;/a&gt;是把原始图像的灰度直方图从比较集中的某个灰度区间变成在更广泛灰度范围内的分布。&lt;/p&gt;
&lt;p&gt;直方图均衡化就是对图像进行非线性拉伸，重新分配图像像素值，使一定灰度范围内的像素数量大致相同。&lt;/p&gt;
&lt;p&gt;通过这种方法，亮度可以更好地在直方图上分布。这样可以用于增强局部的对比度而不影响整体的对比度&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/300px-Histogrammeinebnung.png&#34;  style=&#34;zoom: 80%;&#34; /&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;dst = cv.equalizeHist(img)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;img: 灰度图像&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;返回：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dst : 均衡化后的结果&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;示例代码-2&#34;&gt;示例代码：&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; cv2 &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; cv&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; matplotlib &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 1. 直接以灰度图的方式读入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img = cv.imread(&lt;span class=&#34;string&#34;&gt;&amp;#x27;./image/cat.jpeg&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2. 均衡化处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dst = cv.equalizeHist(img)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3. 结果展示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fig,axes=plt.subplots(nrows=&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,ncols=&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,figsize=(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;),dpi=&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].imshow(img,cmap=plt.cm.gray)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].set_title(&lt;span class=&#34;string&#34;&gt;&amp;quot;原图&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].imshow(dst,cmap=plt.cm.gray)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].set_title(&lt;span class=&#34;string&#34;&gt;&amp;quot;均衡化后结果&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20190928163431354-1684460359762-9.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;自适应的直方图均衡化&#34;&gt;自适应的直方图均衡化&lt;/h2&gt;
&lt;p&gt;上述的直方图均衡，我们考虑的是图像的全局对比度。在许多情况下，这样做的效果并不好，但，会丢失了很多信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191024105039014-1684460404147-11.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;为了解决这个问题， 需要使用自适应的直方图均衡化。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;整幅图像会被分成很多小块，这些小块被称为&lt;code&gt;tiles&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;然后再分别对每个小块进行直方图均衡化。 所以在每个区域中， 直方图会集中在某一个小的区域中。如果有噪声的话，噪声会被放大。为了避免这种情况的出现要使用对比度限制。对于每个小块来说，如果直方图中的 &lt;span class=&#34;math inline&#34;&gt;\(bin\)&lt;/span&gt;超过对比度的上限的话，就把其中的像素点均匀分散到其他&lt;span class=&#34;math inline&#34;&gt;\(bins\)&lt;/span&gt;中，然后在进行直方图均衡化。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/300px-Clahe-redist.svg.png&#34;  style=&#34;zoom:90%;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34; type=&#34;1&#34;&gt;
&lt;li&gt;最后，为了去除每一个小块之间的边界，再使用双线性差值，对每一小块进行拼接。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cv.createCLAHE(clipLimit, tileGridSize)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;clipLimit：对比度限制，默认是40&lt;/li&gt;
&lt;li&gt;tileGridSize：分块的大小，默认为&lt;span class=&#34;math inline&#34;&gt;\(8\times8\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;示例代码-3&#34;&gt;示例代码：&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; cv2 &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; cv&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 1. 以灰度图形式读取图像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img = cv.imread(&lt;span class=&#34;string&#34;&gt;&amp;#x27;./image/cat.jpeg&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2. 创建一个自适应均衡化的对象，并应用于图像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;clahe = cv.createCLAHE(clipLimit=&lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;, tileGridSize=(&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cl1 = clahe.apply(img)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3. 图像展示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fig,axes=plt.subplots(nrows=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,ncols=&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,figsize=(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;),dpi=&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].imshow(img,cmap=plt.cm.gray)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].set_title(&lt;span class=&#34;string&#34;&gt;&amp;quot;原图&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].imshow(cl1,cmap=plt.cm.gray)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].set_title(&lt;span class=&#34;string&#34;&gt;&amp;quot;自适应均衡化后的结果&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20190928165605432-1684460980293-17.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;与均衡化相比，可以看到在猫腿处不再显得暗黑。&lt;/p&gt;
&lt;h1 id=&#34;边缘检测&#34;&gt;边缘检测&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://baike.baidu.com/item/%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B/3221648&#34;&gt;边缘检测&lt;/a&gt;是图像处理和计算机视觉中的基本问题，边缘检测的目的是标识数字图像中亮度变化明显的点。&lt;/p&gt;
&lt;p&gt;边缘检测的方法绝大部分可以划分为两类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;基于搜索：&lt;/strong&gt;通过寻找&lt;strong&gt;图像一阶导数中的最大值&lt;/strong&gt;来检测边界，然后利用计算结果估计边缘的局部方向，通常采用梯度的方向，并利用此方向找到局部梯度模的最大值，代表算法是&lt;code&gt;Sobel算子&lt;/code&gt;和&lt;code&gt;Scharr算子&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20190929104240226-1684461871286-19.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;基于零穿越：&lt;/strong&gt;通过寻找&lt;strong&gt;图像二阶导数零穿越&lt;/strong&gt;来寻找边界，代表算法是&lt;code&gt;Laplacian算子&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20190929104430480-1684462287627-21.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sobel算子-基于搜索&#34;&gt;&lt;a href=&#34;https://baike.baidu.com/item/%E7%B4%A2%E8%B4%9D%E5%B0%94%E7%AE%97%E5%AD%90/15805328&#34;&gt;&lt;code&gt;Sobel算子&lt;/code&gt;&lt;/a&gt;-基于搜索&lt;/h2&gt;
&lt;p&gt;对于不连续的函数，一阶导数可以写作&lt;span class=&#34;math inline&#34;&gt;\(f&amp;#39;(x)=f(x)-f(x-1)\)&lt;/span&gt;或者&lt;span class=&#34;math inline&#34;&gt;\(f&amp;#39;(x)=f(x+1)-f(x)\)&lt;/span&gt;，所以有 &lt;span class=&#34;math display&#34;&gt;\[
f&amp;#39;(x)=\frac{f(x+1)-f(x-1)}{2}
\]&lt;/span&gt; 假设要处理的图像为&lt;span class=&#34;math inline&#34;&gt;\(I\)&lt;/span&gt;，在两个方向求导&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;strong&gt;水平变化&lt;/strong&gt;：将图像&lt;span class=&#34;math inline&#34;&gt;\(I\)&lt;/span&gt;与奇数大小的模版进行卷积，结果为&lt;span class=&#34;math inline&#34;&gt;\(G_x\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;比如，当模板大小为&lt;span class=&#34;math inline&#34;&gt;\(3\times3\)&lt;/span&gt;时, &lt;span class=&#34;math display&#34;&gt;\[
G_x=\left[\begin{matrix}-1&amp;amp;0&amp;amp;+1\\-2&amp;amp;0&amp;amp;+2\\-1&amp;amp;0&amp;amp;+1\end{matrix}\right]*I
\]&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34; type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;垂直变化&lt;/strong&gt;：将图像&lt;span class=&#34;math inline&#34;&gt;\(I\)&lt;/span&gt;与奇数大小的模板进行卷积，结果为&lt;span class=&#34;math inline&#34;&gt;\(G_y\)&lt;/span&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比如，当模板大小为&lt;span class=&#34;math inline&#34;&gt;\(3\times3\)&lt;/span&gt;时, &lt;span class=&#34;math display&#34;&gt;\[
G_y=\left[\begin{matrix}-1&amp;amp;-2&amp;amp;-1\\0&amp;amp;0&amp;amp;0\\+1&amp;amp;+2&amp;amp;+1\end{matrix}\right]*I
\]&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在图像的每一点，通过公式求出： &lt;span class=&#34;math display&#34;&gt;\[
G=\sqrt{G_x^2+G_y^2}
\]&lt;/span&gt; 统计极大值所在的位置，就是图像的边缘。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当核大小为&lt;span class=&#34;math inline&#34;&gt;\(3\times3\)&lt;/span&gt;时, 以上&lt;code&gt;Sobel&lt;/code&gt;卷积核可能产生比较明显的误差，&lt;/li&gt;
&lt;li&gt;为解决这一问题，我们使用&lt;code&gt;Scharr&lt;/code&gt;函数，但该函数仅作用于大小为&lt;span class=&#34;math inline&#34;&gt;\(3\times3\)&lt;/span&gt;的卷积核。该函数的运算与&lt;code&gt;Sobel&lt;/code&gt;函数一样快，但结果却更加精确，其计算方法为:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
G_x=\left[\begin{matrix}-3&amp;amp;0&amp;amp;+3\\-10&amp;amp;0&amp;amp;+10\\-3&amp;amp;0&amp;amp;+3\end{matrix}\right]*I
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
G_y=\left[\begin{matrix}-3&amp;amp;-10&amp;amp;-3\\0&amp;amp;0&amp;amp;0\\+3&amp;amp;+10&amp;amp;+3\end{matrix}\right]*I
\]&lt;/span&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Sobel_x_or_y = cv2.Sobel(src, ddepth, dx, dy, dst, ksize, scale, delta, borderType)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;src：传入的图像&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ddepth：图像的深度&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;dx和dy：指求导的阶数，0表示这个方向上没有求导，取值为0、1。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ksize：是&lt;code&gt;Sobel算子&lt;/code&gt;的大小，即卷积核的大小，默认为3。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;如果ksize=-1，就演变成为&lt;span class=&#34;math inline&#34;&gt;\(3\times3\)&lt;/span&gt;的&lt;code&gt;Scharr算子&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;scale：缩放导数的比例常数，默认情况为没有伸缩系数。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;borderType：图像边界的模式，默认值为cv2.BORDER_DEFAULT。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Sobel函数&lt;/code&gt;求导后会有负值，还有会大于255的值。而原图像是uint8，即8位无符号数，所以建立的图像位数不够，会有截断。&lt;/p&gt;
&lt;p&gt;因此要使用16位有符号的数据类型，即&lt;code&gt;cv2.CV_16S&lt;/code&gt;。处理完图像后，再使用&lt;code&gt;cv2.convertScaleAbs()&lt;/code&gt;函数将其转回原来的uint8格式，否则图像无法显示。&lt;/p&gt;
&lt;p&gt;最后还需要用&lt;code&gt;cv2.addWeighted()&lt;/code&gt;函数将两个方向的&lt;code&gt;Sobel算子&lt;/code&gt;计算结果组合起来&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Scale_abs = cv2.convertScaleAbs(x)  # 格式转换函数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;result = cv2.addWeighted(src1, alpha, src2, beta) # 图像混合&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;示例代码-4&#34;&gt;示例代码：&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; cv2 &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; cv&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; matplotlib &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 1 读取图像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img = cv.imread(&lt;span class=&#34;string&#34;&gt;&amp;#x27;./image/horse.jpg&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2 计算Sobel卷积结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x = cv.Sobel(img, cv.CV_16S, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y = cv.Sobel(img, cv.CV_16S, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3 将数据进行转换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Scale_absX = cv.convertScaleAbs(x)  &lt;span class=&#34;comment&#34;&gt;# convert 转换  scale 缩放&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Scale_absY = cv.convertScaleAbs(y)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 4 结果合成&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;result = cv.addWeighted(Scale_absX, &lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt;, Scale_absY, &lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 5 图像显示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.figure(figsize=(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;),dpi=&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.subplot(&lt;span class=&#34;number&#34;&gt;121&lt;/span&gt;),plt.imshow(img,cmap=plt.cm.gray),plt.title(&lt;span class=&#34;string&#34;&gt;&amp;#x27;原图&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.xticks([]), plt.yticks([])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.subplot(&lt;span class=&#34;number&#34;&gt;122&lt;/span&gt;),plt.imshow(result,cmap = plt.cm.gray),plt.title(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Sobel滤波后结果&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.xticks([]), plt.yticks([])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20190929141752847-1684464763720-23.png&#34; style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;将上述代码中计算&lt;code&gt;sobel算子&lt;/code&gt;的部分中将ksize设为-1，就是利用&lt;code&gt;Scharrs算子&lt;/code&gt;进行边缘检测。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;x = cv.Sobel(img, cv.CV_16S, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, ksize = -&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y = cv.Sobel(img, cv.CV_16S, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, ksize = -&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20190929141636521-1684464782140-25.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;laplacian算子-基于零穿越&#34;&gt;&lt;a href=&#34;https://baike.baidu.com/item/%E6%8B%89%E6%99%AE%E6%8B%89%E6%96%AF%E7%AE%97%E5%AD%90/7261323&#34;&gt;&lt;code&gt;Laplacian算子&lt;/code&gt;&lt;/a&gt;-基于零穿越&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;Laplacian&lt;/code&gt;是利用二阶导数来检测边缘 。 因为图像是2维, 我们需要在两个方向求导，如下式所示： &lt;span class=&#34;math display&#34;&gt;\[
\Delta src=\frac{\partial^2src}{\partial x^2}+\frac{\partial^2src}{\partial y^2}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;不连续函数的二阶导数是： &lt;span class=&#34;math display&#34;&gt;\[
f&amp;#39;&amp;#39;(x)=f&amp;#39;(x+1)-f&amp;#39;(x)=f(x+1)+f(x-1)-2f(x)
\]&lt;/span&gt; 使用的卷积核是： &lt;span class=&#34;math display&#34;&gt;\[
kernel=\left[\begin{matrix}0&amp;amp;1&amp;amp;0\\1&amp;amp;-4&amp;amp;1\\0&amp;amp;1&amp;amp;0\\\end{matrix}\right]
\]&lt;/span&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;laplacian = cv2.Laplacian(src, ddepth[, dst[, ksize[, scale[, delta[, borderType]]]]])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;src：需要处理的图像，&lt;/li&gt;
&lt;li&gt;ddepth：图像的深度，-1表示采用的是原图像相同的深度，目标图像的深度必须大于等于原图像的深度；&lt;/li&gt;
&lt;li&gt;ksize：算子的大小，即卷积核的大小&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;示例代码-5&#34;&gt;示例代码：&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; cv2 &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; cv&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; matplotlib &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 1 读取图像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img = cv.imread(&lt;span class=&#34;string&#34;&gt;&amp;#x27;./image/horse.jpg&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2 laplacian转换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;result = cv.Laplacian(img,cv.CV_16S)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Scale_abs = cv.convertScaleAbs(result)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3 图像展示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.figure(figsize=(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;),dpi=&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.subplot(&lt;span class=&#34;number&#34;&gt;121&lt;/span&gt;),plt.imshow(img,cmap=plt.cm.gray),plt.title(&lt;span class=&#34;string&#34;&gt;&amp;#x27;原图&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.xticks([]), plt.yticks([])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.subplot(&lt;span class=&#34;number&#34;&gt;122&lt;/span&gt;),plt.imshow(Scale_abs,cmap = plt.cm.gray),plt.title(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Laplacian检测后结果&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.xticks([]), plt.yticks([])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20190929145507862.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;canny算子&#34;&gt;&lt;a href=&#34;https://baike.baidu.com/item/Canny%E7%AE%97%E5%AD%90/8821789&#34;&gt;&lt;code&gt;Canny算子&lt;/code&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Canny 边缘检测算法是 John F. Canny 于 1986年提出的，被认为是最优的边缘检测算法。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;去除噪声&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由于边缘检测很容易受到噪声的影响，所以首先使用&lt;span class=&#34;math inline&#34;&gt;\(5\times5\)&lt;/span&gt;高斯平滑滤波器去除噪声，&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;计算图像梯度&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;对平滑后的图像使用&lt;code&gt;Sobel算子&lt;/code&gt;计算水平方向和竖直方向的一阶导数&lt;span class=&#34;math inline&#34;&gt;\(G_x,G_y\)&lt;/span&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;根据这两幅梯度图找到边界的梯度和方向，公式如下: &lt;span class=&#34;math display&#34;&gt;\[
Edge_Gradient(G)=\sqrt{G_x^2+G_y^2}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
Angle(\theta)=\tan^{-1}(\frac{G_y}{G_x})
\]&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果某个像素点是边缘，则其梯度方向总是垂直于边缘。梯度方向被归为四类：垂直，水平，和两个对角线方向。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;非极大值抑制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在获得梯度的方向和大小之后，对整幅图像进行扫描，去除那些非边界上的点。对每一个像素进行检查，看这个点的梯度是不是周围具有相同梯度方向的点中最大的。&lt;/li&gt;
&lt;li&gt;A点位于图像的边缘，在其梯度变化方向，选择像素点B和C，用来检验A点的梯度是否为极大值，若为极大值，则进行保留，否则A点被抑制，最终的结果是具有细边的二进制图像。如下图所示：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20190929153926063.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;滞后阈值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;现在要确定真正的边界。 我们设置两个阈值： &lt;code&gt;minVal&lt;/code&gt;和&lt;code&gt;maxVal&lt;/code&gt;。 当图像的灰度梯度高于&lt;code&gt;maxVal&lt;/code&gt;时被认为是真的边界， 低于&lt;code&gt;minVal&lt;/code&gt;的边界会被抛弃。如果介于两者之间的话，就要看这个点是否与某个被确定为真正的边界点相连，如果是就认为它也是边界点，如果不是就抛弃。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20190929155208751.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如上图所示，A高于阈值&lt;code&gt;maxVal&lt;/code&gt;所以是真正的边界点，C虽然低于&lt;code&gt;maxVal&lt;/code&gt;但高于&lt;code&gt;minVal&lt;/code&gt;并且与A相连，所以也被认为是真正的边界点。而B就会被抛弃，因为低于&lt;code&gt;maxVal&lt;/code&gt;而且不与真正的边界点相连。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;canny = cv2.Canny(image, threshold1, threshold2)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;image：灰度图，&lt;/li&gt;
&lt;li&gt;threshold1: minval，较小的阈值将间断的边缘连接起来&lt;/li&gt;
&lt;li&gt;threshold2: maxval，较大的阈值检测图像中明显的边缘&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;示例代码-6&#34;&gt;示例代码：&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; cv2 &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; cv&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; matplotlib &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 1 图像读取&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img = cv.imread(&lt;span class=&#34;string&#34;&gt;&amp;#x27;./image/horse.jpg&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2 Canny边缘检测&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;lowThreshold = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;max_lowThreshold = &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;canny = cv.Canny(img, lowThreshold, max_lowThreshold) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3 图像展示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.figure(figsize=(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;),dpi=&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.subplot(&lt;span class=&#34;number&#34;&gt;121&lt;/span&gt;),plt.imshow(img,cmap=plt.cm.gray),plt.title(&lt;span class=&#34;string&#34;&gt;&amp;#x27;原图&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.xticks([]), plt.yticks([])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.subplot(&lt;span class=&#34;number&#34;&gt;122&lt;/span&gt;),plt.imshow(canny,cmap = plt.cm.gray),plt.title(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Canny检测后结果&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.xticks([]), plt.yticks([])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20190929160959357.png&#34; style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;模版匹配和霍夫变换&#34;&gt;模版匹配和霍夫变换&lt;/h1&gt;
&lt;h2 id=&#34;模板匹配&#34;&gt;模板匹配&lt;/h2&gt;
&lt;p&gt;所谓的模板匹配，就是在给定的图片中查找和模板最相似的区域，该算法的输入包括模板和图片，然后按照滑窗的思路不断的移动模板图片，计算其与图像中对应区域的匹配度，最终将匹配度最高的区域选择为最终的结果。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;准备两幅图像
&lt;ul&gt;
&lt;li&gt;原图像&lt;span class=&#34;math inline&#34;&gt;\(I\)&lt;/span&gt;：在这幅图中，找到与模板相匹配的区域&lt;/li&gt;
&lt;li&gt;模板&lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt;：与原图像&lt;span class=&#34;math inline&#34;&gt;\(I\)&lt;/span&gt;进行比对的图像块&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;滑动模板图像和原图像进行比对
&lt;ul&gt;
&lt;li&gt;将模板块每次移动一个像素 (从左往右，从上往下)，在每一个位置，都计算与模板图像的相似程度。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;对于每一个位置将计算的相似结果保存在结果矩阵&lt;span class=&#34;math inline&#34;&gt;\(R\)&lt;/span&gt;中。
&lt;ul&gt;
&lt;li&gt;如果输入图像的大小为&lt;span class=&#34;math inline&#34;&gt;\((W\times H)\)&lt;/span&gt;且模板图像的大小为&lt;span class=&#34;math inline&#34;&gt;\((w\times h)\)&lt;/span&gt;，则输出矩阵&lt;span class=&#34;math inline&#34;&gt;\(R\)&lt;/span&gt;的大小为&lt;span class=&#34;math inline&#34;&gt;\((W-w+1,H-h+1)\)&lt;/span&gt;，将&lt;span class=&#34;math inline&#34;&gt;\(R\)&lt;/span&gt;显示为图像。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;获得上述图像后，查找最大值所在的位置，那么该位置对应的区域就被认为是最匹配的。对应的区域就是以该点为顶点，长宽和模板图像一样大小的矩阵。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;res = cv.matchTemplate(img,template,method)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;img：要进行模板匹配的图像&lt;/li&gt;
&lt;li&gt;Template：模板&lt;/li&gt;
&lt;li&gt;method：实现模板匹配的算法，主要有：
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;平方差匹配(CV_TM_SQDIFF)：利用模板与图像之间的平方差进行匹配，最好的匹配是0，匹配越差，匹配的值越大。&lt;/li&gt;
&lt;li&gt;相关匹配(CV_TM_CCORR)：利用模板与图像间的乘法进行匹配，数值越大表示匹配程度较高，越小表示匹配效果差。&lt;/li&gt;
&lt;li&gt;利用相关系数匹配(CV_TM_CCOEFF)：利用模板与图像间的相关系数匹配，1表示完美的匹配，-1表示最差的匹配。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;完成匹配后，使用&lt;code&gt;cv.minMaxLoc()&lt;/code&gt;方法查找最大值所在的位置即可。如果使用平方差作为比较方法，则最小值位置是最佳匹配位置。&lt;/p&gt;
&lt;h3 id=&#34;示例代码-7&#34;&gt;示例代码：&lt;/h3&gt;
&lt;p&gt;载入要搜索的图像和模板，图像如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/wulin2-1684485180064-5.jpeg&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;模板如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/wulin-0430810-1684485193472-7.jpeg&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;通过&lt;code&gt;matchTemplate&lt;/code&gt;实现模板匹配，使用&lt;code&gt;minMaxLoc&lt;/code&gt;定位最匹配的区域，并用矩形标注最匹配的区域。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; cv2 &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; cv&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; matplotlib &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 1 图像和模板读取&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img = cv.imread(&lt;span class=&#34;string&#34;&gt;&amp;#x27;./image/wulin2.jpeg&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;template = cv.imread(&lt;span class=&#34;string&#34;&gt;&amp;#x27;./image/wulin.jpeg&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;h,w,l = template.shape&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2 模板匹配&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2.1 模板匹配&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;res = cv.matchTemplate(img, template, cv.TM_CCORR)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2.2 返回图像中最匹配的位置，确定左上角的坐标，并将匹配位置绘制在图像上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;min_val, max_val, min_loc, max_loc = cv.minMaxLoc(res)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 使用平方差时最小值为最佳匹配位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# top_left = min_loc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;top_left = max_loc&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;bottom_right = (top_left[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] + w, top_left[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] + h)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cv.rectangle(img, top_left, bottom_right, (&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;255&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;), &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3 图像显示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.imshow(img[:,:,::-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.title(&lt;span class=&#34;string&#34;&gt;&amp;#x27;匹配结果&amp;#x27;&lt;/span&gt;), plt.xticks([]), plt.yticks([])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191007144614688-1684485615344-9.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;拓展：&lt;/strong&gt;模板匹配不适用于尺度变换，视角变换后的图像，这时我们就要使用关键点匹配算法，比较经典的关键点检测算法包括SIFT和SURF等，主要的思路是首先通过关键点检测算法获取模板和测试图片中的关键点；然后使用关键点匹配算法处理即可，这些关键点可以很好的处理尺度变化、视角变换、旋转变化、光照变化等，具有很好的不变性。&lt;/p&gt;
&lt;h2 id=&#34;霍夫变换&#34;&gt;霍夫变换&lt;/h2&gt;
&lt;p&gt;霍夫变换常用来提取图像中的直线和圆等几何形状。在笛卡尔坐标系中，一条直线由两个点&lt;span class=&#34;math inline&#34;&gt;\(A=(x_1,y_1)\)&lt;/span&gt;和&lt;span class=&#34;math inline&#34;&gt;\(B(x2，y_2)\)&lt;/span&gt;确定，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191007153126537.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;将直线&lt;span class=&#34;math inline&#34;&gt;\(y=kx+q\)&lt;/span&gt;可写成关于&lt;span class=&#34;math inline&#34;&gt;\((k,q)\)&lt;/span&gt;的函数表达式： &lt;span class=&#34;math display&#34;&gt;\[
\begin{cases}
q=-kx_1+y_1\\
q=-kx_2+y_2
\end{cases}
\]&lt;/span&gt; 对应的变换通过图形直观的表示如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191007154123721.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;变换后的空间我们叫做霍夫空间。即：&lt;strong&gt;笛卡尔坐标系中的一条直线，对应于霍夫空间中的一个点&lt;/strong&gt;。反过来，同样成立，霍夫空间中的一条线，对应于笛卡尔坐标系中一个点，如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191007154350195.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;我们再来看下&lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt;、&lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt;两个点，对应于霍夫空间的情形：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191007154546905.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在看下三点共线的情况：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191007160434136.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以看出如果&lt;strong&gt;在笛卡尔坐标系的点共线，那么这些点在霍夫空间中对应的直线交于一点&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果不止存在一条直线时，如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191007160932077.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;我们选择尽可能多的直线汇成的点，上图中三条直线汇成的&lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt;、&lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt;两点，将其对应回笛卡尔坐标系中的直线：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191007161219204.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;到这里我们似乎已经完成了霍夫变换的求解。但如果像下图这种情况时：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191007161417485.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;上图中的直线是&lt;span class=&#34;math inline&#34;&gt;\(x=2\)&lt;/span&gt;，那&lt;span class=&#34;math inline&#34;&gt;\((k,q)\)&lt;/span&gt;怎么确定呢？为了解决这个问题，考虑将笛卡尔坐标系转换为极坐标。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191007165431682.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在极坐标下是一样的，极坐标中的点对应于霍夫空间的线，这时的霍夫空间不在是参数&lt;span class=&#34;math inline&#34;&gt;\((k,q)\)&lt;/span&gt;的空间，而是&lt;span class=&#34;math inline&#34;&gt;\((\rho,\theta)\)&lt;/span&gt;的空间，&lt;span class=&#34;math inline&#34;&gt;\(\rho\)&lt;/span&gt;是原点到直线的垂直距离，&lt;span class=&#34;math inline&#34;&gt;\(\theta\)&lt;/span&gt;表示直线的垂线与横轴顺时针方向的夹角，垂直线的角度为&lt;span class=&#34;math inline&#34;&gt;\(0^\circ\)&lt;/span&gt;，水平线的角度是&lt;span class=&#34;math inline&#34;&gt;\(180^\circ\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191007163203594.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;只要求得霍夫空间中的交点的位置，即可得到原坐标系下的直线。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;假设有一个大小为&lt;span class=&#34;math inline&#34;&gt;\(100\times100\)&lt;/span&gt;的图片，首先创建一个&lt;span class=&#34;math inline&#34;&gt;\(2D\)&lt;/span&gt;数组(累加器)，初始化所有值为0，行表示&lt;span class=&#34;math inline&#34;&gt;\(\rho\)&lt;/span&gt;，列表示$$。若角度的精度为&lt;span class=&#34;math inline&#34;&gt;\(1^\circ\)&lt;/span&gt;，那就需要180列。对于&lt;span class=&#34;math inline&#34;&gt;\(\rho\)&lt;/span&gt;，最大值为图片对角线的距离，如果精度要达到像素级别，行数应该与图像的对角线的距离相等。&lt;/li&gt;
&lt;li&gt;取直线上的第一个点&lt;span class=&#34;math inline&#34;&gt;\((x,y)\)&lt;/span&gt;，将其带入直线在极坐标中的公式中，然后遍历&lt;span class=&#34;math inline&#34;&gt;\(\theta\)&lt;/span&gt;的取值&lt;span class=&#34;math inline&#34;&gt;\((0,1,2,\cdots,180)\)&lt;/span&gt;，分别求出对应的&lt;span class=&#34;math inline&#34;&gt;\(\rho\)&lt;/span&gt;值，如果这个数值在&lt;strong&gt;累加器&lt;/strong&gt;中存在相应的位置，则在该位置上加1。&lt;/li&gt;
&lt;li&gt;取直线上的第二个点，重复上述步骤，更新累加器中的值。对图像中的直线上的每个点都直线以上步骤，每次更新累加器中的值。&lt;/li&gt;
&lt;li&gt;搜索累加器中的最大值，并找到其对应的&lt;span class=&#34;math inline&#34;&gt;\((\rho,\theta)\)&lt;/span&gt;，就可将图像中的直线表示出来。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image70-0440438.gif&#34;  style=&#34;zoom: 80%;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;霍夫线检测&#34;&gt;霍夫线检测&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cv.HoughLines(img, rho, theta, threshold)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;img：检测的图像&lt;strong&gt;要求是二值化的图像&lt;/strong&gt;，所以在调用霍夫变换之前首先要进行二值化，或者进行Canny边缘检测。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;rho、theta：&lt;span class=&#34;math inline&#34;&gt;\(\rho\)&lt;/span&gt; 和&lt;span class=&#34;math inline&#34;&gt;\(\theta\)&lt;/span&gt;的精确度。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;threshold：阈值，只有累加器中的值高于该阈值时才被认为是直线。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;示例代码-8&#34;&gt;示例代码&lt;/h3&gt;
&lt;p&gt;检测下述图像中的直线：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/rili.jpg&#34; style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; random&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; cv2 &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; cv&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 1.加载图片，转为二值图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img = cv.imread(&lt;span class=&#34;string&#34;&gt;&amp;#x27;./image/rili.jpg&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;edges = cv.Canny(gray, &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;150&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2.霍夫直线变换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;lines = cv.HoughLines(edges, &lt;span class=&#34;number&#34;&gt;0.8&lt;/span&gt;, np.pi / &lt;span class=&#34;number&#34;&gt;180&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;150&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3.将检测的线绘制在图像上（注意是极坐标噢）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; line &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; lines:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    rho, theta = line[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a = np.cos(theta)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    b = np.sin(theta)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x0 = a * rho&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    y0 = b * rho&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x1 = &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;(x0 + &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt; * (-b))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    y1 = &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;(y0 + &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt; * (a))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x2 = &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;(x0 - &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt; * (-b))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    y2 = &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;(y0 - &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt; * (a))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cv.line(img, (x1, y1), (x2, y2), (&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;255&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 4. 图像显示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.figure(figsize=(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;),dpi=&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.imshow(img[:,:,::-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]),plt.title(&lt;span class=&#34;string&#34;&gt;&amp;#x27;霍夫变换线检测&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.xticks([]), plt.yticks([])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191007184301611.png&#34;  style=&#34;zoom: 20%;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;霍夫圆检测&#34;&gt;霍夫圆检测&lt;/h2&gt;
&lt;p&gt;圆的表示式是：&lt;span class=&#34;math inline&#34;&gt;\((x-a)^2+(y-b)^2=r\)&lt;/span&gt;，其中圆心坐标为&lt;span class=&#34;math inline&#34;&gt;\((a,b)\)&lt;/span&gt;，半径为&lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt;，因此标准的霍夫圆检测就是在这三个参数组成的三维空间累加器上进行圆形检测，此时的效率很低。&lt;/p&gt;
&lt;p&gt;所以&lt;code&gt;OpenCV&lt;/code&gt;中使用&lt;strong&gt;霍夫梯度法&lt;/strong&gt;进行圆形的检测，霍夫梯度法是霍夫变换的改进，它的目的是减小霍夫空间的维度，提高效率。&lt;/p&gt;
&lt;p&gt;霍夫梯度法将霍夫圆检测范围两个阶段，第一阶段检测圆心，第二阶段利用圆心推导出圆半径。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;圆心检测的原理：圆心是圆周法线的交汇处，设置一个阈值，在某点的相交的直线的条数大于这个阈值就认为该交汇点为圆心。&lt;/li&gt;
&lt;li&gt;圆半径确定原理：圆心到圆周上的距离（半径）是相同的，确定一个阈值，只要相同距离的数量大于该阈值，就认为该距离是该圆心的半径。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;circles = cv.HoughCircles(image, method, dp, minDist, param1=&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;, param2=&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;, minRadius=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,maxRadius=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;image：输入图像，应输入灰度图像&lt;/li&gt;
&lt;li&gt;method：使用霍夫变换圆检测的算法，它的参数是CV_HOUGH_GRADIENT&lt;/li&gt;
&lt;li&gt;dp：霍夫空间的分辨率，dp=1时表示霍夫空间与输入图像空间的大小一致，dp=2时霍夫空间是输入图像空间的一半，以此类推。&lt;/li&gt;
&lt;li&gt;minDist：为圆心之间的最小距离，如果检测到的两个圆心之间距离小于该值，则认为它们是同一个圆心。&lt;/li&gt;
&lt;li&gt;param1：边缘检测时使用Canny算子的高阈值，低阈值是高阈值的一半。&lt;/li&gt;
&lt;li&gt;param2：检测圆心和确定半径时所共有的阈值。&lt;/li&gt;
&lt;li&gt;minRadius：所检测到的圆半径的最小值。&lt;/li&gt;
&lt;li&gt;maxRadius：所检测到的圆半径的最大值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;返回：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;circles：输出圆向量，包括三个浮点型的元素（圆心横坐标，圆心纵坐标和圆半径）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;示例代码-9&#34;&gt;示例代码&lt;/h3&gt;
&lt;p&gt;由于霍夫圆检测对噪声比较敏感，所以首先对图像进行中值滤波。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; cv2 &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; cv&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 1 读取图像，并转换为灰度图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;planets = cv.imread(&lt;span class=&#34;string&#34;&gt;&amp;quot;./image/star.jpeg&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;gay_img = cv.cvtColor(planets, cv.COLOR_BGRA2GRAY)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2 进行中值模糊，去噪点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img = cv.medianBlur(gay_img, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3 霍夫圆检测&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;circles = cv.HoughCircles(img, cv.HOUGH_GRADIENT, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;200&lt;/span&gt;, param1=&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;, param2=&lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;, minRadius=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, maxRadius=&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 4 将检测结果绘制在图像上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; circles[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, :]:  &lt;span class=&#34;comment&#34;&gt;# 遍历矩阵每一行的数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 绘制圆形&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cv.circle(planets, (i[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], i[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]), i[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;], (&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;255&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;), &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 绘制圆心&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cv.circle(planets, (i[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], i[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]), &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;255&lt;/span&gt;), &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 5 图像显示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.figure(figsize=(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;),dpi=&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.imshow(planets[:,:,::-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]),plt.title(&lt;span class=&#34;string&#34;&gt;&amp;#x27;霍夫变换圆检测&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.xticks([]), plt.yticks([])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191008105125382.png&#34; style=&#34;zoom: 33%;&#34; /&gt;&lt;/p&gt;
</content>
        <category term="Jupyter Notebook" />
        <updated>2023-05-19T00:30:52.000Z</updated>
    </entry>
    <entry>
        <id>https://liujk6525.github.io/OpenCV/OpenCV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86-%E4%B8%8A/</id>
        <title>OpenCV图像处理(上)</title>
        <link rel="alternate" href="https://liujk6525.github.io/OpenCV/OpenCV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86-%E4%B8%8A/"/>
        <content type="html">&lt;h1 id=&#34;几何变换&#34;&gt;几何变换&lt;/h1&gt;
&lt;h2 id=&#34;图像缩放&#34;&gt;图像缩放&lt;/h2&gt;
&lt;p&gt;缩放是对图像的大小进行调整，即使图像放大或缩小。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cv2.resize(src,dsize,fx=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,fy=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,interpolation=cv2.INTER_LINEAR)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;src : 输入图像&lt;/li&gt;
&lt;li&gt;dsize: 绝对尺寸，直接指定调整后图像的大小&lt;/li&gt;
&lt;li&gt;fx,fy: 相对尺寸，将dsize设置为None，然后将fx和fy设置为比例因子即可&lt;/li&gt;
&lt;li&gt;interpolation：插值方法，&lt;/li&gt;
&lt;/ul&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191016161502727-1684329818370-10.png&#34; style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;示例代码&#34;&gt;示例代码&lt;/h3&gt;
&lt;p&gt;将图像分别以绝对尺度的方式放大，以相对尺寸的方式缩小。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; cv2 &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; cv&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 1. 读取图片&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img1 = cv.imread(&lt;span class=&#34;string&#34;&gt;&amp;quot;./image/dog.jpeg&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2.图像缩放&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2.1 绝对尺寸&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rows,cols = img1.shape[:&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;res = cv.resize(img1,(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;*cols,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;*rows),interpolation=cv.INTER_CUBIC)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2.2 相对尺寸&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;res1 = cv.resize(img1,&lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;,fx=&lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt;,fy=&lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3 图像显示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3.1 使用opencv显示图像(不推荐)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cv.imshow(&lt;span class=&#34;string&#34;&gt;&amp;quot;orignal&amp;quot;&lt;/span&gt;,img1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cv.imshow(&lt;span class=&#34;string&#34;&gt;&amp;quot;enlarge&amp;quot;&lt;/span&gt;,res)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cv.imshow(&lt;span class=&#34;string&#34;&gt;&amp;quot;shrink）&amp;quot;&lt;/span&gt;,res1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cv.waitKey(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3.2 使用matplotlib显示图像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fig,axes=plt.subplots(nrows=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,ncols=&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,figsize=(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;),dpi=&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].imshow(res[:,:,::-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].set_title(&lt;span class=&#34;string&#34;&gt;&amp;quot;绝对尺度（放大）&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].imshow(img1[:,:,::-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].set_title(&lt;span class=&#34;string&#34;&gt;&amp;quot;原图&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;].imshow(res1[:,:,::-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;].set_title(&lt;span class=&#34;string&#34;&gt;&amp;quot;相对尺度（缩小）&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20190926143500645-1684329980666-12.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;图像平移&#34;&gt;图像平移&lt;/h2&gt;
&lt;p&gt;图像平移将图像按照指定方向和距离，移动到相应的位置。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cv.warpAffine(img,M,dsize)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;img: 输入图像&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;M： 2∗3的移动矩阵&lt;/p&gt;
&lt;p&gt;对于(x,y)处的像素点，要把它移动到&lt;span class=&#34;math inline&#34;&gt;\((x+t_x,y+t_y)\)&lt;/span&gt;处时，M矩阵应如下设置：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(M=\left[\begin{matrix}1&amp;amp;0&amp;amp;t_x\\0&amp;amp;1&amp;amp;t_y\\&amp;amp;&amp;amp;\end{matrix}\right]\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;将&lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt;设置为&lt;code&gt;np.float32&lt;/code&gt;类型的&lt;code&gt;Numpy&lt;/code&gt;数组。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;dsize: 输出图像的大小&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;输出图像的大小，它应该是(宽度，高度)的形式。请记住,width=列数，height=行数。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;示例代码-1&#34;&gt;示例代码&lt;/h3&gt;
&lt;p&gt;将图像的像素点移动(50,100)的距离。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; cv2 &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; cv&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 1. 读取图像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img1 = cv.imread(&lt;span class=&#34;string&#34;&gt;&amp;quot;./image/image2.jpg&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2. 图像平移&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rows,cols = img1.shape[:&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;M = M = np.float32([[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;],[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;]])&lt;span class=&#34;comment&#34;&gt;# 平移矩阵&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dst = cv.warpAffine(img1,M,(cols,rows))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3. 图像显示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fig,axes=plt.subplots(nrows=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,ncols=&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,figsize=(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;),dpi=&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].imshow(img1[:,:,::-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].set_title(&lt;span class=&#34;string&#34;&gt;&amp;quot;原图&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].imshow(dst[:,:,::-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].set_title(&lt;span class=&#34;string&#34;&gt;&amp;quot;平移后结果&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20190926151127550-1684330295827-14.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;图像旋转&#34;&gt;图像旋转&lt;/h2&gt;
&lt;p&gt;图像旋转是指图像按照某个位置转动一定角度的过程，旋转中图像仍保持这原始尺寸。&lt;/p&gt;
&lt;p&gt;假设图像逆时针旋转&lt;span class=&#34;math inline&#34;&gt;\(\theta\)&lt;/span&gt;，则根据坐标转换可得:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\left[\begin{matrix}x&amp;#39;&amp;amp;y&amp;#39;&amp;amp;1\end{matrix}\right]=\left[\begin{matrix}x&amp;amp;y&amp;amp;1\end{matrix}\right]\left[\begin{matrix}\cos\theta&amp;amp;-\sin\theta&amp;amp;0\\\sin\theta&amp;amp;\cos\theta&amp;amp;0\\0&amp;amp;0&amp;amp;1\end{matrix}\right]
\]&lt;/span&gt; 假设在旋转的时候是以旋转中心为坐标原点的，旋转结束后还需要将坐标原点移到图像左上角，也就是还要进行一次变换。 &lt;span class=&#34;math display&#34;&gt;\[
\left[\begin{matrix}x&amp;#39;&amp;#39;&amp;amp;y&amp;#39;&amp;#39;&amp;amp;1\end{matrix}\right]=\left[\begin{matrix}x&amp;#39;&amp;amp;y&amp;#39;&amp;amp;1\end{matrix}\right]\left[\begin{matrix}1&amp;amp;0&amp;amp;0\\0&amp;amp;-1&amp;amp;0\\left&amp;amp;top&amp;amp;1\end{matrix}\right]\\
=\left[\begin{matrix}x&amp;#39;&amp;amp;y&amp;#39;&amp;amp;1\end{matrix}\right]\left[\begin{matrix}\cos\theta&amp;amp;-\sin\theta&amp;amp;0\\\sin\theta&amp;amp;\cos\theta&amp;amp;0\\0&amp;amp;0&amp;amp;1\end{matrix}\right]\left[\begin{matrix}1&amp;amp;0&amp;amp;0\\0&amp;amp;-1&amp;amp;0\\left&amp;amp;top&amp;amp;1\end{matrix}\right]
\]&lt;/span&gt; 在&lt;code&gt;OpenCV&lt;/code&gt;中图像旋转首先根据旋转角度和旋转中心获取旋转矩阵，然后根据旋转矩阵进行变换，即可实现任意角度和任意中心的旋转效果。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cv2.getRotationMatrix2D(center, angle, scale)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;center：旋转中心&lt;/li&gt;
&lt;li&gt;angle：旋转角度&lt;/li&gt;
&lt;li&gt;scale：缩放比例&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;返回：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;M：旋转矩阵&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;调用&lt;code&gt;cv.warpAffine&lt;/code&gt;完成图像的旋转&lt;/p&gt;
&lt;h3 id=&#34;示例代码-2&#34;&gt;示例代码&lt;/h3&gt;
&lt;p&gt;将图像以中心点旋转&lt;span class=&#34;math inline&#34;&gt;\(90^\circ\)&lt;/span&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; cv2 &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; cv&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 1 读取图像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img = cv.imread(&lt;span class=&#34;string&#34;&gt;&amp;quot;./image/image2.jpg&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2 图像旋转&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rows,cols = img.shape[:&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2.1 生成旋转矩阵&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;M = cv.getRotationMatrix2D((cols/&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,rows/&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;),&lt;span class=&#34;number&#34;&gt;90&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2.2 进行旋转变换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dst = cv.warpAffine(img,M,(cols,rows))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3 图像展示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fig,axes=plt.subplots(nrows=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,ncols=&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,figsize=(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;),dpi=&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].imshow(img1[:,:,::-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].set_title(&lt;span class=&#34;string&#34;&gt;&amp;quot;原图&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].imshow(dst[:,:,::-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].set_title(&lt;span class=&#34;string&#34;&gt;&amp;quot;旋转后结果&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20190926152854704.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;仿射变换&#34;&gt;仿射变换&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://baike.baidu.com/item/%E4%BB%BF%E5%B0%84%E5%8F%98%E6%8D%A2/4289056&#34;&gt;&lt;code&gt;仿射变换&lt;/code&gt;&lt;/a&gt;是指在几何中，一个向量空间进行一次线性变换并接上一个平移，变换为另一个向量空间。&lt;/p&gt;
&lt;p&gt;图像的仿射变换，如下图所示，原始图像的点A，B和C与仿射图像三个点一一映射, 仍然形成三角形, 但形状已经大大改变，通过这样两组三点（感兴趣点）求出仿射变换， 接下来我们就能把仿射变换应用到图像中所有的点中，就完成了图像的仿射变换。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/images.jpeg&#34;  style=&#34;zoom: 80%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;OpenCV&lt;/code&gt;中，仿射变换的矩阵是一个2×3的矩阵 &lt;span class=&#34;math display&#34;&gt;\[
M=
\left[\begin{matrix}A&amp;amp;B\end{matrix}\right]=
\left[\begin{matrix}a_{00}\quad a_{01}\quad b_0\\\underbrace{a_{10}\quad a_{11}}_A\quad b_1\end{matrix}\right]
\]&lt;/span&gt; 其中子矩阵&lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt;是线性变换矩阵，子矩阵&lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt;是平移项，对于图像上的任一位置&lt;span class=&#34;math inline&#34;&gt;\((x,y)\)&lt;/span&gt;，仿射变换执行的是如下的操作： &lt;span class=&#34;math display&#34;&gt;\[
T_{affine}=A
\left[\begin{matrix}x\\y\end{matrix}\right]+B=M
\left[\begin{matrix}x\\y\\1\end{matrix}\right]
\]&lt;/span&gt; &lt;strong&gt;注意：&lt;/strong&gt;对于图像而言，宽度方向是x，高度方向是y，坐标的顺序和图像像素对应下标一致。所以原点的位置不是左下角而是左上角，y的方向也不是向上，而是向下。&lt;/p&gt;
&lt;p&gt;在仿射变换中，原图中所有的平行线在结果图像中同样平行。为了创建这个矩阵我们需要从原图像中找到三个点以及他们在输出图像中的位置。然后&lt;code&gt;cv2.getAffineTransform&lt;/code&gt; 会创建一个$ 2$ 的矩阵，最后这个矩阵会被传给函数&lt;code&gt;cv2.warpAffine&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;示例代码-3&#34;&gt;示例代码&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; cv2 &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; cv&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 1 图像读取&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img = cv.imread(&lt;span class=&#34;string&#34;&gt;&amp;quot;./image/image2.jpg&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2 仿射变换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rows,cols = img.shape[:&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2.1 创建变换矩阵&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;pts1 = np.float32([[&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;],[&lt;span class=&#34;number&#34;&gt;200&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;],[&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;200&lt;/span&gt;]])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;pts2 = np.float32([[&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;],[&lt;span class=&#34;number&#34;&gt;200&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;],[&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;250&lt;/span&gt;]])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;M = cv.getAffineTransform(pts1,pts2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2.2 完成仿射变换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dst = cv.warpAffine(img,M,(cols,rows))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3 图像显示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fig,axes=plt.subplots(nrows=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,ncols=&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,figsize=(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;),dpi=&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].imshow(img[:,:,::-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].set_title(&lt;span class=&#34;string&#34;&gt;&amp;quot;原图&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].imshow(dst[:,:,::-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].set_title(&lt;span class=&#34;string&#34;&gt;&amp;quot;仿射后结果&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20190926161027173.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;透射变换&#34;&gt;透射变换&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://baike.baidu.com/item/%E9%80%8F%E8%A7%86%E5%8F%98%E6%8D%A2/8746342&#34;&gt;&lt;code&gt;透射变换&lt;/code&gt;&lt;/a&gt;是视角变化的结果，是指利用透视中心、像点、目标点三点共线的条件，按透视旋转定律使承影面（透视面）绕迹线（透视轴）旋转某一角度，破坏原有的投影光线束，仍能保持承影面上投影几何图形不变的变换。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191023130051717.png&#34; style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;它的本质是将图像投影到一个新的视平面，其通用变换公式为：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\left[\begin{matrix}x&amp;#39;&amp;amp;y&amp;#39;&amp;amp;z&amp;#39;\end{matrix}\right]=\left[\begin{matrix}u&amp;amp;v&amp;amp;w\end{matrix}\right]\left[\begin{matrix}a_{00}\quad a_{01}\quad a_{02}\\a_{10}\quad a_{11}\quad a_{12}\\\underbrace{a_{20}\quad a_{21}\quad a_{22}}_T\end{matrix}\right]
\]&lt;/span&gt; 其中&lt;span class=&#34;math inline&#34;&gt;\((u,v)\)&lt;/span&gt;是原始图像的像素坐标，&lt;span class=&#34;math inline&#34;&gt;\(w\)&lt;/span&gt;取值为1，&lt;span class=&#34;math inline&#34;&gt;\((x=x&amp;#39;/z&amp;#39;,y=y&amp;#39;/z&amp;#39;)\)&lt;/span&gt;是透射变换后的结果。&lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt;矩阵称为透视变换矩阵， &lt;span class=&#34;math display&#34;&gt;\[
T=
\left[\begin{matrix}a_{00}&amp;amp;a_{01}&amp;amp;a_{02}\\a_{10}&amp;amp;a_{11}&amp;amp;a_{12}\\a_{20}&amp;amp; a_{21}&amp;amp; a_{22}\end{matrix}\right]=
\left[\begin{matrix}T_{1}&amp;amp;T_{2}\\T_{3}&amp;amp;a_{22}\end{matrix}\right]
\]&lt;/span&gt; 其中：&lt;span class=&#34;math inline&#34;&gt;\(T1\)&lt;/span&gt;是图像进行线性变换，&lt;span class=&#34;math inline&#34;&gt;\(T2\)&lt;/span&gt;对图像进行平移，&lt;span class=&#34;math inline&#34;&gt;\(T3\)&lt;/span&gt;表示对图像进行投射变换，一般&lt;span class=&#34;math inline&#34;&gt;\(a_{22}\)&lt;/span&gt;取为1。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;opencv&lt;/code&gt;中，先找到四个点(其中任意三个点不共线)，然后获取透射变换矩阵&lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt;，再进行透射变换。通过函数&lt;code&gt;cv.getPerspectiveTransform&lt;/code&gt;找到透射变换矩阵，将&lt;code&gt;cv.warpPerspective&lt;/code&gt;应用于此&lt;code&gt;3x3&lt;/code&gt;变换矩阵。&lt;/p&gt;
&lt;h3 id=&#34;示例代码-4&#34;&gt;示例代码&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; cv2 &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; cv&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 1 读取图像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img = cv.imread(&lt;span class=&#34;string&#34;&gt;&amp;quot;./image/image2.jpg&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2 透射变换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rows,cols = img.shape[:&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2.1 创建变换矩阵&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;pts1 = np.float32([[&lt;span class=&#34;number&#34;&gt;56&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;65&lt;/span&gt;],[&lt;span class=&#34;number&#34;&gt;368&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;52&lt;/span&gt;],[&lt;span class=&#34;number&#34;&gt;28&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;387&lt;/span&gt;],[&lt;span class=&#34;number&#34;&gt;389&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;390&lt;/span&gt;]])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;pts2 = np.float32([[&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;145&lt;/span&gt;],[&lt;span class=&#34;number&#34;&gt;300&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;],[&lt;span class=&#34;number&#34;&gt;80&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;290&lt;/span&gt;],[&lt;span class=&#34;number&#34;&gt;310&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;300&lt;/span&gt;]])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;T = cv.getPerspectiveTransform(pts1,pts2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2.2 进行变换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dst = cv.warpPerspective(img,T,(cols,rows))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3 图像显示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fig,axes=plt.subplots(nrows=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,ncols=&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,figsize=(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;),dpi=&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].imshow(img[:,:,::-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].set_title(&lt;span class=&#34;string&#34;&gt;&amp;quot;原图&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].imshow(dst[:,:,::-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].set_title(&lt;span class=&#34;string&#34;&gt;&amp;quot;透射后结果&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20190926162913916.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;图像金字塔&#34;&gt;图像金字塔&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://baike.baidu.com/item/%E5%9B%BE%E5%83%8F%E9%87%91%E5%AD%97%E5%A1%94/306277&#34;&gt;图像金字塔&lt;/a&gt;是图像多尺度表达的一种，是一种以多分辨率来解释图像的有效但概念简单的结构。一幅图像的图像金字塔是一系列以金字塔形状（自下而上）逐步降低，且来源于同一张原始图的图像分辨率集合。其通过梯次向下采样获得，直到达到某个终止条件才停止采样。我们将一层一层的图像比喻成金字塔，层级越高，则图像越小，分辨率越低。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cv.pyrUp(img)       &lt;span class=&#34;comment&#34;&gt;#对图像进行上采样&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cv.pyrDown(img)        &lt;span class=&#34;comment&#34;&gt;#对图像进行下采样&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;示例代码-5&#34;&gt;示例代码&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; cv2 &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; cv&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 1 图像读取&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img = cv.imread(&lt;span class=&#34;string&#34;&gt;&amp;quot;./image/image2.jpg&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2 进行图像采样&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;up_img = cv.pyrUp(img)  &lt;span class=&#34;comment&#34;&gt;# 上采样操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img_1 = cv.pyrDown(img)  &lt;span class=&#34;comment&#34;&gt;# 下采样操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3 图像显示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cv.imshow(&lt;span class=&#34;string&#34;&gt;&amp;#x27;enlarge&amp;#x27;&lt;/span&gt;, up_img)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cv.imshow(&lt;span class=&#34;string&#34;&gt;&amp;#x27;original&amp;#x27;&lt;/span&gt;, img)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cv.imshow(&lt;span class=&#34;string&#34;&gt;&amp;#x27;shrink&amp;#x27;&lt;/span&gt;, img_1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cv.waitKey(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cv.destroyAllWindows()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20190926114816933.png&#34;  style=&#34;zoom: 50%;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;形态学操作&#34;&gt;形态学操作&lt;/h1&gt;
&lt;p&gt;形态学转换是基于图像形状的一些简单操作。它通常在二进制图像上执行。腐蚀和膨胀是两个基本的形态学运算符。然后它的变体形式如开运算，闭运算，礼帽黑帽等。&lt;/p&gt;
&lt;h2 id=&#34;连通性&#34;&gt;连通性&lt;/h2&gt;
&lt;p&gt;在图像中，最小的单位是像素，每个像素周围有8个邻接像素，常见的邻接关系有3种：4邻接、8邻接和D邻接。分别如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20190926185646667-1684373842950-11.png&#34;  style=&#34;zoom: 50%;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4邻接：像素&lt;span class=&#34;math inline&#34;&gt;\(p(x,y)\)&lt;/span&gt;的4邻域是&lt;code&gt;(x+1,y);(x-1,y);(x,y+1);(x,y-1)&lt;/code&gt;，用&lt;span class=&#34;math inline&#34;&gt;\(N_4(p)\)&lt;/span&gt;表示像素p的4邻接&lt;/li&gt;
&lt;li&gt;D邻接：像素&lt;span class=&#34;math inline&#34;&gt;\(p(x,y)\)&lt;/span&gt;的D邻域是&lt;code&gt;(x+1,y+1);(x+1,y-1);(x-1,y+1);(x-1,y-1)&lt;/code&gt;，用&lt;span class=&#34;math inline&#34;&gt;\(N_D(p)\)&lt;/span&gt;表示像素p的D邻域&lt;/li&gt;
&lt;li&gt;8邻接：像素&lt;span class=&#34;math inline&#34;&gt;\(p(x,y)\)&lt;/span&gt;的8邻域是4邻域的点+D邻域的点，用&lt;span class=&#34;math inline&#34;&gt;\(N_8(p)\)&lt;/span&gt;表示像素p的8邻域&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;连通性&lt;/strong&gt;是描述区域和边界的重要概念，两个像素连通的两个必要条件是：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;两个像素的位置是否相邻&lt;/li&gt;
&lt;li&gt;两个像素的灰度值是否满足特定的相似性准则(或者是否相等)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;根据连通性的定义，有4连通、8连通和m连通三种。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;4连通：对于具有值V的像素p和q，如果q在集合&lt;span class=&#34;math inline&#34;&gt;\(N_4(p)\)&lt;/span&gt;中，则称这两个像素是4连通。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;8连通：对于具有值V的像素p和q，如果q在集合&lt;span class=&#34;math inline&#34;&gt;\(N_8(p)\)&lt;/span&gt;中，则称这两个像素是8连通。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20190926185504256-1684374493446-13.png&#34;  style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;m连通：对于具有值V的像素p和q，如果q在集合&lt;span class=&#34;math inline&#34;&gt;\(N_4(p)\)&lt;/span&gt;中或q在集合&lt;span class=&#34;math inline&#34;&gt;\(N_D(p)\)&lt;/span&gt;中，并且&lt;span class=&#34;math inline&#34;&gt;\(N_4(p)\)&lt;/span&gt;与&lt;span class=&#34;math inline&#34;&gt;\(N_4(q)\)&lt;/span&gt;的交集为空(没有值V的像素)，则称这两个像素是m连通。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20190927101630929-1684374613256-15.png&#34;  style=&#34;zoom: 90%;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;腐蚀和膨胀&#34;&gt;腐蚀和膨胀&lt;/h2&gt;
&lt;p&gt;腐蚀和膨胀都是针对白色部分（高亮部分）而言的。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;腐蚀是原图中的高亮区域被蚕食，效果图拥有比原图更小的高亮区域；腐蚀是求局部最小值的操作，作用是消除物体边界点，使目标缩小，可以消除小于结构元素的噪声点。&lt;/li&gt;
&lt;li&gt;膨胀是使图像中高亮部分扩张，效果图拥有比原图更大的高亮区域；膨胀是求局部最大值的操作，作用是将与物体接触的所有背景点合并到物体中，使目标增大，可添补目标中的孔洞。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;腐蚀的具体操作是：&lt;/strong&gt;用结构元素中的每一个像素与其覆盖的像素做“与”操作，如果都为1，则该像素为1，否则为0。如下图所示，结构A被结构B腐蚀后&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20190927105316401-1684375461882-17.png&#34;  style=&#34;zoom: 67%;&#34; /&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cv.erode(img,kernel,iterations)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;img：要处理的图像&lt;/li&gt;
&lt;li&gt;kernel：核结构&lt;/li&gt;
&lt;li&gt;iterations：腐蚀的次数，默认是1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;膨胀的具体操作是：&lt;/strong&gt;用结构元素中的每一个像素与其覆盖的像素做“与”操作，如果都为0，则该像素为0，否则为1。如下图所示，结构A被结构B腐蚀后&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20190927110711458-1684375683181-19.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cv.dilate(img,kernel,iterations)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;img：要处理的图像&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;kernel：核结构&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;iterations：腐蚀的次数，默认是1&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;示例代码-6&#34;&gt;示例代码&lt;/h3&gt;
&lt;p&gt;使用一个&lt;span class=&#34;math inline&#34;&gt;\(5\times5\)&lt;/span&gt;的卷积核实现腐蚀和膨胀的运算&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; cv2 &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; cv&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 1 读取图像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img = cv.imread(&lt;span class=&#34;string&#34;&gt;&amp;quot;./image/image3.png&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2 创建核结构&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;kernel = np.ones((&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;), np.uint8)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3 图像腐蚀和膨胀&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;erosion = cv.erode(img, kernel) &lt;span class=&#34;comment&#34;&gt;# 腐蚀&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dilate = cv.dilate(img,kernel) &lt;span class=&#34;comment&#34;&gt;# 膨胀&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 4 图像展示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fig,axes=plt.subplots(nrows=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,ncols=&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,figsize=(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;),dpi=&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].imshow(img)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].set_title(&lt;span class=&#34;string&#34;&gt;&amp;quot;原图&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].imshow(erosion)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].set_title(&lt;span class=&#34;string&#34;&gt;&amp;quot;腐蚀后结果&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;].imshow(dilate)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;].set_title(&lt;span class=&#34;string&#34;&gt;&amp;quot;膨胀后结果&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20190927151844574-1684375808449-21.png&#34; style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;开闭运算&#34;&gt;开、闭运算&lt;/h2&gt;
&lt;p&gt;开运算和闭运算是将腐蚀和膨胀按照一定的次序进行处理。 但这两者并不是可逆的，即先开后闭并不能得到原来的图像。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;开运算是先腐蚀后膨胀，作用是消除噪点，去除小的干扰块，而不影响原来的图像。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20190927142206425-1684376263939-23.png&#34; style=&#34;zoom: 67%;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;闭运算是先膨胀后腐蚀，作用是消除闭合物体里面的孔洞，填充闭合区域。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20190927142923777-1684376306646-25.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cv.morphologyEx(img, op, kernel)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;img：要处理的图像&lt;/li&gt;
&lt;li&gt;op: 处理方式：若进行开运算，则设为cv.MORPH_OPEN，若进行闭运算，则设为cv.MORPH_CLOSE&lt;/li&gt;
&lt;li&gt;Kernel：核结构&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;示例代码-7&#34;&gt;示例代码&lt;/h3&gt;
&lt;p&gt;使用&lt;span class=&#34;math inline&#34;&gt;\(10\times10\)&lt;/span&gt;的卷积核实现开、闭运算。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; cv2 &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; cv&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 1 读取图像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img1 = cv.imread(&lt;span class=&#34;string&#34;&gt;&amp;quot;./image/image5.png&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img2 = cv.imread(&lt;span class=&#34;string&#34;&gt;&amp;quot;./image/image6.png&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2 创建核结构&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;kernel = np.ones((&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;), np.uint8)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3 图像的开闭运算&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cvOpen = cv.morphologyEx(img1,cv.MORPH_OPEN,kernel) &lt;span class=&#34;comment&#34;&gt;# 开运算&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cvClose = cv.morphologyEx(img2,cv.MORPH_CLOSE,kernel)&lt;span class=&#34;comment&#34;&gt;# 闭运算&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 4 图像展示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fig,axes=plt.subplots(nrows=&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,ncols=&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,figsize=(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].imshow(img1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].set_title(&lt;span class=&#34;string&#34;&gt;&amp;quot;原图&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].imshow(cvOpen)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].set_title(&lt;span class=&#34;string&#34;&gt;&amp;quot;开运算结果&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].imshow(img2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].set_title(&lt;span class=&#34;string&#34;&gt;&amp;quot;原图&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].imshow(cvClose)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].set_title(&lt;span class=&#34;string&#34;&gt;&amp;quot;闭运算结果&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20190927153400823-1684376402734-27.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;礼帽和黑帽&#34;&gt;礼帽和黑帽&lt;/h2&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;礼帽运算是原图像与开运算的结果图之差&lt;span class=&#34;math inline&#34;&gt;\(dst=tophat(src,element)=src-open(src,element)\)&lt;/span&gt;，
&lt;ul&gt;
&lt;li&gt;因为开运算带来的结果是放大了裂缝或者局部低亮度的区域。&lt;/li&gt;
&lt;li&gt;礼帽运算后的效果图突出了比原图轮廓周围的区域更明亮的区域，这一操作和选择的核的大小相关。&lt;/li&gt;
&lt;li&gt;作用：用来分离比邻近点亮一些的斑块。当一幅图像具有大幅的背景的时候，而微小物品比较有规律的情况下，可以使用礼帽运算进行背景提取。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;黑帽运算是闭运算的结果图与原图像之差&lt;span class=&#34;math inline&#34;&gt;\(dst=blackhat(src,element)=close(src,element)-src\)&lt;/span&gt;，
&lt;ul&gt;
&lt;li&gt;黑帽运算后的效果图突出了比原图轮廓周围的区域更暗的区域，&lt;/li&gt;
&lt;li&gt;作用：用来分离比邻近点暗一些的斑块。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cv.morphologyEx(img, op, kernel)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;img：要处理的图像&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;op：处理方式：&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Kernel：核结构&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;示例代码-8&#34;&gt;示例代码&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; cv2 &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; cv&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 1 读取图像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img1 = cv.imread(&lt;span class=&#34;string&#34;&gt;&amp;quot;./image/image5.png&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img2 = cv.imread(&lt;span class=&#34;string&#34;&gt;&amp;quot;./image/image6.png&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2 创建核结构&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;kernel = np.ones((&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;), np.uint8)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3 图像的礼帽和黑帽运算&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cvOpen = cv.morphologyEx(img1,cv.MORPH_TOPHAT,kernel) &lt;span class=&#34;comment&#34;&gt;# 礼帽运算&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cvClose = cv.morphologyEx(img2,cv.MORPH_BLACKHAT,kernel)&lt;span class=&#34;comment&#34;&gt;# 黑帽运算&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 4 图像显示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fig,axes=plt.subplots(nrows=&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,ncols=&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,figsize=(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].imshow(img1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].set_title(&lt;span class=&#34;string&#34;&gt;&amp;quot;原图&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].imshow(cvOpen)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].set_title(&lt;span class=&#34;string&#34;&gt;&amp;quot;礼帽运算结果&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].imshow(img2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].set_title(&lt;span class=&#34;string&#34;&gt;&amp;quot;原图&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].imshow(cvClose)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].set_title(&lt;span class=&#34;string&#34;&gt;&amp;quot;黑帽运算结果&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20190927154018177-1684377075287-29.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;图像平滑&#34;&gt;图像平滑&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://baike.baidu.com/item/%E5%9B%BE%E5%83%8F%E5%B9%B3%E6%BB%91/8827890&#34;&gt;&lt;code&gt;图像平滑&lt;/code&gt;&lt;/a&gt;从信号处理的角度看就是去除其中的高频信息，保留低频信息。因此可以对图像实施低通滤波。低通滤波可以去除图像中的噪声，对图像进行平滑。根据滤波器的不同可分为均值滤波，高斯滤波，中值滤波， 双边滤波。&lt;/p&gt;
&lt;h2 id=&#34;图像噪声&#34;&gt;图像噪声&lt;/h2&gt;
&lt;p&gt;由于图像采集、处理、传输等过程不可避免的会受到噪声的污染，妨碍人们对图像理解及分析处理。常见的图像噪声有高斯噪声、椒盐噪声等。&lt;/p&gt;
&lt;h3 id=&#34;椒盐噪声&#34;&gt;椒盐噪声&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://baike.baidu.com/item/%E6%A4%92%E7%9B%90%E5%99%AA%E5%A3%B0/3455958&#34;&gt;&lt;code&gt;椒盐噪声&lt;/code&gt;&lt;/a&gt;也称为脉冲噪声，是图像中经常见到的一种噪声，它是一种随机出现的白点或者黑点，可能是亮的区域有黑色像素或是在暗的区域有白色像素。&lt;/p&gt;
&lt;p&gt;椒盐噪声的成因可能是影像讯号受到突如其来的强烈干扰而产生、类比数位转换器或位元传输错误等。例如失效的感应器导致像素值为最小值，饱和的感应器导致像素值为最大值。&lt;/p&gt;
&lt;h3 id=&#34;高斯噪声&#34;&gt;高斯噪声&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://baike.baidu.com/item/%E9%AB%98%E6%96%AF%E5%99%AA%E5%A3%B0/8587563&#34;&gt;高斯噪声&lt;/a&gt;是指噪声密度函数服从高斯分布的一类噪声。在数字图像中的高斯噪声的主要来源出现在采集期间， 由于不良照明和/或高温引起的传感器噪声。&lt;/p&gt;
&lt;p&gt;高斯随机变量&lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;的概率密度函数 &lt;span class=&#34;math display&#34;&gt;\[
p(x) = \frac{1}{\sigma\sqrt{2\pi}}e^{-\frac{(x-\mu)^2}{2\sigma^2}}
\]&lt;/span&gt; 其中&lt;span class=&#34;math inline&#34;&gt;\(z\)&lt;/span&gt;表示灰度值，&lt;span class=&#34;math inline&#34;&gt;\(\mu\)&lt;/span&gt;表示&lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;的平均值或期望值，&lt;span class=&#34;math inline&#34;&gt;\(\sigma\)&lt;/span&gt;表示&lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;的标准差。标准差的平方&lt;span class=&#34;math inline&#34;&gt;\(\sigma^2\)&lt;/span&gt;称为&lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;的方差。高斯函数的曲线如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/441dc1bf121e7b13c6376b5839a3cd7c_b.png&#34; style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;均值滤波&#34;&gt;均值滤波&lt;/h2&gt;
&lt;p&gt;采用&lt;strong&gt;均值滤波模板&lt;/strong&gt;对图像噪声进行滤除。令&lt;span class=&#34;math inline&#34;&gt;\(S_{xy}\)&lt;/span&gt;表示中心在&lt;span class=&#34;math inline&#34;&gt;\((x, y)\)&lt;/span&gt;点，尺寸为&lt;span class=&#34;math inline&#34;&gt;\(m\times n\)&lt;/span&gt; 的矩形子图像窗口的坐标组。 均值滤波器可表示为 &lt;span class=&#34;math display&#34;&gt;\[
\hat{f}=\frac{1}{mn}\sum_{(s,t)\in S_{xy}}g(s,t)
\]&lt;/span&gt; 由一个归一化卷积框完成的。它只是用卷积框覆盖区域所有像素的平均值来代替中心元素。&lt;/p&gt;
&lt;p&gt;例如，&lt;span class=&#34;math inline&#34;&gt;\(3\times3\)&lt;/span&gt;标准化的均值滤波如下所示： &lt;span class=&#34;math display&#34;&gt;\[
K=\frac{1}{9}\left[\begin{matrix}1&amp;amp;1&amp;amp;1\\1&amp;amp;1&amp;amp;1\\1&amp;amp;1&amp;amp;1\end{matrix}\right]
\]&lt;/span&gt; 均值滤波的优点是算法简单，计算速度较快，缺点是在去噪的同时去除了很多细节部分，将图像变得模糊。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cv.blur(src, ksize, anchor, borderType)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;src：输入图像&lt;/li&gt;
&lt;li&gt;ksize：卷积核的大小&lt;/li&gt;
&lt;li&gt;anchor：默认值 (-1,-1) ，表示核中心&lt;/li&gt;
&lt;li&gt;borderType：边界类型&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;示例代码-9&#34;&gt;示例代码&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; cv2 &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; cv&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; matplotlib &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 1 图像读取&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img = cv.imread(&lt;span class=&#34;string&#34;&gt;&amp;#x27;./image/dogsp.jpeg&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2 均值滤波&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;blur = cv.blur(img,(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3 图像显示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.figure(figsize=(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;),dpi=&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.subplot(&lt;span class=&#34;number&#34;&gt;121&lt;/span&gt;),plt.imshow(img[:,:,::-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]),plt.title(&lt;span class=&#34;string&#34;&gt;&amp;#x27;原图&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.xticks([]), plt.yticks([])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.subplot(&lt;span class=&#34;number&#34;&gt;122&lt;/span&gt;),plt.imshow(blur[:,:,::-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]),plt.title(&lt;span class=&#34;string&#34;&gt;&amp;#x27;均值滤波后结果&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.xticks([]), plt.yticks([])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20190928102258185-1684384223434-35.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;高斯滤波&#34;&gt;高斯滤波&lt;/h2&gt;
&lt;p&gt;二维高斯是构建高斯滤波器的基础，其概率分布函数为 &lt;span class=&#34;math display&#34;&gt;\[
G(x,y) = 
\frac{1}{\sigma_x\sqrt{2\pi}}e^{-\frac{(x-\mu)^2}{2\sigma_y^2}}\frac{1}{\sigma_y\sqrt{2\pi}}e^{-\frac{(y-\mu)^2}{2\sigma_y^2}}=
\frac{1}{2\pi\sigma^2}e^{-\frac{(x^2+y^2)}{2\sigma^2}}
\]&lt;/span&gt; 上述公式做了一些取值的处理：我们令&lt;span class=&#34;math inline&#34;&gt;\(\sigma_x=\sigma_y\)&lt;/span&gt;，越接近中心，取值越大，越远离中心，取值越小。计算平滑结果时，将“中心点”作为原点（&lt;span class=&#34;math inline&#34;&gt;\(\mu=0\)&lt;/span&gt;），其他点按照其在正态曲线上的位置，分配权重，就可以得到一个加权平均值。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20190928104118332-1684385364117-37.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;高斯平滑的流程：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确定权重矩阵
&lt;ul&gt;
&lt;li&gt;假定中心点的坐标是（0,0），距离它最近的8个点的坐标（&lt;span class=&#34;math inline&#34;&gt;\(3\times3\)&lt;/span&gt;的卷积核）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;计算权重矩阵，
&lt;ul&gt;
&lt;li&gt;设定&lt;span class=&#34;math inline&#34;&gt;\(\sigma\)&lt;/span&gt;的值，根据高斯概率分布函数&lt;span class=&#34;math inline&#34;&gt;\(G(x,y)\)&lt;/span&gt;计算这9个点，&lt;/li&gt;
&lt;li&gt;计算这9个点的总和，&lt;/li&gt;
&lt;li&gt;将9个值分别除以权重总和，得到最终的权重矩阵。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;计算高斯模糊
&lt;ul&gt;
&lt;li&gt;假设现有9个像素点，灰度值（0-255）&lt;/li&gt;
&lt;li&gt;每个点乘以对应的权重值&lt;/li&gt;
&lt;li&gt;将这9个值加起来，就是中心点的高斯模糊的值。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;对所有点重复这个过程，就得到了高斯模糊后的图像。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果原图是彩色图片，对&lt;code&gt;RGB&lt;/code&gt;三个通道分别做高斯平滑。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cv2.GaussianBlur(src,ksize,sigmaX,sigmay,borderType)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;src：输入图像&lt;/li&gt;
&lt;li&gt;ksize：高斯卷积核的大小&lt;/li&gt;
&lt;li&gt;sigmaX：水平方向的标准差&lt;/li&gt;
&lt;li&gt;sigmaY：垂直方向的标准差，默认值为0，表示与sigmaX相同&lt;/li&gt;
&lt;li&gt;borderType：填充边界类型&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;示例代码-10&#34;&gt;示例代码&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; cv2 &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; cv&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; matplotlib &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 1 图像读取&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img = cv.imread(&lt;span class=&#34;string&#34;&gt;&amp;#x27;./image/dogGasuss.jpeg&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2 高斯滤波&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;blur = cv.GaussianBlur(img,(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;),&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3 图像显示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.figure(figsize=(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;),dpi=&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.subplot(&lt;span class=&#34;number&#34;&gt;121&lt;/span&gt;),plt.imshow(img[:,:,::-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]),plt.title(&lt;span class=&#34;string&#34;&gt;&amp;#x27;原图&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.xticks([]), plt.yticks([])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.subplot(&lt;span class=&#34;number&#34;&gt;122&lt;/span&gt;),plt.imshow(blur[:,:,::-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]),plt.title(&lt;span class=&#34;string&#34;&gt;&amp;#x27;高斯滤波后结果&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.xticks([]), plt.yticks([])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20190928111903926-1684386634283-39.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;中值滤波&#34;&gt;中值滤波&lt;/h2&gt;
&lt;p&gt;中值滤波是一种典型的非线性滤波技术，基本思想是用像素点邻域灰度值的中值来代替该像素点的灰度值。它对椒盐噪声（salt-and-pepper noise）来说尤其有用，因为它不依赖于邻域内那些与典型值差别很大的值。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cv.medianBlur(src, ksize )&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;src：输入图像&lt;/li&gt;
&lt;li&gt;ksize：卷积核的大小&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;示例代码-11&#34;&gt;示例代码&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; cv2 &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; cv&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; matplotlib &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 1 图像读取&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img = cv.imread(&lt;span class=&#34;string&#34;&gt;&amp;#x27;./image/dogsp.jpeg&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2 中值滤波&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;blur = cv.medianBlur(img,&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3 图像展示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.figure(figsize=(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;),dpi=&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.subplot(&lt;span class=&#34;number&#34;&gt;121&lt;/span&gt;),plt.imshow(img[:,:,::-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]),plt.title(&lt;span class=&#34;string&#34;&gt;&amp;#x27;原图&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.xticks([]), plt.yticks([])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.subplot(&lt;span class=&#34;number&#34;&gt;122&lt;/span&gt;),plt.imshow(blur[:,:,::-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]),plt.title(&lt;span class=&#34;string&#34;&gt;&amp;#x27;中值滤波后结果&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.xticks([]), plt.yticks([])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20190928102319410-1684386742771-41.png&#34; style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
</content>
        <category term="Jupyter Notebook" />
        <updated>2023-05-17T13:19:42.000Z</updated>
    </entry>
    <entry>
        <id>https://liujk6525.github.io/OpenCV/OpenCV%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</id>
        <title>OpenCV基本操作</title>
        <link rel="alternate" href="https://liujk6525.github.io/OpenCV/OpenCV%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
        <content type="html">&lt;p&gt;&lt;strong&gt;Imgproc（图像处理模块）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;图像处理模块包括：图像的读取、显示、保存、几何运算等。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h1 id=&#34;图像的基础操作&#34;&gt;图像的基础操作&lt;/h1&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; cv2 &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; cv&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;图像读取显示保存&#34;&gt;图像读取、显示、保存&lt;/h2&gt;
&lt;h3 id=&#34;读取图像&#34;&gt;读取图像&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 以灰度图的形式读取图像，可以使用1、0或者-1来替代下面三个标志&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img = cv.imread(&lt;span class=&#34;string&#34;&gt;&amp;#x27;./messi5.jpg&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;要读取的图像，./表示当前文件夹&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;读取方式的标志&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;cv.IMREAD*COLOR：以彩色模式加载图像，任何图像的透明度都将被忽略。这是默认参数。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;cv.IMREAD*GRAYSCALE：以灰度模式加载图像&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;cv.IMREAD_UNCHANGED：包括alpha通道的加载图像模式。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;显示图像&#34;&gt;显示图像&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# opencv中显示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cv.imshow(&lt;span class=&#34;string&#34;&gt;&amp;#x27;./image&amp;#x27;&lt;/span&gt;,img)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cv.waitKey(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# matplotlib中展示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.imshow(img[:,:,::-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]) &lt;span class=&#34;comment&#34;&gt;# matplotlib中rgb和opencv是正好反着的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;显示图像的窗口名称，以字符串类型表示&lt;/li&gt;
&lt;li&gt;要加载的图像&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意：在调用显示图像的API后，要调用cv.waitKey()给图像绘制留下时间，否则窗口会出现无响应情况，并且图像无法显示出来&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;保存图像&#34;&gt;保存图像&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cv.imwrite(&lt;span class=&#34;string&#34;&gt;&amp;#x27;./messigray.png&amp;#x27;&lt;/span&gt;,img)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件名，保存位置，./表示当前文件夹&lt;/li&gt;
&lt;li&gt;要保存的图像&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;绘制几何图形&#34;&gt;绘制几何图形&lt;/h2&gt;
&lt;h3 id=&#34;绘制直线&#34;&gt;绘制直线&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cv.line(img,start,end,color,thickness)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;img:要绘制直线的图像&lt;/li&gt;
&lt;li&gt;start,end: 直线的起点和终点&lt;/li&gt;
&lt;li&gt;color: 线条的颜色&lt;/li&gt;
&lt;li&gt;thickness: 线条宽度&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;绘制圆形&#34;&gt;绘制圆形&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cv.circle(img,centerpoint, r, color, thickness)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;img:要绘制圆形的图像&lt;/li&gt;
&lt;li&gt;centerpoint, r: 圆心和半径&lt;/li&gt;
&lt;li&gt;color: 线条的颜色&lt;/li&gt;
&lt;li&gt;thickness: 线条宽度，为-1时生成闭合图案并填充颜色&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;绘制矩形&#34;&gt;绘制矩形&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cv.rectangle(img,leftupper,rightdown,color,thickness)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;img:要绘制矩形的图像&lt;/li&gt;
&lt;li&gt;leftupper, rightdown: 矩形的左上角和右下角坐标&lt;/li&gt;
&lt;li&gt;color: 线条的颜色&lt;/li&gt;
&lt;li&gt;thickness: 线条宽度&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;添加文字&#34;&gt;添加文字&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cv.putText(img,text,station, font, fontsize,color,thickness,cv.LINE_AA)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;img: 图像&lt;/li&gt;
&lt;li&gt;text：要写入的文本数据&lt;/li&gt;
&lt;li&gt;station：文本的放置位置&lt;/li&gt;
&lt;li&gt;font：字体&lt;/li&gt;
&lt;li&gt;fontsize :字体大小&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;效果展示&#34;&gt;效果展示&lt;/h3&gt;
&lt;p&gt;生成一个全黑的图像，然后在里面绘制图像并添加文字&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; cv2 &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; cv&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 1 创建一个空白的图像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img = np.zeros((&lt;span class=&#34;number&#34;&gt;512&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;512&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;), np.uint8)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2 绘制图形&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cv.line(img,(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;),(&lt;span class=&#34;number&#34;&gt;511&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;511&lt;/span&gt;),(&lt;span class=&#34;number&#34;&gt;255&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;),&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cv.rectangle(img,(&lt;span class=&#34;number&#34;&gt;384&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;),(&lt;span class=&#34;number&#34;&gt;510&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;128&lt;/span&gt;),(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;255&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;),&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cv.circle(img,(&lt;span class=&#34;number&#34;&gt;447&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;63&lt;/span&gt;), &lt;span class=&#34;number&#34;&gt;63&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;255&lt;/span&gt;), -&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;font = cv.FONT_HERSHEY_SIMPLEX&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cv.putText(img,&lt;span class=&#34;string&#34;&gt;&amp;#x27;OpenCV&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;500&lt;/span&gt;), font, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,(&lt;span class=&#34;number&#34;&gt;255&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;255&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;255&lt;/span&gt;),&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,cv.LINE_AA)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3 图像展示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.imshow(img[:,:,::-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.title(&lt;span class=&#34;string&#34;&gt;&amp;#x27;匹配结果&amp;#x27;&lt;/span&gt;), plt.xticks([]), plt.yticks([])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20190925154009533.png&#34; style=&#34;zoom: 50%;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;获取并修改像素点&#34;&gt;获取并修改像素点&lt;/h2&gt;
&lt;p&gt;可以通过行和列的坐标值获取该像素点的像素值。对于BGR图像，它返回一个蓝，绿，红值的数组。对于灰度图像，仅返回相应的强度值。使用相同的方法对像素值进行修改。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 获取某个像素点的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;px = img[&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 仅获取蓝色通道的强度值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;blue = img[&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 修改某个位置的像素值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img[&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;] = [&lt;span class=&#34;number&#34;&gt;255&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;255&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;255&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;图像的属性&#34;&gt;图像的属性&lt;/h2&gt;
&lt;p&gt;图像属性包括行数，列数和通道数，图像数据类型，像素数等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191016151042764-1684327382077-6.png&#34;  style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;图像通道的拆分与合并&#34;&gt;图像通道的拆分与合并&lt;/h2&gt;
&lt;p&gt;有时需要在B，G，R通道图像上单独工作,此时需要将&lt;code&gt;BGR&lt;/code&gt;图像分割为单个通道。或者可能需要将这些单独的通道合并到BGR图像。可以通过以下方式完成。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 通道拆分&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b,g,r = cv.split(img)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 通道合并&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img = cv.merge((b,g,r))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;色彩空间的改变&#34;&gt;色彩空间的改变&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;OpenCV&lt;/code&gt;中有150多种颜色空间转换方法。最广泛使用的转换方法有两种，&lt;span class=&#34;math inline&#34;&gt;\(BGR \leftrightarrow Gray\)&lt;/span&gt;和&lt;span class=&#34;math inline&#34;&gt;\(BGR \leftrightarrow HSV\)&lt;/span&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cv.cvtColor(input_image，flag)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;input_image: 进行颜色空间转换的图像&lt;/li&gt;
&lt;li&gt;flag: 转换类型
&lt;ul&gt;
&lt;li&gt;cv.COLOR_BGR2GRAY : &lt;span class=&#34;math inline&#34;&gt;\(BGR \leftrightarrow Gray\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;cv.COLOR_BGR2HSV: &lt;span class=&#34;math inline&#34;&gt;\(BGR \leftrightarrow HSV\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;算数操作&#34;&gt;算数操作&lt;/h1&gt;
&lt;h2 id=&#34;图像加法&#34;&gt;图像加法&lt;/h2&gt;
&lt;p&gt;使用&lt;code&gt;OpenCV&lt;/code&gt;的&lt;code&gt;cv.add()&lt;/code&gt;函数把两幅图像相加，或者可以简单地通过numpy操作添加两个图像，如&lt;span class=&#34;math inline&#34;&gt;\(res = img_1 + img_2\)&lt;/span&gt;。两个图像应该具有相同的大小和类型，或者第二个图像可以是标量值。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;x = np.uint8([&lt;span class=&#34;number&#34;&gt;250&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y = np.uint8([&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;( cv.add(x,y) ) &lt;span class=&#34;comment&#34;&gt;# 250+10 = 260 =&amp;gt; 255&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[[&lt;span class=&#34;number&#34;&gt;255&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;( x+y )          &lt;span class=&#34;comment&#34;&gt;# 250+10 = 260 % 256 = 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;**注意：&lt;code&gt;OpenCV&lt;/code&gt;的加法是饱和操作，而&lt;code&gt;Numpy&lt;/code&gt;添加是模运算。这种区别在对两幅图像进行加法时会很明显。&lt;code&gt;OpenCV&lt;/code&gt; 的结果会更好一点。所以我们尽量使用 &lt;code&gt;OpenCV&lt;/code&gt;中的函数。&lt;/p&gt;
&lt;p&gt;将两幅图像进行加法操作来比较其中的区别：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; cv2 &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; cv&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 1 读取图像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img1 = cv.imread(&lt;span class=&#34;string&#34;&gt;&amp;quot;./view.jpg&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img2 = cv.imread(&lt;span class=&#34;string&#34;&gt;&amp;quot;./rain.jpg&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2 加法操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img3 = cv.add(img1,img2) &lt;span class=&#34;comment&#34;&gt;# cv中的加法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img4 = img1+img2 &lt;span class=&#34;comment&#34;&gt;# 直接相加&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3 图像显示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fig,axes=plt.subplots(nrows=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,ncols=&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,figsize=(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;),dpi=&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].imshow(img3[:,:,::-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].set_title(&lt;span class=&#34;string&#34;&gt;&amp;quot;cv中的加法&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].imshow(img4[:,:,::-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axes[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].set_title(&lt;span class=&#34;string&#34;&gt;&amp;quot;直接相加&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;结果如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191016154714377.png&#34; style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;图像融合&#34;&gt;图像融合&lt;/h2&gt;
&lt;p&gt;这其实也是加法，但是不同的是两幅图像的权重不同，这就会给人一种混合或者透明的感觉。图像混合的计算公式如下：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
g(x)=(1−\alpha)f_0(x)+\alpha f_1(x)+\gamma
\]&lt;/span&gt; 通过修改&lt;span class=&#34;math inline&#34;&gt;\(\alpha\)&lt;/span&gt;的值&lt;span class=&#34;math inline&#34;&gt;\((0\rightarrow1)\)&lt;/span&gt;，可以实现非常炫酷的混合。&lt;/p&gt;
&lt;p&gt;现在我们把两幅图混合在一起。第一幅图的权重是0.7，第二幅图的权重是0.3。函数&lt;code&gt;cv2.addWeighted()&lt;/code&gt;可以按下面的公式对图片进行混合操作。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
dst = (1-\alpha)\cdot img_1 + \alpha\cdot img_2 + \gamma
\]&lt;/span&gt; 这里&lt;span class=&#34;math inline&#34;&gt;\(\gamma\)&lt;/span&gt;取为0。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; cv2 &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; cv&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 1 读取图像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img1 = cv.imread(&lt;span class=&#34;string&#34;&gt;&amp;quot;view.jpg&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img2 = cv.imread(&lt;span class=&#34;string&#34;&gt;&amp;quot;rain.jpg&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2 图像混合&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;img3 = cv.addWeighted(img1,&lt;span class=&#34;number&#34;&gt;0.7&lt;/span&gt;,img2,&lt;span class=&#34;number&#34;&gt;0.3&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3 图像显示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.figure(figsize=(&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.imshow(img3[:,:,::-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/image-20191016161128720.png&#34; style=&#34;zoom:%67%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;这里都要求两幅图像是相同大小的。&lt;/p&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1Fo4y1d7JL?p=11&amp;amp;vd_source=fe8e916be2bd597efffd8dfd95249141&#34;&gt;&lt;code&gt;黑马程序员人工智能教程_10小时学会图像处理OpenCV入门教程&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="Jupyter Notebook" />
        <updated>2023-05-17T12:09:11.000Z</updated>
    </entry>
    <entry>
        <id>https://liujk6525.github.io/OpenCV/OpenCV%E7%AE%80%E4%BB%8B/</id>
        <title>OpenCV简介</title>
        <link rel="alternate" href="https://liujk6525.github.io/OpenCV/OpenCV%E7%AE%80%E4%BB%8B/"/>
        <content type="html">&lt;h1 id=&#34;图像处理简介&#34;&gt;图像处理简介&lt;/h1&gt;
&lt;h2 id=&#34;图像&#34;&gt;图像&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://baike.baidu.com/item/%E5%9B%BE%E5%83%8F/773234&#34;&gt;&lt;code&gt;图像&lt;/code&gt;&lt;/a&gt;是人类视觉的基础，是自然景物的客观反映，是人类认识世界和人类本身的重要源泉。“图”是物体反射或透射光的分布，“像“是人的视觉系统所接受的图在人脑中所形版的印象或认识，照片、绘画、剪贴画、地图、书法作品、手写汉学、传真、卫星云图、影视画面、X光片、脑电图、心电图等都是图像&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h2 id=&#34;模拟图像和数字图像&#34;&gt;模拟图像和数字图像&lt;/h2&gt;
&lt;p&gt;图像起源于1826年前后法国科学家&lt;code&gt;Joseph Nicéphore Niépce&lt;/code&gt;发明的第一张可永久保存的照片，属于模拟图像。模拟图像又称连续图像，它通过某种物理量（如光、电等）的强弱变化来记录图像亮度信息，所以是&lt;strong&gt;连续变换的&lt;/strong&gt;。模拟信号的特点是容易受干扰，如今已经基本全面被数字图像替代。&lt;/p&gt;
&lt;p&gt;在第一次世界大战后，1921年美国科学家发明了&lt;code&gt;Bartlane System&lt;/code&gt;，并从伦敦传到纽约传输了第一幅数字图像，其亮度用&lt;strong&gt;离散数值表示&lt;/strong&gt;，将图片编码成5个灰度级，如下图所示，通过海底电缆进行传输。在发送端图片被编码并使用打孔带记录，通过系统传输后在接收方使用特殊的打印机恢复成图像。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/Snipaste_2019-09-24_11-19-33.png&#34;  style=&#34;zoom: 67%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;1950年左右，计算机被发明，数字图像处理学科正式诞生。&lt;/p&gt;
&lt;p&gt;计算机采用0/1编码的系统，数字图像是利用0/1来记录信息，我们平常接触的图像都是8位数图像，包含0～255灰度，其中0代表最黑，1代表最白。如下展现的是一个灰度图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/Snipaste_2019-09-24_11-46-55.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;图像的分类&#34;&gt;图像的分类&lt;/h2&gt;
&lt;h3 id=&#34;二值图像&#34;&gt;二值图像：&lt;/h3&gt;
&lt;p&gt;一幅二值图像的二维矩阵仅由0、1两个值构成，0代表黑色，1代白色。由于每一像素（矩阵中每一元素）取值仅有0、1两种可能，所以计算机中二值图像的数据类型通常为1个二进制位。二值图像通常用于文字、线条图的扫描识别（OCR）和掩膜图像的存储。&lt;/p&gt;
&lt;h3 id=&#34;灰度图&#34;&gt;灰度图：&lt;/h3&gt;
&lt;p&gt;每个像素只有一个采样颜色的图像，这类图像通常显示为从最暗黑色到最亮的白色的灰度，尽管理论上这个采样可以任何颜色的不同深浅，甚至可以是不同亮度上的不同颜色。灰度图像与黑白图像不同，在计算机图像领域中黑白图像只有黑色与白色两种颜色；但是，灰度图像在黑色与白色之间还有许多级的颜色深度。灰度图像经常是在单个电磁波频谱如可见光内测量每个像素的亮度得到的，用于显示的灰度图像通常用每个采样像素8位的非线性尺度来保存，这样可以有&lt;span class=&#34;math inline&#34;&gt;\(2^8=256\)&lt;/span&gt;级灰度（如果用&lt;span class=&#34;math inline&#34;&gt;\(16\)&lt;/span&gt;位，则有&lt;span class=&#34;math inline&#34;&gt;\(2^16=65536\)&lt;/span&gt;级）。&lt;/p&gt;
&lt;h3 id=&#34;彩色图&#34;&gt;&lt;strong&gt;彩色图&lt;/strong&gt;：&lt;/h3&gt;
&lt;p&gt;每个像素通常是由红（R）、绿（G）、蓝（B）三个分量来表示的，分量介于（0~255）。&lt;code&gt;RGB&lt;/code&gt;图像与索引图像一样都可以用来表示彩色图像。与索引图像一样，它分别用红（R）、绿（G）、蓝（B）三原色的组合来表示每个像素的颜色。但与索引图像不同的是，&lt;code&gt;RGB&lt;/code&gt;图像每一个像素的颜色值（由&lt;code&gt;RGB&lt;/code&gt;三原色表示）直接存放在图像矩阵中，由于每一像素的颜色需由R、G、B三个分量来表示，M、N分别表示图像的行列数，三个M x N的二维矩阵分别表示各个像素的R、G、B三个颜色分量。&lt;code&gt;RGB&lt;/code&gt;图像的数据类型一般为8位无符号整形，通常用于表示和存放真彩色图像。&lt;/p&gt;
&lt;h1 id=&#34;opencv简介&#34;&gt;&lt;code&gt;OpenCV&lt;/code&gt;简介&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;OpenCV&lt;/code&gt;是一款由Intel公司俄罗斯团队发起并参与和维护的一个计算机视觉处理开源软件库，支持与计算机视觉和机器学习相关的众多算法，并且正在日益扩展。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/Snipaste_2019-09-23_16-41-04.png&#34;  style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;opencv-python&#34;&gt;&lt;code&gt;OpenCV-Python&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;OpenCV-Python&lt;/code&gt;是原始&lt;code&gt;OpenCV&lt;/code&gt; C++实现的Python包装器。同时它使用&lt;code&gt;Numpy&lt;/code&gt;，这是一个高度优化的数据库操作库，具有&lt;code&gt;MATLAB&lt;/code&gt;风格的语法。所有&lt;code&gt;OpenCV&lt;/code&gt;数组结构都转换为&lt;code&gt;Numpy&lt;/code&gt;数组。这也使得与使用&lt;code&gt;Numpy&lt;/code&gt;的其他库（如&lt;code&gt;SciPy&lt;/code&gt;和&lt;code&gt;Matplotlib&lt;/code&gt;）集成更容易。&lt;/p&gt;
&lt;h2 id=&#34;opencv部署&#34;&gt;&lt;code&gt;OpenCV&lt;/code&gt;部署&lt;/h2&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;安装&lt;code&gt;OpenCV&lt;/code&gt;之前需要先安装&lt;a href=&#34;https://pypi.org/project/numpy/&#34;&gt;&lt;code&gt;numpy&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://pypi.org/project/matplotlib/&#34;&gt;&lt;code&gt;matplotlib&lt;/code&gt;&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;创建Python虚拟环境&lt;/li&gt;
&lt;li&gt;安装&lt;a href=&#34;https://pypi.org/project/opencv-python/&#34;&gt;&lt;code&gt;OpenCV-Python&lt;/code&gt;&lt;/a&gt;, 由于一些经典的算法被申请了版权，新版本有很大的限制，所以选用3.4.3以下的版本&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;pip install opencv-python==3.4.2.17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;测试是否安装成功，运行以下代码无报错，则说明安装成功。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; cv2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 读一个图片并进行显示(图片路径需自己指定)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;lena=cv2.imread(&lt;span class=&#34;string&#34;&gt;&amp;quot;1.jpg&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cv2.imshow(&lt;span class=&#34;string&#34;&gt;&amp;quot;image&amp;quot;&lt;/span&gt;,lena)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cv2.waitKey(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;需要利用SIFT和SURF等进行特征提取时，还需要安装：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;pip install opencv-contrib-python==&lt;span class=&#34;number&#34;&gt;3.4&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.2&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.17&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;opencv的模块&#34;&gt;&lt;code&gt;OpenCV&lt;/code&gt;的模块&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;/imgs/$%7Bfiilename%7D/Snipaste_2019-09-23_16-42-18.png&#34;  style=&#34;zoom: 50%;&#34; /&gt;&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style=&#34;width: 14%&#34; /&gt;
&lt;col style=&#34;width: 26%&#34; /&gt;
&lt;col style=&#34;width: 60%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;模块&lt;/th&gt;
&lt;th style=&#34;text-align: left;&#34;&gt;功能&lt;/th&gt;
&lt;th style=&#34;text-align: left;&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;strong&gt;Core&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;核心模块，包含最基础的操作&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;绘图函数、数组操作相关函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;strong&gt;HighGUI&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;高层图像用户界面&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;视频与图像的读取、显示、存储等接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;strong&gt;Imgproc&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;图像处理模块&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;图像处理的基础方法：包括图像滤波、图像的几何变换、平滑、阈值分割、形态学处理、边缘检测、目标检测、运动分析和对象跟踪等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;strong&gt;Featured2d&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;2D特征检测模块&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;用于提取图像特征以及特征匹配，nonfree模块实现了一些专利算法，如sift特征。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;Objdectect&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;目标检测模块&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;基于Haar、LBP特征的人脸检测，基于HOG的行人、汽车等目标检测，分类器使用Cascade Classification（级联分类）和Latent SVM等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;Video&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;视频处理模块&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;针对视频处理，如背景分离，前景检测、对象跟踪等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;Calib3d&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;3D重建模块&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;主要是相机校准和三维重建相关的内容。包含了基本的多视角几何算法，单个立体摄像头标定，物体姿态估计，立体相似性算法，3D信息的重建等。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;ML&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;机器学习模块&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;SVM，决策树，Boosting等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;FLANN&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;最近邻搜索模块&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;包含快速近似最近邻搜索FLANN 和聚类Clustering算法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;Stitching&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;图像拼接模块&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;实现了图像拼接功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;Photo&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;计算图像学&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;包含图像修复和图像去噪两部分&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;G-API&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;G-API模块&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;包含超高效的图像处理pipeline引擎&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1Fo4y1d7JL?p=4&amp;amp;vd_source=fe8e916be2bd597efffd8dfd95249141&#34;&gt;&lt;code&gt;黑马程序员人工智能教程_10小时学会图像处理OpenCV入门教程&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="Jupyter Notebook" />
        <updated>2023-05-17T10:59:27.000Z</updated>
    </entry>
</feed>
